{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/tags/index.md","path":"tags/index.md","modified":0,"renderable":0},{"_id":"source/categories/index.md","path":"categories/index.md","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/0.png","path":"img/0.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/head.png","path":"img/head.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/1.png","path":"img/hexo/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/3.png","path":"img/hexo/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/2.png","path":"img/hexo/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/4.png","path":"img/hexo/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/6.png","path":"img/hexo/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/5.png","path":"img/hexo/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/7.png","path":"img/hexo/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/8.png","path":"img/hexo/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/2.png","path":"img/datastruct/1_extract/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/1.png","path":"img/datastruct/1_extract/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/5.png","path":"img/datastruct/1_extract/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/3.png","path":"img/datastruct/1_extract/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/4.png","path":"img/datastruct/1_extract/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/6.png","path":"img/datastruct/1_extract/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/7.png","path":"img/datastruct/1_extract/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/9.png","path":"img/datastruct/1_extract/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/1_extract/8.png","path":"img/datastruct/1_extract/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/1.png","path":"img/datastruct/2_linearlist/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/2.png","path":"img/datastruct/2_linearlist/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/3.png","path":"img/datastruct/2_linearlist/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/4.png","path":"img/datastruct/2_linearlist/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/5.png","path":"img/datastruct/2_linearlist/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/1.png","path":"img/datastruct/4_string/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/11.png","path":"img/datastruct/4_string/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/22.png","path":"img/datastruct/4_string/22.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/2.png","path":"img/datastruct/4_string/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/3.png","path":"img/datastruct/4_string/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/4.png","path":"img/datastruct/4_string/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/33.png","path":"img/datastruct/4_string/33.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/5.png","path":"img/datastruct/4_string/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/7.png","path":"img/datastruct/4_string/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/6.png","path":"img/datastruct/4_string/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/8.png","path":"img/datastruct/4_string/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/4_string/9.png","path":"img/datastruct/4_string/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/config/2.png","path":"img/hexo/config/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/hexo/config/1.png","path":"img/hexo/config/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/commend/4.png","path":"img/linux/commend/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/commend/6.png","path":"img/linux/commend/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/commend/5.png","path":"img/linux/commend/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/commend/7.png","path":"img/linux/commend/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/install/1.png","path":"img/linux/install/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/install/2.png","path":"img/linux/install/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/install/3.png","path":"img/linux/install/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linux/user/8.png","path":"img/linux/user/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/1.png","path":"img/datastruct/2_linearlist/doublelinklist/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/2.png","path":"img/datastruct/2_linearlist/doublelinklist/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/3.png","path":"img/datastruct/2_linearlist/doublelinklist/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/4.png","path":"img/datastruct/2_linearlist/doublelinklist/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/5.png","path":"img/datastruct/2_linearlist/doublelinklist/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/2.png","path":"img/datastruct/2_linearlist/linklist/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/4.png","path":"img/datastruct/2_linearlist/linklist/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/3.png","path":"img/datastruct/2_linearlist/linklist/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/1.png","path":"img/datastruct/2_linearlist/linklist/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/5.png","path":"img/datastruct/2_linearlist/linklist/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/6.png","path":"img/datastruct/2_linearlist/linklist/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/1.png","path":"img/datastruct/3_stack/matrix/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/2.png","path":"img/datastruct/3_stack/matrix/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/3.png","path":"img/datastruct/3_stack/matrix/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/4.png","path":"img/datastruct/3_stack/matrix/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/5.png","path":"img/datastruct/3_stack/matrix/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/6.png","path":"img/datastruct/3_stack/matrix/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/8.png","path":"img/datastruct/3_stack/matrix/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/7.png","path":"img/datastruct/3_stack/matrix/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/9.png","path":"img/datastruct/3_stack/matrix/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/1.png","path":"img/datastruct/3_stack/exam/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/2.png","path":"img/datastruct/3_stack/exam/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/3.png","path":"img/datastruct/3_stack/exam/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/4.png","path":"img/datastruct/3_stack/exam/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/5.png","path":"img/datastruct/3_stack/exam/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/6.png","path":"img/datastruct/3_stack/exam/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/1.png","path":"img/datastruct/3_stack/queue/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/2.png","path":"img/datastruct/3_stack/queue/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/3.png","path":"img/datastruct/3_stack/queue/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/4.png","path":"img/datastruct/3_stack/queue/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/5.png","path":"img/datastruct/3_stack/queue/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/1.png","path":"img/datastruct/3_stack/stack/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/2.png","path":"img/datastruct/3_stack/stack/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/3.png","path":"img/datastruct/3_stack/stack/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/4.png","path":"img/datastruct/3_stack/stack/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/1.png","path":"img/datastruct/5_tree/bintree/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/10.png","path":"img/datastruct/5_tree/bintree/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/11.png","path":"img/datastruct/5_tree/bintree/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/12.png","path":"img/datastruct/5_tree/bintree/12.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/13.png","path":"img/datastruct/5_tree/bintree/13.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/14.png","path":"img/datastruct/5_tree/bintree/14.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/15.png","path":"img/datastruct/5_tree/bintree/15.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/16.png","path":"img/datastruct/5_tree/bintree/16.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/17.png","path":"img/datastruct/5_tree/bintree/17.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/18.png","path":"img/datastruct/5_tree/bintree/18.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/19.png","path":"img/datastruct/5_tree/bintree/19.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/2.png","path":"img/datastruct/5_tree/bintree/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/20.png","path":"img/datastruct/5_tree/bintree/20.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/21.png","path":"img/datastruct/5_tree/bintree/21.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/22.png","path":"img/datastruct/5_tree/bintree/22.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/3.png","path":"img/datastruct/5_tree/bintree/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/4.png","path":"img/datastruct/5_tree/bintree/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/5.png","path":"img/datastruct/5_tree/bintree/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/6.png","path":"img/datastruct/5_tree/bintree/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/7.png","path":"img/datastruct/5_tree/bintree/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/8.png","path":"img/datastruct/5_tree/bintree/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/9.png","path":"img/datastruct/5_tree/bintree/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/2.png","path":"img/datastruct/5_tree/hafmantree/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/4.png","path":"img/datastruct/5_tree/hafmantree/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/1.png","path":"img/datastruct/5_tree/hafmantree/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/3.png","path":"img/datastruct/5_tree/hafmantree/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/1.png","path":"img/datastruct/5_tree/set/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/2.png","path":"img/datastruct/5_tree/set/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/3.png","path":"img/datastruct/5_tree/set/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/4.png","path":"img/datastruct/5_tree/set/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/5.png","path":"img/datastruct/5_tree/set/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/tree/1.png","path":"img/datastruct/5_tree/tree/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/tree/2.png","path":"img/datastruct/5_tree/tree/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/tree/3.png","path":"img/datastruct/5_tree/tree/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/1.png","path":"img/datastruct/5_tree/treesave/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/3.png","path":"img/datastruct/5_tree/treesave/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/2.png","path":"img/datastruct/5_tree/treesave/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/4.png","path":"img/datastruct/5_tree/treesave/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/5.png","path":"img/datastruct/5_tree/treesave/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/6.png","path":"img/datastruct/5_tree/treesave/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/7.png","path":"img/datastruct/5_tree/treesave/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/8.png","path":"img/datastruct/5_tree/treesave/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/10.png","path":"img/datastruct/6_graph/DAG/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/1.png","path":"img/datastruct/6_graph/DAG/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/11.png","path":"img/datastruct/6_graph/DAG/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/12.png","path":"img/datastruct/6_graph/DAG/12.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/13.png","path":"img/datastruct/6_graph/DAG/13.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/2.png","path":"img/datastruct/6_graph/DAG/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/3.png","path":"img/datastruct/6_graph/DAG/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/5.png","path":"img/datastruct/6_graph/DAG/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/4.png","path":"img/datastruct/6_graph/DAG/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/6.png","path":"img/datastruct/6_graph/DAG/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/7.png","path":"img/datastruct/6_graph/DAG/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/8.png","path":"img/datastruct/6_graph/DAG/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/9.png","path":"img/datastruct/6_graph/DAG/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/1.png","path":"img/datastruct/7_search/AVL/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/2.png","path":"img/datastruct/7_search/AVL/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/3.png","path":"img/datastruct/7_search/AVL/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/4.png","path":"img/datastruct/7_search/AVL/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/5.png","path":"img/datastruct/7_search/AVL/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/7.png","path":"img/datastruct/7_search/AVL/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/6.png","path":"img/datastruct/7_search/AVL/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/1.png","path":"img/datastruct/6_graph/graph/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/10.png","path":"img/datastruct/6_graph/graph/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/11.png","path":"img/datastruct/6_graph/graph/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/12.png","path":"img/datastruct/6_graph/graph/12.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/13.png","path":"img/datastruct/6_graph/graph/13.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/15.png","path":"img/datastruct/6_graph/graph/15.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/14.png","path":"img/datastruct/6_graph/graph/14.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/16.png","path":"img/datastruct/6_graph/graph/16.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/17.png","path":"img/datastruct/6_graph/graph/17.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/18.png","path":"img/datastruct/6_graph/graph/18.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/19.png","path":"img/datastruct/6_graph/graph/19.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/2.png","path":"img/datastruct/6_graph/graph/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/20.png","path":"img/datastruct/6_graph/graph/20.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/21.png","path":"img/datastruct/6_graph/graph/21.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/22.png","path":"img/datastruct/6_graph/graph/22.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/23.png","path":"img/datastruct/6_graph/graph/23.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/25.png","path":"img/datastruct/6_graph/graph/25.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/24.png","path":"img/datastruct/6_graph/graph/24.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/26.png","path":"img/datastruct/6_graph/graph/26.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/3.png","path":"img/datastruct/6_graph/graph/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/5.png","path":"img/datastruct/6_graph/graph/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/4.png","path":"img/datastruct/6_graph/graph/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/6.png","path":"img/datastruct/6_graph/graph/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/7.png","path":"img/datastruct/6_graph/graph/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/9.png","path":"img/datastruct/6_graph/graph/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/8.png","path":"img/datastruct/6_graph/graph/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/1.png","path":"img/datastruct/6_graph/shortestpath/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/10.png","path":"img/datastruct/6_graph/shortestpath/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/11.png","path":"img/datastruct/6_graph/shortestpath/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/12.png","path":"img/datastruct/6_graph/shortestpath/12.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/13.png","path":"img/datastruct/6_graph/shortestpath/13.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/14.png","path":"img/datastruct/6_graph/shortestpath/14.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/2.png","path":"img/datastruct/6_graph/shortestpath/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/3.png","path":"img/datastruct/6_graph/shortestpath/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/4.png","path":"img/datastruct/6_graph/shortestpath/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/6.png","path":"img/datastruct/6_graph/shortestpath/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/5.png","path":"img/datastruct/6_graph/shortestpath/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/7.png","path":"img/datastruct/6_graph/shortestpath/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/8.png","path":"img/datastruct/6_graph/shortestpath/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/B/1.png","path":"img/datastruct/7_search/B/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/9.png","path":"img/datastruct/6_graph/shortestpath/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/1.png","path":"img/datastruct/6_graph/generatetree/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/10.png","path":"img/datastruct/6_graph/generatetree/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/3.png","path":"img/datastruct/6_graph/generatetree/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/2.png","path":"img/datastruct/6_graph/generatetree/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/4.png","path":"img/datastruct/6_graph/generatetree/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/5.png","path":"img/datastruct/6_graph/generatetree/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/6.png","path":"img/datastruct/6_graph/generatetree/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/8.png","path":"img/datastruct/6_graph/generatetree/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/7.png","path":"img/datastruct/6_graph/generatetree/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/9.png","path":"img/datastruct/6_graph/generatetree/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/1.png","path":"img/datastruct/7_search/BST/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/2.png","path":"img/datastruct/7_search/BST/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/3.png","path":"img/datastruct/7_search/BST/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/4.png","path":"img/datastruct/7_search/BST/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/身份证1.jpg","path":"img/datastruct/7_search/BST/身份证1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/red/1.png","path":"img/datastruct/7_search/red/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/身份证2.jpg","path":"img/datastruct/7_search/BST/身份证2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/red/2.png","path":"img/datastruct/7_search/red/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/1.png","path":"img/experience/pycharm/link_server/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/red/4.png","path":"img/datastruct/7_search/red/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/red/3.png","path":"img/datastruct/7_search/red/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/red/5.png","path":"img/datastruct/7_search/red/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/10.png","path":"img/experience/pycharm/link_server/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/11.png","path":"img/experience/pycharm/link_server/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/2.png","path":"img/experience/pycharm/link_server/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/3.png","path":"img/experience/pycharm/link_server/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/4.png","path":"img/experience/pycharm/link_server/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/5.png","path":"img/experience/pycharm/link_server/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/6.png","path":"img/experience/pycharm/link_server/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/7.png","path":"img/experience/pycharm/link_server/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/8.png","path":"img/experience/pycharm/link_server/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/9.png","path":"img/experience/pycharm/link_server/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/1.png","path":"img/datastruct/7_search/search/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/2.png","path":"img/datastruct/7_search/search/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/3.png","path":"img/datastruct/7_search/search/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/4.png","path":"img/datastruct/7_search/search/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/8.png","path":"img/datastruct/7_search/search/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/7.png","path":"img/datastruct/7_search/search/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/6.png","path":"img/datastruct/7_search/search/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/datastruct/7_search/search/5.png","path":"img/datastruct/7_search/search/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/vscode/relative_path/1.png","path":"img/experience/vscode/relative_path/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/vscode/relative_path/2.png","path":"img/experience/vscode/relative_path/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/1.png","path":"img/experience/app/lrc_to_smi/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/3.png","path":"img/experience/app/lrc_to_smi/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/5.png","path":"img/experience/app/lrc_to_smi/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/2.png","path":"img/experience/app/lrc_to_smi/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/4.png","path":"img/experience/app/lrc_to_smi/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SRDiff/1.png","path":"img/deeplearning/paper/SR/SRDiff/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SRDiff/2.png","path":"img/deeplearning/paper/SR/SRDiff/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SRDiff/3.png","path":"img/deeplearning/paper/SR/SRDiff/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/1.png","path":"img/deeplearning/paper/SR/HAT/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/11.png","path":"img/deeplearning/paper/SR/HAT/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/2.png","path":"img/deeplearning/paper/SR/HAT/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/3.png","path":"img/deeplearning/paper/SR/HAT/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/4.png","path":"img/deeplearning/paper/SR/HAT/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/5.png","path":"img/deeplearning/paper/SR/HAT/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/6.png","path":"img/deeplearning/paper/SR/HAT/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/7.png","path":"img/deeplearning/paper/SR/HAT/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/9.png","path":"img/deeplearning/paper/SR/HAT/9.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/8.png","path":"img/deeplearning/paper/SR/HAT/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/CDM/1.png","path":"img/deeplearning/paper/SR/CDM/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/CDM/2.png","path":"img/deeplearning/paper/SR/CDM/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/CDM/3.png","path":"img/deeplearning/paper/SR/CDM/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/10.png","path":"img/deeplearning/paper/SR/SwinIR/10.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/1.png","path":"img/deeplearning/paper/SR/SwinIR/1.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/12.png","path":"img/deeplearning/paper/SR/SwinIR/12.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/11.png","path":"img/deeplearning/paper/SR/SwinIR/11.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/13.png","path":"img/deeplearning/paper/SR/SwinIR/13.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/3.png","path":"img/deeplearning/paper/SR/SwinIR/3.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/2.png","path":"img/deeplearning/paper/SR/SwinIR/2.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/4.png","path":"img/deeplearning/paper/SR/SwinIR/4.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/6.png","path":"img/deeplearning/paper/SR/SwinIR/6.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/5.png","path":"img/deeplearning/paper/SR/SwinIR/5.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/7.png","path":"img/deeplearning/paper/SR/SwinIR/7.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/8.png","path":"img/deeplearning/paper/SR/SwinIR/8.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/9.png","path":"img/deeplearning/paper/SR/SwinIR/9.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/1_DDPM.md","hash":"7671adbb402c865080617b04082d61c62320c72b","modified":1698118711023},{"_id":"source/_drafts/yilia配置.md","hash":"8169072ff74ecf0b8e15f89a9d51234b0b1dd80b","modified":1705553259780},{"_id":"source/_drafts/progress1.md","hash":"c51366bc76ec2d0499a9c5ef02c18724cb53460a","modified":1677147418035},{"_id":"source/tags/index.md","hash":"a9b6dfbb10c311720b9d8e66804f219f91f2bd19","modified":1698055450779},{"_id":"source/_posts/hexo/hello-world.md","hash":"795449ef0e6e4d87eb446e60d1e6857383499e1f","modified":1698054930261},{"_id":"source/categories/index.md","hash":"736c605a6585b78360deb7eaea3451f3e4b4eeac","modified":1690344261211},{"_id":"source/_posts/hexo/hexo搭建.md","hash":"55349b8e1cb1de2f13bbbb07f088064af5769f32","modified":1706182457268},{"_id":"source/_posts/linux/Linux_0安装.md","hash":"4a96d12c9614f243d93dfdbef57e51e471fc2a10","modified":1706168703635},{"_id":"source/_posts/linux/Linux_2.用户和权限.md","hash":"81f11973eb778dc69676b61bbcfe752690f81b39","modified":1706180585109},{"_id":"source/_posts/linux/Linux_1.基础命令.md","hash":"4ed5491744fb1d95b0ec50b6351957bd27cb81b2","modified":1706180472336},{"_id":"source/_posts/wechartapp/weixin.md","hash":"157f8b711b8fce6b443086f5a9784d5783100afc","modified":1705552596694},{"_id":"source/_posts/algorithm/1_base/1_base.md","hash":"ef8baf80a47af49838cf57dd0fb57b1cfe327d26","modified":1698062281517},{"_id":"source/_posts/datastruct/2_linearlist/1_linearlist.md","hash":"d7bd03e466cf991023eb7845dfe26b0e4b0500db","modified":1698062554209},{"_id":"source/_posts/datastruct/2_linearlist/3_doublelinklist.md","hash":"eb1f564dcacdc514d76434c6b6841babd720c319","modified":1698062620512},{"_id":"source/_posts/datastruct/2_linearlist/2_linklist.md","hash":"2cd1a0ab4f4e81f63cc7cf9a3ae20aa1f8b5d32e","modified":1698062568746},{"_id":"source/_posts/datastruct/3_stack/3_exam.md","hash":"09d1f7e08b9e0736d823003453848e9ebd61362e","modified":1698062918400},{"_id":"source/_posts/datastruct/3_stack/1_stack.md","hash":"c5bac3f9b0df15b30b34a5eaa912c1f6066c2317","modified":1698067215453},{"_id":"source/_posts/datastruct/3_stack/4_matrix.md","hash":"801bbb8d81c49ffbe6cfe9e56c1cd636fb687fd6","modified":1698062953828},{"_id":"source/_posts/datastruct/1_extract/1_基础.md","hash":"01d0ac070c51a281402c20ae1d8c3454260985fa","modified":1698062355750},{"_id":"source/_posts/datastruct/3_stack/2_queue.md","hash":"c5e8e2879013a17a3c36d453b8e50b97d3fba922","modified":1698062900396},{"_id":"source/_posts/experience/app/lrc_to_smi.md","hash":"be60abdb16aa676b3a7228e2f1f1eb798e20d2fb","modified":1706157089249},{"_id":"source/_posts/datastruct/4_string/1_string.md","hash":"192e8c0c9fb2abf12f6129446e3f5d9872bd7623","modified":1698063339435},{"_id":"source/_posts/datastruct/6_graph/1_graph.md","hash":"8d4c50d24df9889a112b4a2bfd938c49c76b4b6f","modified":1698064007885},{"_id":"source/_posts/datastruct/6_graph/2_generatetree.md","hash":"0145a02d79dabab66ccf45bd6e7bb7af5af70d20","modified":1698064235357},{"_id":"source/_posts/datastruct/6_graph/3_shortestpath.md","hash":"ead39c8afafeaf71678b4bb5bd408f50d7e639ad","modified":1698064227797},{"_id":"source/_posts/datastruct/6_graph/4_DAG.md","hash":"555bfaac97a76d0724658f8abc7f1b65ff0fd8cd","modified":1698064476586},{"_id":"source/_posts/datastruct/7_search/3_AVL.md","hash":"79e876850fa8f40afba8adad82d24f9d2fef7cfa","modified":1698066122520},{"_id":"source/_posts/datastruct/7_search/4_redblacktree.md","hash":"95d5f24714c50bfd1f802fc1d39d4b0e5af42b36","modified":1698066147149},{"_id":"source/_posts/datastruct/7_search/2_BST.md","hash":"05269080838cf628f5ca643c6746aaf57f1161fc","modified":1698065629690},{"_id":"source/_posts/datastruct/7_search/1_search.md","hash":"a217f11a8e1b8e16c5941a6b58ecdefc86346bd9","modified":1698065418625},{"_id":"source/_posts/datastruct/5_tree/2_bintree.md","hash":"f080a883557453884928b4fed627e43a581276a7","modified":1698063380694},{"_id":"source/_posts/datastruct/5_tree/1_tree.md","hash":"09e75c758b997fa656e0bec274410e5f9345e4ff","modified":1698063355713},{"_id":"source/_posts/datastruct/7_search/5_Btree.md","hash":"57c298d1ceafaa1070406dc97c2c8005c5bb7848","modified":1698066328937},{"_id":"source/_posts/datastruct/5_tree/4_Hafmantree.md","hash":"56c2c29ee3d30867eb2534a0f2176fd9a1d8904d","modified":1698063679991},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690258400287},{"_id":"themes/yilia/source-src/css/article.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690363683164},{"_id":"source/_posts/datastruct/5_tree/3_treesave.md","hash":"b3c8097e12215a278d82a08f9bbddfdb225b4bc2","modified":1698063608035},{"_id":"source/_posts/datastruct/5_tree/5_set.md","hash":"96744e1e200311a3c4d5e0e21682916aeb9d3982","modified":1698063800125},{"_id":"source/_posts/experience/pycharm/link_server.md","hash":"371b30e52d9fe1ef8003232f6e1d4b0f2ab2282a","modified":1706157127022},{"_id":"source/_posts/experience/vscode/vscode.md","hash":"b50e2d9958f217cc1ea5d0ddbd61e6b84ccfb090","modified":1706157550023},{"_id":"source/_posts/deeplearning/paper/SR/CDM.md","hash":"3cd0fd968738243ef330a7670480b29c88cbfeec","modified":1706628964579},{"_id":"source/_posts/deeplearning/paper/SR/Resshift.md","hash":"619af24a5769247cb5379c11e920a0031d071464","modified":1706628970587},{"_id":"source/_posts/deeplearning/paper/SR/SwinIR.md","hash":"303b0c8ae5c9a728afb0e2c81290a381f848f416","modified":1706625438986},{"_id":"source/_posts/deeplearning/paper/SR/HAT.md","hash":"5475e08292bd4659feca64e0d8a5fe9e684d7cf2","modified":1706267723399},{"_id":"source/_posts/deeplearning/paper/SR/SRDiff.md","hash":"ea222f8466f4cccd9278252f314f227de07baee7","modified":1706628975672},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/1_dataoperation.md","hash":"2bf1596913f03225f0eb1520fc58083605a8613a","modified":1706761199962},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/1_dataoperation.ipynb","hash":"2bfdfccda916a9726a50f42a3597c90b933a9733","modified":1701086771948},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/2_preprocessing.md","hash":"06c236b04c398fd38a12cf3957eb009625cc41b8","modified":1703740506661},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/2_preprocessing.ipynb","hash":"7bac5b2966ad703eb9094ac752f11dd851c559b4","modified":1706601395407},{"_id":"source/_posts/deeplearning/code/pytorch/data/house_tiny.csv","hash":"b32168bc42e12b5594eb2b0a8cae6f77c459a72e","modified":1703739275650},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/3_linearalgebra.ipynb","hash":"7e1ceb83f597f39c29d06dd7a9a89bfecf41896e","modified":1706792572666},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/.ipynb_checkpoints/2_preprocessing-checkpoint.ipynb","hash":"9bc3b4afb0145f5795387830e5376960d315e439","modified":1703740534185},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1690258400255},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1690258400271},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1690258400255},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1690258400271},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1690258400271},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1690258400271},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1690258400271},{"_id":"themes/yilia/_config.yml","hash":"ba7d701c3b0ae07b725d5a7070e40a517f8b1814","modified":1706627420485},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1690258400333},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1690258400287},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1690258400271},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1690258400271},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1690258400271},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1690258400271},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1690258400271},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1690258400271},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1690258400271},{"_id":"themes/yilia/layout/categories.ejs","hash":"9041a223a9965188cd5c1a893b3e9e2f1cf67223","modified":1697888836478},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1690258400287},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1690258400287},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1690258400287},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1690258400287},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1690258400287},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1690258400287},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1690258400287},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1690258400333},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1690258400287},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1690258400318},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1690258400271},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1690258400287},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1690258400318},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1690258400318},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1690258400333},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1690258400333},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1690258400333},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1690258400333},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1690258400333},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1690258400333},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1690258400333},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1690258400287},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1690258400287},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1690258400287},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1690258400287},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1690258400302},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1690258400302},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1690258400287},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1690258400302},{"_id":"themes/yilia/source-src/css/category.scss","hash":"5accf5b4cb4de54317f5a45b28ae84a4cc21d3ef","modified":1690362971612},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1690258400302},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1690258400302},{"_id":"themes/yilia/source-src/css/global.scss","hash":"db5e94a4f3e2768d85da58f5fcb4b211928a0de0","modified":1690355445904},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1690258400302},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1690258400302},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1690258400302},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1690258400302},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1690258400302},{"_id":"themes/yilia/source-src/css/main.scss","hash":"dfb309c9801595a3c3978b5edb821eff85d9649c","modified":1690363018427},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1690258400318},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1690258400318},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1690258400318},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1690258400318},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1690258400318},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1690258400318},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1690258400318},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1690258400318},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1690258400318},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1690258400318},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1690258400318},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1690258400318},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1690258400318},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1690258400318},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1690258400318},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1690258400318},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1690258400318},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1690258400318},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1690258400318},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1690258400318},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1690258400287},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1690258400318},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1690258400287},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1690258400287},{"_id":"themes/yilia/source/img/hexo/1.png","hash":"eb5d590c866b115b711b6b18e688d0fb750b0fbc","modified":1661746009070},{"_id":"themes/yilia/source/img/hexo/3.png","hash":"1c144b98e4d21f31d06466142a48efaf2a94d5e2","modified":1661780828596},{"_id":"themes/yilia/source/img/hexo/2.png","hash":"1a2488cab647b2d9ee0645f8b1404f20d8f6391b","modified":1661746807535},{"_id":"themes/yilia/source/img/hexo/4.png","hash":"1386eb7152ca993db6bb1b73ec224640ed73ace1","modified":1661781049168},{"_id":"themes/yilia/source/img/hexo/6.png","hash":"e48c5ecbd482f3d30befe212e0bdbb7edfc8e1ce","modified":1661821525083},{"_id":"themes/yilia/source/img/hexo/7.png","hash":"e6b833a8a600ccde88c4204782cc3e8004e0edb2","modified":1661821616108},{"_id":"themes/yilia/source/img/hexo/8.png","hash":"2caad5ef038d9170ea58f0a0026bc8306280ec37","modified":1661821801772},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1690258400302},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1690258400302},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1690258400302},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1690258400302},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1690258400302},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1690258400302},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1690258400302},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1690258400302},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1690258400302},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1690258400302},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1690258400302},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1690258400302},{"_id":"themes/yilia/source/img/datastruct/1_extract/2.png","hash":"6d1421cc038218e94daff7ef39c7d3ac9d2e881c","modified":1690680047457},{"_id":"themes/yilia/source/img/datastruct/1_extract/3.png","hash":"571cded10b5c4269a889e56dab07bc689818e102","modified":1690680342728},{"_id":"themes/yilia/source/img/datastruct/1_extract/4.png","hash":"743e8d48e403ebd444289b1668ec6512099c9bb5","modified":1690681296164},{"_id":"themes/yilia/source/img/hexo/config/2.png","hash":"368052a20c17d974130d81cad86bf9eefbe696e6","modified":1706626651446},{"_id":"themes/yilia/source/img/linux/install/1.png","hash":"f5e18416748c8cc86938da9ae1f1ff42e91e08bd","modified":1672553166188},{"_id":"themes/yilia/source/img/linux/install/2.png","hash":"23d49dab591d627c6673fb2a75fd5d2eb9d2fed3","modified":1672553372958},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/3.png","hash":"8f35efb483252f734fcce32a59701f95ae08ca08","modified":1691217646864},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/10.png","hash":"39b9fd6684a084dab653c885553bdfb48e616d96","modified":1702802732650},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/11.png","hash":"b6ebbcce0e705315d2b9d49cfe47a5b0c7d738ef","modified":1702803286275},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/2.png","hash":"155e96cd73c2a354ba31581c3ae7990c35f1e77f","modified":1702801057457},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/3.png","hash":"d5c06088084abdd3d3f791266baf3e490353fa8e","modified":1702801133568},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/4.png","hash":"c2347bb419ce0b59e6a10bf13e67aabb6f1d6000","modified":1702801183526},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/5.png","hash":"528b88149b3eab3ef15c7cd04f18cf14463a9f8e","modified":1702801274883},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/7.png","hash":"8998704ce34bfa8d04b681a1b979c2ec712511df","modified":1702802255878},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/8.png","hash":"faedba9e3148fa893311cd9ddf820ae269dcc09a","modified":1702802406352},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/9.png","hash":"d38b41763eab121538504eba96a933f860d3fca0","modified":1702802438755},{"_id":"themes/yilia/source/img/experience/vscode/relative_path/1.png","hash":"5bf68e898eaedce375a846d2766c9d3c5f2c21c6","modified":1661864089789},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/1.png","hash":"3e6bf1d0664a78945a62cb8efe7291c559bdd95f","modified":1702357564761},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/2.png","hash":"29999d449f335d959a928b47ee573094d6407e6f","modified":1702358201820},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/4.png","hash":"2739ef20646d80910f98405f596227832d73dca7","modified":1702358320554},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/3.png","hash":"8557ef65ec097d18405fe25075ce508a569cdf3c","modified":1706094402890},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/4.png","hash":"bd2061a683d43542f298d3b6c369a7a73e940802","modified":1706094657110},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/6.png","hash":"f626d8e52052327ea89c2ef3f164331a2c5813e6","modified":1706094865295},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/CDM/2.png","hash":"7e63a4151dc6c4e94cf281abe73dcdd544fe67e1","modified":1706269099314},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"f29a0e16cd24856c5dcc2730f3562367f4c4e82a","modified":1697889450432},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1690258400333},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1690258400333},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1690258400287},{"_id":"themes/yilia/source/img/0.png","hash":"18cd3f368afc326152fddaf38353d0a3a5b88cce","modified":1661821028108},{"_id":"themes/yilia/source/img/hexo/5.png","hash":"795caa1da3dd3b5194ca066cc4a3dc684ae5c4a7","modified":1661783564220},{"_id":"themes/yilia/source/img/linux/commend/4.png","hash":"312407c7570bf5d0226a98c51f1e400f9e426418","modified":1672894004665},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/4.png","hash":"cd2d22e47a4ccf7d698aa886967d484994fe68c7","modified":1691217715248},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/1.png","hash":"18f61385a1aa2a42b57ed9fd4eb058988038bc79","modified":1702800985856},{"_id":"themes/yilia/source/img/experience/pycharm/link_server/6.png","hash":"8e2eb0e6a096b258aa6d87f122a6901cadc81c22","modified":1702801338326},{"_id":"themes/yilia/source/img/experience/vscode/relative_path/2.png","hash":"6845b7d833c89764ce7e87a437079bc76022ad43","modified":1661864909823},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/5.png","hash":"fe826175ce8041af3cd87afada1a66204a489e4e","modified":1702358837390},{"_id":"themes/yilia/source/img/experience/app/lrc_to_smi/3.png","hash":"a1fce07f832cae4b3b251dde1c87376f4386ad2c","modified":1702358281362},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SRDiff/3.png","hash":"12aefac57158ded661913fee37c1348baeb1fb5f","modified":1706339037074},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/2.png","hash":"c62663719646ff08f57958e388c64cadf00bec40","modified":1705998220007},{"_id":"themes/yilia/source/img/hexo/config/1.png","hash":"57c220f0666493e9aa46e655dd3e4c8d8769526f","modified":1706626629440},{"_id":"themes/yilia/source/img/linux/install/3.png","hash":"aff317a4f01469d43aea727220d5f35dda5ad82f","modified":1672554935824},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/3.png","hash":"1be61897417af386bdaab09257f60b624fa4b7a7","modified":1691384095099},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SRDiff/1.png","hash":"8859dd1b37ba832fcf39bea466172166a4872ca1","modified":1706331071359},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/3.png","hash":"ad4657eb56551df2f18233832075681a371be953","modified":1705998561333},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/5.png","hash":"05264fcc3adc2b358081b88c0f8cbb3a3ac7bce9","modified":1705999852098},{"_id":"themes/yilia/source/img/head.png","hash":"c695336ba203c92400d8801be883217f516ccfa9","modified":1689933128876},{"_id":"themes/yilia/source/img/datastruct/4_string/22.png","hash":"69fc98bbd8b19f77b749ff2aac2fc1d84da041fc","modified":1691550343135},{"_id":"themes/yilia/source/img/datastruct/4_string/7.png","hash":"5045a59070a4dc3abf0b75adc7ea361e417a9ac6","modified":1691503180357},{"_id":"themes/yilia/source/img/datastruct/4_string/6.png","hash":"02c58cbb86448ab130e8de56a8ed30190a270441","modified":1691502055706},{"_id":"themes/yilia/source/img/linux/commend/7.png","hash":"b5334dff05fddfb776b67cfa62e1bde08ad5a7d1","modified":1672894983674},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/5.png","hash":"53bae744eb1d75032b76b2a34393b483c507d45d","modified":1691590471263},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/身份证1.jpg","hash":"f4ad46fab9a1874986ccd963cb4f4d8a8602554c","modified":1691897167185},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/11.png","hash":"d1c328c62f3a3894356be5017e148cf82228ccb3","modified":1706096480418},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/2.png","hash":"4949684eeb63cf7260e919617454a2d551b3f64d","modified":1706094334407},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/CDM/1.png","hash":"d0284a0aa9cfc0bb236b9b2d21da006c12aeba82","modified":1706268247587},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/CDM/3.png","hash":"f1489a76081146c43436f33662b8fb24dd93705b","modified":1706330569143},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/6.png","hash":"13827355692c474261b3db2cd451e6704ac78953","modified":1706000581563},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/7.png","hash":"e6e1d6e4486b4a67ccf1de20a0c3fcd7e12fc168","modified":1706008471089},{"_id":"themes/yilia/source/img/datastruct/4_string/11.png","hash":"16f3b25aabe8fabac62e4dee790ebd76f9f5cd7b","modified":1691505320863},{"_id":"themes/yilia/source/img/datastruct/4_string/33.png","hash":"51078f091563b3fc4126d3a1ff3e46adb6dbf1dd","modified":1691551707442},{"_id":"themes/yilia/source/img/datastruct/4_string/9.png","hash":"89fb11a7191f94bd33c84aad1f97b63e15def4e5","modified":1691505233957},{"_id":"themes/yilia/source/img/linux/commend/5.png","hash":"9877ec4411499460626515956172ac17c0461194","modified":1672894495658},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/6.png","hash":"37e2c7e31f6b34a0c678c3241da2028ea694b61a","modified":1691304383828},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/5.png","hash":"c3b59117bc61e06960711487d2c9faae1d8490af","modified":1691228570021},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/4.png","hash":"ccf102d7ac6a969e1bdcd81001538a5e14bc0685","modified":1691420162004},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/2.png","hash":"cfd647157788822a1ee87152474331d6b72983c1","modified":1691556786300},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/3.png","hash":"bb65dc7f7d243290cdfc39e6ad91d29a44a5a978","modified":1691556831286},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/1.png","hash":"f518bf1aa4309d3129066c1f7a4de9d0126bfc64","modified":1691759834419},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/身份证2.jpg","hash":"c7248cff105487f06b45d89d6b51e972489f667a","modified":1691897146994},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/4.png","hash":"d5be991310455fd4f492c541ef0b327914c7c15b","modified":1705999226659},{"_id":"themes/yilia/source/img/datastruct/1_extract/1.png","hash":"f62dbc992f719d4edde6745400129010f2df805f","modified":1690602999185},{"_id":"themes/yilia/source/img/datastruct/1_extract/5.png","hash":"f8bc031e79eea55114892711cede3ef873029495","modified":1690684253517},{"_id":"themes/yilia/source/img/datastruct/1_extract/6.png","hash":"58eecabd401a7bb5dab4706e4a65b0ad3ab55d3e","modified":1690688739273},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/4.png","hash":"b0f7022db8b8bdf2dfd25b3be51b483c35c86632","modified":1690708324052},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/7.png","hash":"303a2e13032a6ab2b2e45c50c1e3666232dc39ef","modified":1691498549869},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/1.png","hash":"c188269b5cbcbb8fbc67391b7be94cfea7ca8ecb","modified":1691420396781},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/6.png","hash":"dc6fafa3d3c1dac6a0df6a46537738fb955991bc","modified":1691564823431},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/7.png","hash":"a4960ce0bb113834995b83f1e72a5f1d59b5b580","modified":1691564859427},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/1.png","hash":"f1791e355115d078e7858dcb207f8e87bbd736d6","modified":1691591913410},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/2.png","hash":"33126a20ebac6b4dd33fda2b1337f0132e432f28","modified":1691592072637},{"_id":"themes/yilia/source/img/datastruct/5_tree/tree/2.png","hash":"c36f61b2f331b4794bb7affb5653a3c70b6bf7eb","modified":1691556321740},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/2.png","hash":"3a0427868ede3bc4fbd980e1eb44d1ddcf8ba662","modified":1691759872116},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/4.png","hash":"42244dfc16a8545eb1d6f29cbefa1d7b10b8908f","modified":1693034802616},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/2.png","hash":"7e507b8326c93a6720e559066f42886e7a8255e9","modified":1691746322625},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/3.png","hash":"273b817773cfca2cefedf37e00beffce3aac979d","modified":1691746400702},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/8.png","hash":"090cb62b2d7077ec1bddd563b06245be0a144a7e","modified":1706096218818},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/1.png","hash":"103d09498654fe7acde2c2bd20371fe75cba9456","modified":1705995313277},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/11.png","hash":"5f5dd2e2cdc0161d68f514f5f6fa92a17097cc15","modified":1706008853684},{"_id":"themes/yilia/source/img/datastruct/1_extract/8.png","hash":"f46809238bf064e700e57d6e341b568072b9c1ef","modified":1690688916784},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/2.png","hash":"8c9d5f586b67d8973d280205ad376279861d9fa3","modified":1690705661628},{"_id":"themes/yilia/source/img/datastruct/4_string/8.png","hash":"c6fff07a1454c9886d48afe21a3b2dcf4190090e","modified":1691503712680},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/1.png","hash":"400a7006ed7e701ecf338868d027fa9d4fc09aa4","modified":1691311294470},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/9.png","hash":"483683c7cd2491fcaab026f2501fb097a99e5af2","modified":1691498712107},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/1.png","hash":"0355d11dc2d67894016a00819bb2f9fa048e3456","modified":1691467561263},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/3.png","hash":"7389121d9a2981d2f7a913f27ceb495c9b3e3f85","modified":1691465700780},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/5.png","hash":"1d3549ac63517ed5a5fdb36c60ec68570530c6ee","modified":1691466497758},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/1.png","hash":"320bb1490c7237abc6cfa31f75d80a2ff667d10e","modified":1691412904112},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/3.png","hash":"bbfeff2baa2a09d1cfde6efd8ced65950969d451","modified":1691419743434},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/1.png","hash":"f2ab94acf03f8427536230e7e4492f6286a8863b","modified":1691556489183},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/5.png","hash":"0ef37d1a33ac8f7adfc64f2df93ddc46db02a255","modified":1691760417873},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/5.png","hash":"2ac3fdffca3ece0b482b346dc80124c9b1a9b293","modified":1693034837983},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/10.png","hash":"f8f49b35a8464be6d441c4d1c9d89eacd46c99d0","modified":1691743303424},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/17.png","hash":"96a3732857d13b320d44a5d2bba58b24e63eb2c3","modified":1691743889302},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/21.png","hash":"96cd917e4e00ec460d56bf1497a6ecf875ac2412","modified":1691744568147},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/4.png","hash":"f198322bd8b57e7f7730ad78a1502b72d34af28b","modified":1691756652403},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/4.png","hash":"4bd74ef02a7ce777be6d6be132b809eadd333795","modified":1691746532552},{"_id":"themes/yilia/source/img/datastruct/7_search/red/1.png","hash":"24ed2aaf9c398cf0bd548949cc530a82f26bbe3b","modified":1693036044722},{"_id":"themes/yilia/source/img/datastruct/7_search/red/5.png","hash":"91fa356e862977aedcd8380883ebba68ce55ff51","modified":1693039095844},{"_id":"themes/yilia/source/img/datastruct/7_search/search/1.png","hash":"abcd55aa8269afb2ec7d383f5bc03379182b18e3","modified":1691764394502},{"_id":"themes/yilia/source/img/datastruct/7_search/search/8.png","hash":"b86ec6b6a477e655a484cb62d2a8372e71bbf398","modified":1691764991881},{"_id":"themes/yilia/source/img/datastruct/1_extract/7.png","hash":"719ea9a0ff7bdeb47bb6068bacaf8799080544bd","modified":1690688753401},{"_id":"themes/yilia/source/img/datastruct/1_extract/9.png","hash":"352ebd7320c0daf59164cc606c54748d4461364c","modified":1690688988499},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/1.png","hash":"f3127e2c823a2115d3eee9c9186e66775f7c8c56","modified":1690689329458},{"_id":"themes/yilia/source/img/datastruct/4_string/3.png","hash":"0263d9a7b8552db5293da17683a78fc6b18add52","modified":1691499407217},{"_id":"themes/yilia/source/img/datastruct/4_string/5.png","hash":"48c8a60a2eade60271df902361219dc60182b147","modified":1691499684778},{"_id":"themes/yilia/source/img/linux/commend/6.png","hash":"1ad966f50410b760b5c4da236b00fa3c87d6e794","modified":1672894794061},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/1.png","hash":"93d909b592f79bb93cb05e461f1cfe5b19975588","modified":1691217017748},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/8.png","hash":"a14b20161150d5ec27c26a8769d2fbc63882cc02","modified":1691498617510},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/3.png","hash":"d4697e7aa4faf3faaec31795d056369aee9a0747","modified":1691477782460},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/11.png","hash":"d6da827299c4424e820f13b641b8cf1d7dcc8647","modified":1691573880053},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/14.png","hash":"e09f44ccfd173d7e22a664ba1da0496578fe71fa","modified":1691573669468},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/16.png","hash":"ea7d466a5c4df3dab2b7d5fd1db34983ad20bcc9","modified":1691573739880},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/21.png","hash":"01cce10b1c97bfe85564457670c02523f9e22bbf","modified":1691586981364},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/4.png","hash":"a1a7f2f52dea3bb78b7e610b99cd46c8eb638324","modified":1691561708831},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/9.png","hash":"617b5e71fbb4b6cbde53988e84b7db14227521aa","modified":1691565503866},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/2.png","hash":"4b489a3880d5c72496e6bb3e9a0fb1867c72a61e","modified":1691591243003},{"_id":"themes/yilia/source/img/datastruct/5_tree/tree/3.png","hash":"5c23b6d576d9ab930ff7bed0ef93f7286fece156","modified":1691556359280},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/8.png","hash":"fa5bb9c206f9d820b4829b82a815acfe9535f698","modified":1691590739780},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/10.png","hash":"367b5db4a5df4056bc852b4d15d90569f16d47ad","modified":1691762989848},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/11.png","hash":"2c57ffd92b97d2c5cb9cd6e86d45ba7a7c3ef152","modified":1691763100420},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/13.png","hash":"f82c00b83d4707743244ced4344eb173088f6537","modified":1691763299482},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/12.png","hash":"2c57ffd92b97d2c5cb9cd6e86d45ba7a7c3ef152","modified":1691763259051},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/7.png","hash":"1640ed8edab3a2235f8d1890dd911df427202d5b","modified":1691760901602},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/9.png","hash":"1c087e833e9d95f77fdfc1c5393872f67b161620","modified":1691762393639},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/12.png","hash":"f5f8a7f60d80bdea3901f24d757d71f354b21076","modified":1691743739055},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/11.png","hash":"3b8f079b47feb4ead637c8e8799668081da3b3c7","modified":1691743725482},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/13.png","hash":"1a0b6b8999306d37bb4e5e021dcd2860fb91003a","modified":1691743782462},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/14.png","hash":"ad20949a8476a1eab20b23a627f5d1c2c5245b72","modified":1691743791966},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/16.png","hash":"8accfd8baed48f5129fd22bc026b3baeea3f53dc","modified":1691743869442},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/19.png","hash":"3b6cc333c977fabc8759d19010d40eadfec4e126","modified":1691744359775},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/1.png","hash":"4f739f585dcd7d2fadc90c2ec487d810e50b12b5","modified":1691747129640},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/12.png","hash":"8af073f178b71de473f6779005b693b6fe931e35","modified":1691757741065},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/5.png","hash":"ccabac77b9f87025d39cb178c736ab08be966a53","modified":1691757014920},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/9.png","hash":"6cdb024dea1b8f80280a985b970deb30f92229dc","modified":1691757054076},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/10.png","hash":"8f1df1e8b36321baa8454a6e408fc3132f3a0b49","modified":1691746859035},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/5.png","hash":"c31e028791baa33832977eba8885d7c2fa495f5a","modified":1691746557384},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/8.png","hash":"ad9e53a5806f86ec4f2e076279d81ba1faf82b80","modified":1691746765810},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/9.png","hash":"9af35488623060bb152e66796eed3d11de500b69","modified":1691746775997},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/2.png","hash":"11152e9108147bf5ddaf92da0a6ae3b40310f0f3","modified":1691765426369},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/4.png","hash":"4ce88adb5b069d4d0f3e019c8baaff3daf93577d","modified":1691765563689},{"_id":"themes/yilia/source/img/datastruct/7_search/search/2.png","hash":"ee0dcdd98d36ebf968203e086842f82983833393","modified":1691764532822},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/1.png","hash":"9645f93ecfba9f5b9206fde1c0aa73917896f582","modified":1706093510193},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/5.png","hash":"a743c446dfcf9b937205f58dc028f41d070e48b5","modified":1706094671973},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/3.png","hash":"5a8a80187065f83608b3d27cf134ca2b1345ea50","modified":1690708244606},{"_id":"themes/yilia/source/img/datastruct/4_string/2.png","hash":"fc16f97df3cd583499ebfdc08a17a59d584f5dbe","modified":1691499178548},{"_id":"themes/yilia/source/img/linux/user/8.png","hash":"0b8417b51075ac859bcf37582f6ca9cdc6d1ed9e","modified":1672921178317},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/linklist/2.png","hash":"e9347e1f225c5cbb9c549e8dfb9f5bec9b0aeb0c","modified":1691222122560},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/5.png","hash":"2fd148d973e964c5a66a6677e08c8d40bb4086a7","modified":1691412524458},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/1.png","hash":"4232903681e5acd2874ed02adbb613f650cbd3a4","modified":1691485812683},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/2.png","hash":"e5f12710a7ee824a071f4b667c21c6adcacf57f8","modified":1691487476795},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/4.png","hash":"52cfb649fee62c2d0248b8a19634016a6e7dfeb0","modified":1691487901540},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/4.png","hash":"a3e580c7a52b96615056d54e0901e927210ec6bd","modified":1691482513563},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/2.png","hash":"372e33824e44870739b0b2dd31473891d8be39d5","modified":1691421821662},{"_id":"themes/yilia/source/img/datastruct/3_stack/queue/4.png","hash":"ccc7388fe9d234b85dfaf0f13df2011fdd448cc9","modified":1691466312459},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/13.png","hash":"5c51b87683faf0b42ff105b4b509847ce28f033c","modified":1691573506131},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/12.png","hash":"7b9ec3a8aeea46a650d5f324f6bcd450d7c6f1ce","modified":1691573450339},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/15.png","hash":"642ac58ff76d07fdb5f34aa690c5d9198947b50b","modified":1691573704026},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/19.png","hash":"4850932f1aa82436d5d483bf8c65762911e63d5d","modified":1691575204498},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/20.png","hash":"e3ccd07772d3937fe059f7030cb5637d07272705","modified":1691575240008},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/5.png","hash":"5606a7bf100e9f72e25622c5364701c62e995057","modified":1691561772170},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/1.png","hash":"c93b19d02e8eecbcd748e4e7d0b212fdb258e3d2","modified":1691591181645},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/3.png","hash":"2656e0c353bab48a03f657aff960e69d4ccf488e","modified":1691592192803},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/4.png","hash":"60b7cd6266dd054a37d619083c49e76d936471e7","modified":1691592496783},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/1.png","hash":"5f3d151b0ef530ec331a88871f4c790ad1e7de76","modified":1691589073455},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/3.png","hash":"554d3cbfb2d7a8276695dfab55b6fa00d6b41e29","modified":1691589958934},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/4.png","hash":"0ed7fed4738e93c716e7d8947eb29ec60bbcb3b3","modified":1691590339553},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/7.png","hash":"b0407aed45fdf2778c37aeb86e16f0d76246bd1b","modified":1691590661218},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/3.png","hash":"8736726d7645894dc84807c3e9ce0e54fa76c717","modified":1693034747447},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/18.png","hash":"23ab682c9b0e7ed5a5372d575801e89b1735a9c8","modified":1691743941833},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/2.png","hash":"30c586539ef983e91f127a9d117be4334832c7b4","modified":1691734075098},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/22.png","hash":"6db8e47e30d615832eebb062a162791b7c310fd4","modified":1691744785301},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/25.png","hash":"04097ccd7e31337fc15b0b4e6590f0e46ed5e92c","modified":1691745493311},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/26.png","hash":"186dae57f64593ba80a9484c2b1746c1f8d29999","modified":1691745783999},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/4.png","hash":"7a3bb1906f0ad5afccbed87ff851e3819cbafc36","modified":1691734224044},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/6.png","hash":"5617cd959a09a2687fe2cb9a32abfdf070d389fa","modified":1691734588767},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/8.png","hash":"177c49dc3942bb19e887c89c2e795bc944d2994c","modified":1691735103874},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/11.png","hash":"ddf8ab48eb171c8ef1e1f0114616ad849ddfb034","modified":1691757712933},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/13.png","hash":"f09b3c157a8364de40821317b2677a175b3f4dc6","modified":1691757797077},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/2.png","hash":"bfe530abb9fac2ea1b2eb295a832de6b1f725218","modified":1691756495914},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/6.png","hash":"707dbf184c801ed3e8a6f0c333ab4797dda2b238","modified":1691757023476},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/8.png","hash":"4320444060e2fa35d0b0e4dc8f33a03cec5bea7d","modified":1691757043016},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/7.png","hash":"daf3d4a4a195019ed2629e892f3fd8e2aee5978c","modified":1691757032146},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/6.png","hash":"f70727738f1d45d51a0b5ace85e38f9ef4fbefbc","modified":1691746574409},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/1.png","hash":"55a425118fb566256fc2dcb7267670c2e0c8b6be","modified":1691765227262},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/7.png","hash":"430730c045a26ff7a2671b3bf42b81d36e288ec3","modified":1691746756084},{"_id":"themes/yilia/source/img/datastruct/7_search/red/3.png","hash":"e07c568186d1ff720b927af647502bf84095c922","modified":1693036644495},{"_id":"themes/yilia/source/img/datastruct/7_search/search/3.png","hash":"b167c48347e3f40f71169249aa9e57149f456030","modified":1691764704613},{"_id":"themes/yilia/source/img/datastruct/7_search/search/6.png","hash":"ec0afe78ba75251e35923d39189ae047b28b0898","modified":1691764882087},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SRDiff/2.png","hash":"bc499602dd3514cfa3e48a170a0254f98de118a9","modified":1706338981638},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/7.png","hash":"b0c033daaece2d1342f4017cd64850e19e1973ea","modified":1706094875609},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/12.png","hash":"35982c423def1509d333ab9842840239de01b7d2","modified":1706008939838},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/9.png","hash":"2d2e66a07ec289a15511a707862c44c0fa9b9c6e","modified":1706008781907},{"_id":"themes/yilia/source/img/datastruct/4_string/1.png","hash":"dd8f568d408f4066857dcaf5f837b76ff72681ea","modified":1691498978232},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/2.png","hash":"ca655c8903c294c2561adf00e03115d85daac0d3","modified":1691383605503},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/4.png","hash":"7f6f39075bd9d99fc80bed11a9572929861608fe","modified":1691384213543},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/3.png","hash":"de128228b37c7f67472db3f69319469c15577bb1","modified":1691487846644},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/5.png","hash":"ddc34b510edf878733390cf6280c17e24430ca44","modified":1691498193472},{"_id":"themes/yilia/source/img/datastruct/3_stack/matrix/6.png","hash":"5796e5f5deedd912d609d786b9bcdf81e5952265","modified":1691498424660},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/10.png","hash":"809602cc17c15b735981b02272c065543b829903","modified":1691573912441},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/18.png","hash":"0c53deb30a095262bace6fe55d49b9528d79932b","modified":1691575069273},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/8.png","hash":"da3f2d7eb809212e929a5124c89161424edb4b19","modified":1691565191904},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/4.png","hash":"6e0aa2e3cb77d483683e3d0d11cf91ed42a1b86f","modified":1691591459593},{"_id":"themes/yilia/source/img/datastruct/5_tree/tree/1.png","hash":"adf29d834bac15c3cbb5a59ffe8ad8beb0e84a37","modified":1691555053411},{"_id":"themes/yilia/source/img/datastruct/5_tree/set/5.png","hash":"28d6733723d49340995dec2fde9e88dd9f0adb05","modified":1691593008586},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/2.png","hash":"a3b2cc5ec1d3f6641c562ec91fd67158681d54fd","modified":1691589184598},{"_id":"themes/yilia/source/img/datastruct/5_tree/treesave/6.png","hash":"29ebb70f952f15f45953541376e244d40361dce0","modified":1691590617234},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/3.png","hash":"ab89866de5a90543cb94ba68f91772cbea6885c0","modified":1691759917325},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/7.png","hash":"8cdb063bca970837e89246b7c242aa8df4ef69ab","modified":1693035869074},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/20.png","hash":"e1ea39884791587ef05f620d70bea10cad4517ca","modified":1691744388175},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/7.png","hash":"17fe699b83593d7b5a5a63cf6f8e96850e5a0c78","modified":1691734656378},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/10.png","hash":"904d546f835be088ef8c6431fcba3099f29a89b6","modified":1691757619745},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/14.png","hash":"e5fe49cda495ad811654a44c5c4df75c58a26b15","modified":1691757816077},{"_id":"themes/yilia/source/img/datastruct/6_graph/shortestpath/3.png","hash":"4a56bcbe87473960ae402584e0da20c8c16cfee1","modified":1691756527686},{"_id":"themes/yilia/source/img/datastruct/7_search/red/4.png","hash":"1565be0433a56f3b59c04e9ac45580ed38c6e49e","modified":1693039041843},{"_id":"themes/yilia/source/img/datastruct/7_search/search/4.png","hash":"52e1734955fdec29f5967e9ee9474d2cddc98d86","modified":1691764731437},{"_id":"themes/yilia/source/img/datastruct/7_search/search/7.png","hash":"66712ddccabed87d61c763cac232635c37dfba4c","modified":1691764955669},{"_id":"themes/yilia/source/img/datastruct/4_string/4.png","hash":"7838d4d94535fa7a23ea70e174f18224109af7a3","modified":1691499621674},{"_id":"themes/yilia/source/img/datastruct/3_stack/stack/2.png","hash":"a908d6604057c26915ac3f6755cbb618fc315bac","modified":1691419128920},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/22.png","hash":"b42865762e3f79e13238c99d3fea6e9a34b48b7a","modified":1691588893459},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/2.png","hash":"62329d059d1524ccb694e74674724d123b1d1ccb","modified":1693034737641},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/6.png","hash":"81c02a6561ed5dfb1a5d2523c54f6f3d033c1828","modified":1693035044769},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/15.png","hash":"ddaa0073e7a050c6da2e15bb92edef4b263e71f8","modified":1691743828007},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/23.png","hash":"507a10492249735e4eff71110dccc08e32d75723","modified":1691745075647},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/5.png","hash":"e526a1db7825500f3915b81cff0b2a0649501224","modified":1691734323307},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/9.png","hash":"af0f3d264f6346953c00662e13262590c718288d","modified":1691742551640},{"_id":"themes/yilia/source/img/datastruct/6_graph/generatetree/1.png","hash":"a38f3f3818fb59ffa2e0c2f149baae5ad3e08906","modified":1691746022745},{"_id":"themes/yilia/source/img/datastruct/7_search/red/2.png","hash":"561a4f0a6d89e9dc5059fe6ad41fcf3ccb064c71","modified":1693036214634},{"_id":"themes/yilia/source/img/datastruct/2_linearlist/5.png","hash":"d4eecc47637ac57e721533941890b5db93c6cd96","modified":1690710397035},{"_id":"themes/yilia/source/img/datastruct/5_tree/bintree/17.png","hash":"7e9e417dd7e92cf4518e7478df7a61dc792b5c79","modified":1691574473511},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/6.png","hash":"160fc9cbaf10916bf63315abe80c023af57cb663","modified":1691760482169},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/8.png","hash":"6d7b99c9cfe359e941a1a0a9f733fd37ca979430","modified":1691761005967},{"_id":"themes/yilia/source/img/datastruct/7_search/AVL/1.png","hash":"1cba4a7760b4e3198c1d948e381a13e76b5522a5","modified":1693034311826},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/24.png","hash":"24195d899250ca557aa68f3c5b50872ebf724b25","modified":1691745314935},{"_id":"themes/yilia/source/img/datastruct/7_search/BST/3.png","hash":"9d522c4b3ed9fc8d4cad85e1d574895e0edf5ffd","modified":1691765512206},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/8.png","hash":"a057c763efb0ce8ad6ed81c7fcc687b8cfd61d64","modified":1706008706238},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/5.png","hash":"70eb4243c88e9cb6f9d64dc4b1ce0123f93d7b70","modified":1691483230497},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/1.png","hash":"3c95625309a2e2f7fddf78c14bc972a018c82916","modified":1691725714454},{"_id":"themes/yilia/source/img/datastruct/6_graph/graph/3.png","hash":"1c63775db55f4624289bc1ef592ed88d4c2258ab","modified":1691734140060},{"_id":"themes/yilia/source/img/datastruct/7_search/search/5.png","hash":"1be79056d4fb1d9c03850ce2161c2f2c22373751","modified":1691764808300},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/2.png","hash":"23650f4e8a06111ed5639cc0891fd7490c8eb7b7","modified":1691476660769},{"_id":"themes/yilia/source/img/datastruct/5_tree/hafmantree/3.png","hash":"20d3db5968e55586130cdf0fc98d5dcf77d79408","modified":1691591377972},{"_id":"themes/yilia/source/img/datastruct/6_graph/DAG/4.png","hash":"1aee5cdce7b83cbb17cc5c7c14ac9d0a02a787f8","modified":1691760000494},{"_id":"themes/yilia/source/img/datastruct/7_search/B/1.png","hash":"bba1aaa2fb53ede0dff30e60d86ac9c9e7ad3cc8","modified":1693039964839},{"_id":"themes/yilia/source/img/datastruct/3_stack/exam/6.png","hash":"721fc6eedb785c67120633ed94159a0d4ea49270","modified":1691484394221},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/13.png","hash":"75213541cc70afc1d1918c479ac78f8d56850e52","modified":1706009262701},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/SwinIR/10.png","hash":"88289ae9893a394b64ec2faf0759100abbf224a1","modified":1706009183949},{"_id":"themes/yilia/source/img/deeplearning/paper/SR/HAT/9.png","hash":"a43c143ea90005eb68c6b17343f20d5526e99d2e","modified":1706096356459},{"_id":"public/content.json","hash":"c61f5d71cd724fd5816f59ac212024acd37087a8","modified":1706797007240},{"_id":"public/tags/index.md","hash":"a9b6dfbb10c311720b9d8e66804f219f91f2bd19","modified":1706627923073},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1706627923073},{"_id":"public/categories/index.md","hash":"736c605a6585b78360deb7eaea3451f3e4b4eeac","modified":1706627923073},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1706627923073},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1706627923073},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1706627923073},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1706627923073},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1706627923073},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1706627923073},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1706627923073},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1706627923073},{"_id":"public/img/hexo/1.png","hash":"eb5d590c866b115b711b6b18e688d0fb750b0fbc","modified":1706627923073},{"_id":"public/img/hexo/3.png","hash":"1c144b98e4d21f31d06466142a48efaf2a94d5e2","modified":1706627923073},{"_id":"public/img/hexo/2.png","hash":"1a2488cab647b2d9ee0645f8b1404f20d8f6391b","modified":1706627923073},{"_id":"public/img/hexo/4.png","hash":"1386eb7152ca993db6bb1b73ec224640ed73ace1","modified":1706627923073},{"_id":"public/img/hexo/6.png","hash":"e48c5ecbd482f3d30befe212e0bdbb7edfc8e1ce","modified":1706627923073},{"_id":"public/img/hexo/7.png","hash":"e6b833a8a600ccde88c4204782cc3e8004e0edb2","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/2.png","hash":"6d1421cc038218e94daff7ef39c7d3ac9d2e881c","modified":1706627923073},{"_id":"public/img/hexo/8.png","hash":"2caad5ef038d9170ea58f0a0026bc8306280ec37","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/3.png","hash":"571cded10b5c4269a889e56dab07bc689818e102","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/4.png","hash":"743e8d48e403ebd444289b1668ec6512099c9bb5","modified":1706627923073},{"_id":"public/img/hexo/config/2.png","hash":"368052a20c17d974130d81cad86bf9eefbe696e6","modified":1706627923073},{"_id":"public/img/linux/install/1.png","hash":"f5e18416748c8cc86938da9ae1f1ff42e91e08bd","modified":1706627923073},{"_id":"public/img/linux/install/2.png","hash":"23d49dab591d627c6673fb2a75fd5d2eb9d2fed3","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/linklist/3.png","hash":"8f35efb483252f734fcce32a59701f95ae08ca08","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/10.png","hash":"39b9fd6684a084dab653c885553bdfb48e616d96","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/11.png","hash":"b6ebbcce0e705315d2b9d49cfe47a5b0c7d738ef","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/2.png","hash":"155e96cd73c2a354ba31581c3ae7990c35f1e77f","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/4.png","hash":"c2347bb419ce0b59e6a10bf13e67aabb6f1d6000","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/5.png","hash":"528b88149b3eab3ef15c7cd04f18cf14463a9f8e","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/3.png","hash":"d5c06088084abdd3d3f791266baf3e490353fa8e","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/7.png","hash":"8998704ce34bfa8d04b681a1b979c2ec712511df","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/8.png","hash":"faedba9e3148fa893311cd9ddf820ae269dcc09a","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/9.png","hash":"d38b41763eab121538504eba96a933f860d3fca0","modified":1706627923073},{"_id":"public/img/experience/vscode/relative_path/1.png","hash":"5bf68e898eaedce375a846d2766c9d3c5f2c21c6","modified":1706627923073},{"_id":"public/img/experience/app/lrc_to_smi/1.png","hash":"3e6bf1d0664a78945a62cb8efe7291c559bdd95f","modified":1706627923073},{"_id":"public/img/experience/app/lrc_to_smi/2.png","hash":"29999d449f335d959a928b47ee573094d6407e6f","modified":1706627923073},{"_id":"public/img/experience/app/lrc_to_smi/4.png","hash":"2739ef20646d80910f98405f596227832d73dca7","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/3.png","hash":"8557ef65ec097d18405fe25075ce508a569cdf3c","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/4.png","hash":"bd2061a683d43542f298d3b6c369a7a73e940802","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/6.png","hash":"f626d8e52052327ea89c2ef3f164331a2c5813e6","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/CDM/2.png","hash":"7e63a4151dc6c4e94cf281abe73dcdd544fe67e1","modified":1706627923073},{"_id":"public/img/0.png","hash":"18cd3f368afc326152fddaf38353d0a3a5b88cce","modified":1706627923073},{"_id":"public/img/hexo/5.png","hash":"795caa1da3dd3b5194ca066cc4a3dc684ae5c4a7","modified":1706627923073},{"_id":"public/img/linux/commend/4.png","hash":"312407c7570bf5d0226a98c51f1e400f9e426418","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/linklist/4.png","hash":"cd2d22e47a4ccf7d698aa886967d484994fe68c7","modified":1706627923073},{"_id":"public/main.0cf68a.css","hash":"966b4239e7905d5fee7a5b11e7f322bd1f6649f1","modified":1706627923073},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1706627923073},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1706627923073},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/1.png","hash":"18f61385a1aa2a42b57ed9fd4eb058988038bc79","modified":1706627923073},{"_id":"public/img/experience/pycharm/link_server/6.png","hash":"8e2eb0e6a096b258aa6d87f122a6901cadc81c22","modified":1706627923073},{"_id":"public/img/experience/vscode/relative_path/2.png","hash":"6845b7d833c89764ce7e87a437079bc76022ad43","modified":1706627923073},{"_id":"public/img/experience/app/lrc_to_smi/3.png","hash":"a1fce07f832cae4b3b251dde1c87376f4386ad2c","modified":1706627923073},{"_id":"public/img/experience/app/lrc_to_smi/5.png","hash":"fe826175ce8041af3cd87afada1a66204a489e4e","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SRDiff/3.png","hash":"12aefac57158ded661913fee37c1348baeb1fb5f","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/2.png","hash":"c62663719646ff08f57958e388c64cadf00bec40","modified":1706627923073},{"_id":"public/img/hexo/config/1.png","hash":"57c220f0666493e9aa46e655dd3e4c8d8769526f","modified":1706627923073},{"_id":"public/img/linux/install/3.png","hash":"aff317a4f01469d43aea727220d5f35dda5ad82f","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/doublelinklist/3.png","hash":"1be61897417af386bdaab09257f60b624fa4b7a7","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SRDiff/1.png","hash":"8859dd1b37ba832fcf39bea466172166a4872ca1","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/3.png","hash":"ad4657eb56551df2f18233832075681a371be953","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/5.png","hash":"05264fcc3adc2b358081b88c0f8cbb3a3ac7bce9","modified":1706627923073},{"_id":"public/img/head.png","hash":"c695336ba203c92400d8801be883217f516ccfa9","modified":1706627923073},{"_id":"public/img/datastruct/4_string/22.png","hash":"69fc98bbd8b19f77b749ff2aac2fc1d84da041fc","modified":1706627923073},{"_id":"public/img/datastruct/4_string/6.png","hash":"02c58cbb86448ab130e8de56a8ed30190a270441","modified":1706627923073},{"_id":"public/img/datastruct/4_string/7.png","hash":"5045a59070a4dc3abf0b75adc7ea361e417a9ac6","modified":1706627923073},{"_id":"public/img/linux/commend/7.png","hash":"b5334dff05fddfb776b67cfa62e1bde08ad5a7d1","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/5.png","hash":"53bae744eb1d75032b76b2a34393b483c507d45d","modified":1706627923073},{"_id":"public/img/datastruct/7_search/BST/身份证1.jpg","hash":"f4ad46fab9a1874986ccd963cb4f4d8a8602554c","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/11.png","hash":"d1c328c62f3a3894356be5017e148cf82228ccb3","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/2.png","hash":"4949684eeb63cf7260e919617454a2d551b3f64d","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/CDM/1.png","hash":"d0284a0aa9cfc0bb236b9b2d21da006c12aeba82","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/CDM/3.png","hash":"f1489a76081146c43436f33662b8fb24dd93705b","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/6.png","hash":"13827355692c474261b3db2cd451e6704ac78953","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/7.png","hash":"e6e1d6e4486b4a67ccf1de20a0c3fcd7e12fc168","modified":1706627923073},{"_id":"public/img/datastruct/4_string/11.png","hash":"16f3b25aabe8fabac62e4dee790ebd76f9f5cd7b","modified":1706627923073},{"_id":"public/img/datastruct/4_string/33.png","hash":"51078f091563b3fc4126d3a1ff3e46adb6dbf1dd","modified":1706627923073},{"_id":"public/img/datastruct/4_string/9.png","hash":"89fb11a7191f94bd33c84aad1f97b63e15def4e5","modified":1706627923073},{"_id":"public/img/linux/commend/5.png","hash":"9877ec4411499460626515956172ac17c0461194","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/linklist/5.png","hash":"c3b59117bc61e06960711487d2c9faae1d8490af","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/linklist/6.png","hash":"37e2c7e31f6b34a0c678c3241da2028ea694b61a","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/stack/4.png","hash":"ccf102d7ac6a969e1bdcd81001538a5e14bc0685","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/2.png","hash":"cfd647157788822a1ee87152474331d6b72983c1","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/3.png","hash":"bb65dc7f7d243290cdfc39e6ad91d29a44a5a978","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/1.png","hash":"f518bf1aa4309d3129066c1f7a4de9d0126bfc64","modified":1706627923073},{"_id":"public/img/datastruct/7_search/BST/身份证2.jpg","hash":"c7248cff105487f06b45d89d6b51e972489f667a","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/4.png","hash":"d5be991310455fd4f492c541ef0b327914c7c15b","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/1.png","hash":"f62dbc992f719d4edde6745400129010f2df805f","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/5.png","hash":"f8bc031e79eea55114892711cede3ef873029495","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/6.png","hash":"58eecabd401a7bb5dab4706e4a65b0ad3ab55d3e","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/4.png","hash":"b0f7022db8b8bdf2dfd25b3be51b483c35c86632","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/7.png","hash":"303a2e13032a6ab2b2e45c50c1e3666232dc39ef","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/queue/1.png","hash":"c188269b5cbcbb8fbc67391b7be94cfea7ca8ecb","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/6.png","hash":"dc6fafa3d3c1dac6a0df6a46537738fb955991bc","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/7.png","hash":"a4960ce0bb113834995b83f1e72a5f1d59b5b580","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/set/1.png","hash":"f1791e355115d078e7858dcb207f8e87bbd736d6","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/set/2.png","hash":"33126a20ebac6b4dd33fda2b1337f0132e432f28","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/tree/2.png","hash":"c36f61b2f331b4794bb7affb5653a3c70b6bf7eb","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/2.png","hash":"3a0427868ede3bc4fbd980e1eb44d1ddcf8ba662","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/4.png","hash":"42244dfc16a8545eb1d6f29cbefa1d7b10b8908f","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/3.png","hash":"273b817773cfca2cefedf37e00beffce3aac979d","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/2.png","hash":"7e507b8326c93a6720e559066f42886e7a8255e9","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/8.png","hash":"090cb62b2d7077ec1bddd563b06245be0a144a7e","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/1.png","hash":"103d09498654fe7acde2c2bd20371fe75cba9456","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/11.png","hash":"5f5dd2e2cdc0161d68f514f5f6fa92a17097cc15","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/2.png","hash":"8c9d5f586b67d8973d280205ad376279861d9fa3","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/8.png","hash":"f46809238bf064e700e57d6e341b568072b9c1ef","modified":1706627923073},{"_id":"public/img/datastruct/4_string/8.png","hash":"c6fff07a1454c9886d48afe21a3b2dcf4190090e","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/doublelinklist/1.png","hash":"400a7006ed7e701ecf338868d027fa9d4fc09aa4","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/9.png","hash":"483683c7cd2491fcaab026f2501fb097a99e5af2","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/exam/1.png","hash":"0355d11dc2d67894016a00819bb2f9fa048e3456","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/queue/3.png","hash":"7389121d9a2981d2f7a913f27ceb495c9b3e3f85","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/queue/5.png","hash":"1d3549ac63517ed5a5fdb36c60ec68570530c6ee","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/stack/1.png","hash":"320bb1490c7237abc6cfa31f75d80a2ff667d10e","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/stack/3.png","hash":"bbfeff2baa2a09d1cfde6efd8ced65950969d451","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/1.png","hash":"f2ab94acf03f8427536230e7e4492f6286a8863b","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/5.png","hash":"0ef37d1a33ac8f7adfc64f2df93ddc46db02a255","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/5.png","hash":"2ac3fdffca3ece0b482b346dc80124c9b1a9b293","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/10.png","hash":"f8f49b35a8464be6d441c4d1c9d89eacd46c99d0","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/17.png","hash":"96a3732857d13b320d44a5d2bba58b24e63eb2c3","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/21.png","hash":"96cd917e4e00ec460d56bf1497a6ecf875ac2412","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/4.png","hash":"f198322bd8b57e7f7730ad78a1502b72d34af28b","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/4.png","hash":"4bd74ef02a7ce777be6d6be132b809eadd333795","modified":1706627923073},{"_id":"public/img/datastruct/7_search/red/1.png","hash":"24ed2aaf9c398cf0bd548949cc530a82f26bbe3b","modified":1706627923073},{"_id":"public/img/datastruct/7_search/red/5.png","hash":"91fa356e862977aedcd8380883ebba68ce55ff51","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/1.png","hash":"abcd55aa8269afb2ec7d383f5bc03379182b18e3","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/8.png","hash":"b86ec6b6a477e655a484cb62d2a8372e71bbf398","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/7.png","hash":"719ea9a0ff7bdeb47bb6068bacaf8799080544bd","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/1.png","hash":"f3127e2c823a2115d3eee9c9186e66775f7c8c56","modified":1706627923073},{"_id":"public/img/datastruct/1_extract/9.png","hash":"352ebd7320c0daf59164cc606c54748d4461364c","modified":1706627923073},{"_id":"public/img/datastruct/4_string/3.png","hash":"0263d9a7b8552db5293da17683a78fc6b18add52","modified":1706627923073},{"_id":"public/img/datastruct/4_string/5.png","hash":"48c8a60a2eade60271df902361219dc60182b147","modified":1706627923073},{"_id":"public/img/linux/commend/6.png","hash":"1ad966f50410b760b5c4da236b00fa3c87d6e794","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/linklist/1.png","hash":"93d909b592f79bb93cb05e461f1cfe5b19975588","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/8.png","hash":"a14b20161150d5ec27c26a8769d2fbc63882cc02","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/exam/3.png","hash":"d4697e7aa4faf3faaec31795d056369aee9a0747","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/11.png","hash":"d6da827299c4424e820f13b641b8cf1d7dcc8647","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/14.png","hash":"e09f44ccfd173d7e22a664ba1da0496578fe71fa","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/16.png","hash":"ea7d466a5c4df3dab2b7d5fd1db34983ad20bcc9","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/21.png","hash":"01cce10b1c97bfe85564457670c02523f9e22bbf","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/4.png","hash":"a1a7f2f52dea3bb78b7e610b99cd46c8eb638324","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/hafmantree/2.png","hash":"4b489a3880d5c72496e6bb3e9a0fb1867c72a61e","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/9.png","hash":"617b5e71fbb4b6cbde53988e84b7db14227521aa","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/tree/3.png","hash":"5c23b6d576d9ab930ff7bed0ef93f7286fece156","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/10.png","hash":"367b5db4a5df4056bc852b4d15d90569f16d47ad","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/8.png","hash":"fa5bb9c206f9d820b4829b82a815acfe9535f698","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/11.png","hash":"2c57ffd92b97d2c5cb9cd6e86d45ba7a7c3ef152","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/12.png","hash":"2c57ffd92b97d2c5cb9cd6e86d45ba7a7c3ef152","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/13.png","hash":"f82c00b83d4707743244ced4344eb173088f6537","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/7.png","hash":"1640ed8edab3a2235f8d1890dd911df427202d5b","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/9.png","hash":"1c087e833e9d95f77fdfc1c5393872f67b161620","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/12.png","hash":"f5f8a7f60d80bdea3901f24d757d71f354b21076","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/11.png","hash":"3b8f079b47feb4ead637c8e8799668081da3b3c7","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/13.png","hash":"1a0b6b8999306d37bb4e5e021dcd2860fb91003a","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/14.png","hash":"ad20949a8476a1eab20b23a627f5d1c2c5245b72","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/16.png","hash":"8accfd8baed48f5129fd22bc026b3baeea3f53dc","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/19.png","hash":"3b6cc333c977fabc8759d19010d40eadfec4e126","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/1.png","hash":"4f739f585dcd7d2fadc90c2ec487d810e50b12b5","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/12.png","hash":"8af073f178b71de473f6779005b693b6fe931e35","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/5.png","hash":"ccabac77b9f87025d39cb178c736ab08be966a53","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/9.png","hash":"6cdb024dea1b8f80280a985b970deb30f92229dc","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/10.png","hash":"8f1df1e8b36321baa8454a6e408fc3132f3a0b49","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/5.png","hash":"c31e028791baa33832977eba8885d7c2fa495f5a","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/8.png","hash":"ad9e53a5806f86ec4f2e076279d81ba1faf82b80","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/9.png","hash":"9af35488623060bb152e66796eed3d11de500b69","modified":1706627923073},{"_id":"public/img/datastruct/7_search/BST/2.png","hash":"11152e9108147bf5ddaf92da0a6ae3b40310f0f3","modified":1706627923073},{"_id":"public/img/datastruct/7_search/BST/4.png","hash":"4ce88adb5b069d4d0f3e019c8baaff3daf93577d","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/2.png","hash":"ee0dcdd98d36ebf968203e086842f82983833393","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/1.png","hash":"9645f93ecfba9f5b9206fde1c0aa73917896f582","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/5.png","hash":"a743c446dfcf9b937205f58dc028f41d070e48b5","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/3.png","hash":"5a8a80187065f83608b3d27cf134ca2b1345ea50","modified":1706627923073},{"_id":"public/img/datastruct/4_string/2.png","hash":"fc16f97df3cd583499ebfdc08a17a59d584f5dbe","modified":1706627923073},{"_id":"public/img/linux/user/8.png","hash":"0b8417b51075ac859bcf37582f6ca9cdc6d1ed9e","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/linklist/2.png","hash":"e9347e1f225c5cbb9c549e8dfb9f5bec9b0aeb0c","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/doublelinklist/5.png","hash":"2fd148d973e964c5a66a6677e08c8d40bb4086a7","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/1.png","hash":"4232903681e5acd2874ed02adbb613f650cbd3a4","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/2.png","hash":"e5f12710a7ee824a071f4b667c21c6adcacf57f8","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/4.png","hash":"52cfb649fee62c2d0248b8a19634016a6e7dfeb0","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/exam/4.png","hash":"a3e580c7a52b96615056d54e0901e927210ec6bd","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/queue/2.png","hash":"372e33824e44870739b0b2dd31473891d8be39d5","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/queue/4.png","hash":"ccc7388fe9d234b85dfaf0f13df2011fdd448cc9","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/13.png","hash":"5c51b87683faf0b42ff105b4b509847ce28f033c","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/12.png","hash":"7b9ec3a8aeea46a650d5f324f6bcd450d7c6f1ce","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/15.png","hash":"642ac58ff76d07fdb5f34aa690c5d9198947b50b","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/19.png","hash":"4850932f1aa82436d5d483bf8c65762911e63d5d","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/20.png","hash":"e3ccd07772d3937fe059f7030cb5637d07272705","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/5.png","hash":"5606a7bf100e9f72e25622c5364701c62e995057","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/hafmantree/1.png","hash":"c93b19d02e8eecbcd748e4e7d0b212fdb258e3d2","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/set/3.png","hash":"2656e0c353bab48a03f657aff960e69d4ccf488e","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/set/4.png","hash":"60b7cd6266dd054a37d619083c49e76d936471e7","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/3.png","hash":"554d3cbfb2d7a8276695dfab55b6fa00d6b41e29","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/1.png","hash":"5f3d151b0ef530ec331a88871f4c790ad1e7de76","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/4.png","hash":"0ed7fed4738e93c716e7d8947eb29ec60bbcb3b3","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/7.png","hash":"b0407aed45fdf2778c37aeb86e16f0d76246bd1b","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/3.png","hash":"8736726d7645894dc84807c3e9ce0e54fa76c717","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/18.png","hash":"23ab682c9b0e7ed5a5372d575801e89b1735a9c8","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/2.png","hash":"30c586539ef983e91f127a9d117be4334832c7b4","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/22.png","hash":"6db8e47e30d615832eebb062a162791b7c310fd4","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/25.png","hash":"04097ccd7e31337fc15b0b4e6590f0e46ed5e92c","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/26.png","hash":"186dae57f64593ba80a9484c2b1746c1f8d29999","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/4.png","hash":"7a3bb1906f0ad5afccbed87ff851e3819cbafc36","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/6.png","hash":"5617cd959a09a2687fe2cb9a32abfdf070d389fa","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/8.png","hash":"177c49dc3942bb19e887c89c2e795bc944d2994c","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/11.png","hash":"ddf8ab48eb171c8ef1e1f0114616ad849ddfb034","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/13.png","hash":"f09b3c157a8364de40821317b2677a175b3f4dc6","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/2.png","hash":"bfe530abb9fac2ea1b2eb295a832de6b1f725218","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/6.png","hash":"707dbf184c801ed3e8a6f0c333ab4797dda2b238","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/7.png","hash":"daf3d4a4a195019ed2629e892f3fd8e2aee5978c","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/8.png","hash":"4320444060e2fa35d0b0e4dc8f33a03cec5bea7d","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/6.png","hash":"f70727738f1d45d51a0b5ace85e38f9ef4fbefbc","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/7.png","hash":"430730c045a26ff7a2671b3bf42b81d36e288ec3","modified":1706627923073},{"_id":"public/img/datastruct/7_search/BST/1.png","hash":"55a425118fb566256fc2dcb7267670c2e0c8b6be","modified":1706627923073},{"_id":"public/img/datastruct/7_search/red/3.png","hash":"e07c568186d1ff720b927af647502bf84095c922","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/3.png","hash":"b167c48347e3f40f71169249aa9e57149f456030","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/6.png","hash":"ec0afe78ba75251e35923d39189ae047b28b0898","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SRDiff/2.png","hash":"bc499602dd3514cfa3e48a170a0254f98de118a9","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/7.png","hash":"b0c033daaece2d1342f4017cd64850e19e1973ea","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/12.png","hash":"35982c423def1509d333ab9842840239de01b7d2","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/9.png","hash":"2d2e66a07ec289a15511a707862c44c0fa9b9c6e","modified":1706627923073},{"_id":"public/img/datastruct/4_string/1.png","hash":"dd8f568d408f4066857dcaf5f837b76ff72681ea","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/doublelinklist/2.png","hash":"ca655c8903c294c2561adf00e03115d85daac0d3","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/doublelinklist/4.png","hash":"7f6f39075bd9d99fc80bed11a9572929861608fe","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/3.png","hash":"de128228b37c7f67472db3f69319469c15577bb1","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/6.png","hash":"5796e5f5deedd912d609d786b9bcdf81e5952265","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/matrix/5.png","hash":"ddc34b510edf878733390cf6280c17e24430ca44","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/10.png","hash":"809602cc17c15b735981b02272c065543b829903","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/18.png","hash":"0c53deb30a095262bace6fe55d49b9528d79932b","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/8.png","hash":"da3f2d7eb809212e929a5124c89161424edb4b19","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/hafmantree/4.png","hash":"6e0aa2e3cb77d483683e3d0d11cf91ed42a1b86f","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/set/5.png","hash":"28d6733723d49340995dec2fde9e88dd9f0adb05","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/tree/1.png","hash":"adf29d834bac15c3cbb5a59ffe8ad8beb0e84a37","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/2.png","hash":"a3b2cc5ec1d3f6641c562ec91fd67158681d54fd","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/treesave/6.png","hash":"29ebb70f952f15f45953541376e244d40361dce0","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/3.png","hash":"ab89866de5a90543cb94ba68f91772cbea6885c0","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/7.png","hash":"8cdb063bca970837e89246b7c242aa8df4ef69ab","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/20.png","hash":"e1ea39884791587ef05f620d70bea10cad4517ca","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/7.png","hash":"17fe699b83593d7b5a5a63cf6f8e96850e5a0c78","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/10.png","hash":"904d546f835be088ef8c6431fcba3099f29a89b6","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/14.png","hash":"e5fe49cda495ad811654a44c5c4df75c58a26b15","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/shortestpath/3.png","hash":"4a56bcbe87473960ae402584e0da20c8c16cfee1","modified":1706627923073},{"_id":"public/img/datastruct/7_search/red/4.png","hash":"1565be0433a56f3b59c04e9ac45580ed38c6e49e","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/4.png","hash":"52e1734955fdec29f5967e9ee9474d2cddc98d86","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/7.png","hash":"66712ddccabed87d61c763cac232635c37dfba4c","modified":1706627923073},{"_id":"public/img/datastruct/4_string/4.png","hash":"7838d4d94535fa7a23ea70e174f18224109af7a3","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/stack/2.png","hash":"a908d6604057c26915ac3f6755cbb618fc315bac","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/22.png","hash":"b42865762e3f79e13238c99d3fea6e9a34b48b7a","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/2.png","hash":"62329d059d1524ccb694e74674724d123b1d1ccb","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/6.png","hash":"81c02a6561ed5dfb1a5d2523c54f6f3d033c1828","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/15.png","hash":"ddaa0073e7a050c6da2e15bb92edef4b263e71f8","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/23.png","hash":"507a10492249735e4eff71110dccc08e32d75723","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/5.png","hash":"e526a1db7825500f3915b81cff0b2a0649501224","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/9.png","hash":"af0f3d264f6346953c00662e13262590c718288d","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/generatetree/1.png","hash":"a38f3f3818fb59ffa2e0c2f149baae5ad3e08906","modified":1706627923073},{"_id":"public/img/datastruct/7_search/red/2.png","hash":"561a4f0a6d89e9dc5059fe6ad41fcf3ccb064c71","modified":1706627923073},{"_id":"public/img/datastruct/2_linearlist/5.png","hash":"d4eecc47637ac57e721533941890b5db93c6cd96","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/bintree/17.png","hash":"7e9e417dd7e92cf4518e7478df7a61dc792b5c79","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/6.png","hash":"160fc9cbaf10916bf63315abe80c023af57cb663","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/8.png","hash":"6d7b99c9cfe359e941a1a0a9f733fd37ca979430","modified":1706627923073},{"_id":"public/img/datastruct/7_search/AVL/1.png","hash":"1cba4a7760b4e3198c1d948e381a13e76b5522a5","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/24.png","hash":"24195d899250ca557aa68f3c5b50872ebf724b25","modified":1706627923073},{"_id":"public/img/datastruct/7_search/BST/3.png","hash":"9d522c4b3ed9fc8d4cad85e1d574895e0edf5ffd","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/8.png","hash":"a057c763efb0ce8ad6ed81c7fcc687b8cfd61d64","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/exam/5.png","hash":"70eb4243c88e9cb6f9d64dc4b1ce0123f93d7b70","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/1.png","hash":"3c95625309a2e2f7fddf78c14bc972a018c82916","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/graph/3.png","hash":"1c63775db55f4624289bc1ef592ed88d4c2258ab","modified":1706627923073},{"_id":"public/img/datastruct/7_search/search/5.png","hash":"1be79056d4fb1d9c03850ce2161c2f2c22373751","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/exam/2.png","hash":"23650f4e8a06111ed5639cc0891fd7490c8eb7b7","modified":1706627923073},{"_id":"public/img/datastruct/6_graph/DAG/4.png","hash":"1aee5cdce7b83cbb17cc5c7c14ac9d0a02a787f8","modified":1706627923073},{"_id":"public/img/datastruct/5_tree/hafmantree/3.png","hash":"20d3db5968e55586130cdf0fc98d5dcf77d79408","modified":1706627923073},{"_id":"public/img/datastruct/7_search/B/1.png","hash":"bba1aaa2fb53ede0dff30e60d86ac9c9e7ad3cc8","modified":1706627923073},{"_id":"public/img/datastruct/3_stack/exam/6.png","hash":"721fc6eedb785c67120633ed94159a0d4ea49270","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/13.png","hash":"75213541cc70afc1d1918c479ac78f8d56850e52","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/SwinIR/10.png","hash":"88289ae9893a394b64ec2faf0759100abbf224a1","modified":1706627923073},{"_id":"public/img/deeplearning/paper/SR/HAT/9.png","hash":"a43c143ea90005eb68c6b17343f20d5526e99d2e","modified":1706627923073},{"_id":"public/tags/index.html","hash":"32a88a8e8be388fcccb8895ff1e31a16d30f6759","modified":1706628355296},{"_id":"public/categories/index.html","hash":"574e31945b7f84e6ad864dcf2d786d7751afc7e3","modified":1706797007240},{"_id":"public/2024/01/27/deeplearning/paper/SR/Resshift/index.html","hash":"9fd9db7210cc7213ea2762fdd10cc40973d26858","modified":1706629677713},{"_id":"public/2024/01/27/deeplearning/paper/SR/SRDiff/index.html","hash":"6be53e307771a1b70c04bcb447f07232f739cd87","modified":1706629677713},{"_id":"public/2024/01/26/deeplearning/paper/SR/CDM/index.html","hash":"b24003fba477bd62c9347cb57e8b629e27d3e594","modified":1706629677713},{"_id":"public/2024/01/25/deeplearning/paper/SR/HAT/index.html","hash":"a5359d414ac92b1272720380a49e17082f70d9b3","modified":1706628355296},{"_id":"public/2024/01/25/deeplearning/paper/SR/SwinIR/index.html","hash":"06e2eba0a4933b81a3ddb4933e7dc580a0f01344","modified":1706628355296},{"_id":"public/2023/12/17/experience/pycharm/link_server/index.html","hash":"cd821b986d5d9106f00ce0ddc24b8d238d3e37d9","modified":1706628355296},{"_id":"public/2023/12/12/experience/app/lrc_to_smi/index.html","hash":"803b8c3d388d243f56b2845129c6e187d5da5f0d","modified":1706628355296},{"_id":"public/2023/11/27/deeplearning/code/pytorch/1_prepare/2_preprocessing/index.html","hash":"050fb4e88dca09f1d6ae510508867f723a84c7c2","modified":1706628355296},{"_id":"public/2023/11/11/deeplearning/code/pytorch/1_prepare/1_dataoperation/index.html","hash":"c6b6ab879d85a21cbf088cc1e011182bd5461b48","modified":1706797007240},{"_id":"public/2023/10/02/algorithm/1_base/1_base/index.html","hash":"e0c00283c97de0e5bcaa2d8513da8b350f5a7347","modified":1706628355296},{"_id":"public/2023/08/26/datastruct/7_search/5_Btree/index.html","hash":"61fba46bd96de21e7c8285aac42b8cdef7840fb5","modified":1706628355296},{"_id":"public/2023/08/26/datastruct/7_search/4_redblacktree/index.html","hash":"e35fadfb0801759b1eff8979b94b280be47894ba","modified":1706628355296},{"_id":"public/2023/08/26/datastruct/7_search/3_AVL/index.html","hash":"c71fa05fd49512a0beccd4ea637467e85f52d880","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/3_stack/1_stack/index.html","hash":"08989896d1a87289b6a47821e6dff2ea380f0dde","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/3_stack/2_queue/index.html","hash":"16b72865bcce227f1c1d231b488a85f6cdd2471d","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/3_stack/3_exam/index.html","hash":"abb83e0834533e1e911db1a4631a46e10256136f","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/3_stack/4_matrix/index.html","hash":"cf82a119a3ad298dc39b2b117d4b83368991303c","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/5_tree/1_tree/index.html","hash":"5d4616d90f3d9b553c280e5c8a814eb8fc0c4629","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/4_string/1_string/index.html","hash":"25518eb4a2e91913b24ecf98214a31e71cb470af","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/5_tree/2_bintree/index.html","hash":"60c6cac34b5f98f5a16992985d5e081f167f80f1","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/6_graph/1_graph/index.html","hash":"554d9d4fd93e926e8481edaddc0477a2010302ad","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/5_tree/3_treesave/index.html","hash":"25a8891f8fa5ea6ef14471bbd516168b946af289","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/5_tree/4_Hafmantree/index.html","hash":"618269bd248833f3062fd197e1e68c100cdf3c27","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/5_tree/5_set/index.html","hash":"56a43b78b1d34adf6adbeb5c8cca1c0650218324","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/6_graph/2_generatetree/index.html","hash":"f7f09f268713dc82c6c4167dfeda419982fccfe9","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/6_graph/4_DAG/index.html","hash":"70b2513b9782c1e8c3da3e56389275b375caca6b","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/6_graph/3_shortestpath/index.html","hash":"00d7df018375a4a25cf72dbc3d17d73d0c7aeab4","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/7_search/2_BST/index.html","hash":"897d363531b22831c3d21eadbb0f64afcfc3a36c","modified":1706628355296},{"_id":"public/2023/08/07/datastruct/7_search/1_search/index.html","hash":"e55429a9c3342ec2363bf02423b14d0660103ea3","modified":1706628355296},{"_id":"public/2023/08/05/datastruct/2_linearlist/2_linklist/index.html","hash":"f637b1f91cf9c46ff7d01c58164bb7ef37887844","modified":1706628355296},{"_id":"public/2023/08/05/datastruct/2_linearlist/3_doublelinklist/index.html","hash":"dcc2414b7b8e68700f1a71b19379e8719870f325","modified":1706628355296},{"_id":"public/2023/07/25/hexo/hexo搭建/index.html","hash":"3475383a5490d0074074b31014013284459dfba2","modified":1706628355296},{"_id":"public/2023/02/01/datastruct/1_extract/1_基础/index.html","hash":"29eaf3f45c23598ac3b439d34465121ad968e63e","modified":1706628355296},{"_id":"public/2023/02/01/datastruct/2_linearlist/1_linearlist/index.html","hash":"9139fd14062c1bfe334aeadf89c5b3c1b6a9dec3","modified":1706628355296},{"_id":"public/2021/03/01/linux/Linux_0安装/index.html","hash":"1757d06a105c86b16a90cbd5ef97d97c67c35b02","modified":1706628355296},{"_id":"public/2021/03/01/linux/Linux_2.用户和权限/index.html","hash":"da745b3f181b96ace485cca4c81ca9ea3e931b99","modified":1706628355296},{"_id":"public/2021/03/01/linux/Linux_1.基础命令/index.html","hash":"f0b48bae913378404825be95cc00a53ee77ac391","modified":1706628355296},{"_id":"public/2021/03/01/wechartapp/weixin/index.html","hash":"0810692440e6828b35948504b96d611173c5e2a7","modified":1706628355296},{"_id":"public/2021/03/01/experience/vscode/vscode/index.html","hash":"85c32d8a42ce43bfbac0548f32caeca2fcabb650","modified":1706628355296},{"_id":"public/2014/12/24/hexo/hello-world/index.html","hash":"2d2e2fd951ee3ddaac550b48daf52e054bebe159","modified":1706628355296},{"_id":"public/archives/index.html","hash":"fe4dc8365cf2570bd8e8d7fa714f899b1bf3dbce","modified":1706797007240},{"_id":"public/archives/page/2/index.html","hash":"eb160de0352b229d31af3ab1977a21ec9d112cee","modified":1706797007240},{"_id":"public/archives/page/3/index.html","hash":"7a1947fff657e79afcab462bc424d8ebf24f4438","modified":1706797007240},{"_id":"public/archives/page/4/index.html","hash":"5095d3ec71659c37509c2737311e5d16b5aa5a58","modified":1706797007240},{"_id":"public/archives/page/5/index.html","hash":"7a631ef91ea780517425cf13c1beb9c2dcd2a68c","modified":1706797007240},{"_id":"public/archives/page/6/index.html","hash":"a95d5ebd819a997ec1e4b45d50b618339198f8f0","modified":1706797007240},{"_id":"public/archives/page/7/index.html","hash":"b8af8ff2b8538226fe7a675dabeae4e3fb1238c8","modified":1706797007240},{"_id":"public/archives/page/8/index.html","hash":"fbdd000aa5ed97d1380492f51de1867d5dd2fe1f","modified":1706797007240},{"_id":"public/archives/2014/index.html","hash":"33024514f98eb911b0622e3a993f721c261b3b69","modified":1706628355296},{"_id":"public/archives/2014/12/index.html","hash":"ebc24960d520a6019f68b7731c5f64abfb443ef2","modified":1706628355296},{"_id":"public/archives/2021/index.html","hash":"a06fd27d22136724277d30f4edca4c1daba57ad7","modified":1706628355296},{"_id":"public/archives/2021/03/index.html","hash":"8e31bb20c716fd845a0e392159695dcace217b17","modified":1706628355296},{"_id":"public/archives/2023/index.html","hash":"5313108241e707a0c92b55bcde2dea11bdd14689","modified":1706628355296},{"_id":"public/archives/2023/page/2/index.html","hash":"bd83dca4578481e0d8870f00504b41a6c8a8a514","modified":1706628355296},{"_id":"public/archives/2023/page/3/index.html","hash":"4939a3faa0eb438942df7a91e4f7fcf3aa4b6ce2","modified":1706628355296},{"_id":"public/archives/2023/page/4/index.html","hash":"e98b1df02b8e1ce0ccefe51096b7d7f00e020f90","modified":1706628355296},{"_id":"public/archives/2023/page/5/index.html","hash":"70acb2833a129b3d77126109d8e0a6d1f8555771","modified":1706628355296},{"_id":"public/archives/2023/page/6/index.html","hash":"952c80e4d6ee3b85b9ec08858f4cd44c59aa828d","modified":1706628355296},{"_id":"public/archives/2023/02/index.html","hash":"2fa1f34f19bc6e5df89762ffaa30b7bfe67f1de2","modified":1706628355296},{"_id":"public/archives/2023/07/index.html","hash":"06c9dcc3c48b1896c5ac174c7d854b7d3feb6530","modified":1706628355296},{"_id":"public/archives/2023/08/index.html","hash":"5bbdfe5edfd3487eb3b4a9a19b68df9676474c27","modified":1706628355296},{"_id":"public/archives/2023/08/page/2/index.html","hash":"df2292b355e35c74c65d0396b708d4dfeceeeeae","modified":1706628355296},{"_id":"public/archives/2023/08/page/3/index.html","hash":"ccadf8f677b9f5c567f81a7f67aeb2c19cf57ff2","modified":1706628355296},{"_id":"public/archives/2023/08/page/4/index.html","hash":"deb91bfa02e173969e7987621da1f14c4ecb1303","modified":1706628355296},{"_id":"public/archives/2023/08/page/5/index.html","hash":"a546a74f8abef412bcc68ecae97012efed564d3c","modified":1706628355296},{"_id":"public/archives/2023/10/index.html","hash":"0847c622bc661836142b7683f35fe307032eedf4","modified":1706628355296},{"_id":"public/archives/2023/11/index.html","hash":"6f9c8572e3a74b7ac72559c075331cc8d90a4f24","modified":1706628355296},{"_id":"public/archives/2023/12/index.html","hash":"cfba166467ce695214bb6d8055c0aa717422e527","modified":1706628355296},{"_id":"public/archives/2024/index.html","hash":"bf6bd74799f3a1591013fcefea0d186816d699c7","modified":1706797007240},{"_id":"public/archives/2024/01/index.html","hash":"ec93d9d455d4633cac478bc5b1312b64a6b5dd0a","modified":1706629677713},{"_id":"public/index.html","hash":"85c501daf3bd15be831e13660113a106cbfa2ab1","modified":1706797007240},{"_id":"public/page/2/index.html","hash":"569ee1ae658a5910e9450a1beeb71e4af35f32b4","modified":1706797007240},{"_id":"public/page/3/index.html","hash":"f3a8c151b05d46cbc0b0ed67d8b3efd810bbf53b","modified":1706797007240},{"_id":"public/page/4/index.html","hash":"6c134095e33480eacc8dc19f3a287f5b3a2f039b","modified":1706797007240},{"_id":"public/page/5/index.html","hash":"521145aa43d900a1530ed0db25497a7e8a5f57e9","modified":1706797007240},{"_id":"public/page/6/index.html","hash":"abd2263b935508faeb98b03d0092921e07141765","modified":1706797007240},{"_id":"public/page/7/index.html","hash":"c613e738e69a6f77e6bc8b9209eecf9e932ed1ce","modified":1706797007240},{"_id":"public/page/8/index.html","hash":"bbabd76b16504e4dc19350e9bfe6053dd13b052c","modified":1706797007240},{"_id":"public/categories/深度学习/index.html","hash":"d14d3e9d2cb55a2608078f1ab535851d096473aa","modified":1706797007240},{"_id":"public/categories/深度学习/page/2/index.html","hash":"6daade97eecdbdb39828718a7bb043901cdf780b","modified":1706797007240},{"_id":"public/categories/Linux/index.html","hash":"bb4719c2b1b714e2f0d372b281219b3eb289712f","modified":1706628355296},{"_id":"public/categories/博客/index.html","hash":"1e4b27f26b32941137cd4fc40e333087c97f714e","modified":1706629677713},{"_id":"public/categories/微信小程序/index.html","hash":"fecc85b0691fe83899ef15d11bec11b531a6684f","modified":1706628355296},{"_id":"public/categories/数据结构/index.html","hash":"e571704218ea399beb05db875d71887967da1740","modified":1706628355296},{"_id":"public/categories/数据结构/page/2/index.html","hash":"7d57f8d3ed146087461d363aeaeeb77968cca209","modified":1706628355296},{"_id":"public/categories/数据结构/page/3/index.html","hash":"37354d0fb1607cdda9aeaf70129bbd9cc68af4a4","modified":1706628355296},{"_id":"public/categories/数据结构/page/4/index.html","hash":"cb63ee62a3507ba25aa6d52add0ed4f8801912f0","modified":1706628355296},{"_id":"public/categories/数据结构/page/5/index.html","hash":"29ff6d9a6f47472ca2346954d75cebf9160bb48f","modified":1706628355296},{"_id":"public/categories/算法/index.html","hash":"50a1662397a7325fb54634231dd173585cbc93fe","modified":1706628355296},{"_id":"public/categories/其他/index.html","hash":"e4d3f4c44f1316f1935e246902d40a693ff3b367","modified":1706628355296},{"_id":"public/categories/vscode/index.html","hash":"0e75bba2d5349b20107d56172da1dadfc5f8ad45","modified":1706628355296},{"_id":"public/tags/深度学习/index.html","hash":"95d98e1d0ed1fd30dd304099fc053c21aaba508a","modified":1706797007240},{"_id":"public/tags/深度学习/page/2/index.html","hash":"e5a05146f4954ce96ebf57ef4378716610a24d6c","modified":1706797007240},{"_id":"public/tags/Linux/index.html","hash":"295ea76fec8ed953b468c81875c7f120b47c67af","modified":1706628355296},{"_id":"public/tags/博客/index.html","hash":"31ddafffec63f525c02f4483a9cd23c91ed5789a","modified":1706629677713},{"_id":"public/tags/hexo/index.html","hash":"7ccaac4c1d01f44652952bfff4c640845866dda8","modified":1706628355296},{"_id":"public/tags/微信小程序/index.html","hash":"3b96bd461161980f1d43c8c7d4ee87c9185b44cc","modified":1706628355296},{"_id":"public/tags/数据结构/index.html","hash":"ee6ee26f35156183133efc998a011a2be2f3da7a","modified":1706628355296},{"_id":"public/tags/数据结构/page/2/index.html","hash":"c2ead68b3b855512714fbf7d77c25ce7f973ef99","modified":1706628355296},{"_id":"public/tags/数据结构/page/3/index.html","hash":"39eb12b696775bb5401d0e9f192b7e1f6d48287c","modified":1706628355296},{"_id":"public/tags/数据结构/page/4/index.html","hash":"1045358725afab28b26a0ca79f6cfa850597aba7","modified":1706628355296},{"_id":"public/tags/数据结构/page/5/index.html","hash":"cf02cd44dbbf455b8a2afa18309a8c78a9065ee2","modified":1706628355296},{"_id":"public/tags/线性表/index.html","hash":"0a5e6b69c38d98ebdc4182bc09c7412dbb043f81","modified":1706628355296},{"_id":"public/tags/单链表/index.html","hash":"92c464df4275bfb9b8030213e79480ebff5ad300","modified":1706628355296},{"_id":"public/tags/双链表/index.html","hash":"f781af09e16bad000d7869653bdd3a91342c0cca","modified":1706628355296},{"_id":"public/tags/栈/index.html","hash":"46337ddbe727b990bce41aab9fb4bc0d908c5cf2","modified":1706628355296},{"_id":"public/tags/队列/index.html","hash":"bb44f9463d729f54590d07bf797bd70dcec667dd","modified":1706628355296},{"_id":"public/tags/树/index.html","hash":"558de4becf29dbbf836299abe5ae87285f9a7be2","modified":1706628355296},{"_id":"public/tags/串/index.html","hash":"4a316b86bb38242b6f3d32be2ef1afb81fc848ac","modified":1706628355296},{"_id":"public/tags/二叉树/index.html","hash":"311ea1b2294a0d2c6bd11e73abd34b589ae85fb3","modified":1706628355296},{"_id":"public/tags/图/index.html","hash":"bbb4142832703c2a3d6ad16e3510cd2f642bdf3b","modified":1706628355296},{"_id":"public/tags/哈夫曼树/index.html","hash":"539150aa4693829f1f769dcb1db7e7b1f6398f5e","modified":1706628355296},{"_id":"public/tags/并查集/index.html","hash":"88dd408f93e8ed19e5a03b0d06e320bb15b18293","modified":1706628355296},{"_id":"public/tags/最小生成树/index.html","hash":"4753d86666512c4be9e37f14698761d849af482a","modified":1706628355296},{"_id":"public/tags/最短路径/index.html","hash":"1e803944f6841e24cb02c2af7c8638665a43b07c","modified":1706628355296},{"_id":"public/tags/查找/index.html","hash":"760ca6b4366ea8a3e4a0631d55cbe271e5d4ad86","modified":1706628355296},{"_id":"public/tags/二叉排序树/index.html","hash":"71d059e6ea50a10f7e6cf4bd4e358bea0fe3e947","modified":1706628355296},{"_id":"public/tags/平衡二叉树/index.html","hash":"1fde81f25e2da7f053ea28066c7046ce53c06bec","modified":1706628355296},{"_id":"public/tags/B树/index.html","hash":"8b7575d820a3901b856866023c6c6adbb1a70440","modified":1706628355296},{"_id":"public/tags/算法，排序/index.html","hash":"272443e196aca2362472659ec8413637fdb1afeb","modified":1706628355296},{"_id":"public/tags/其他/index.html","hash":"03c1b5e9e10abe80e3592dcd5da0f4e7a501df25","modified":1706628355296},{"_id":"public/tags/pycharm/index.html","hash":"552e5a9218557c2ddb8ae4f0180061d7ce776b92","modified":1706628355296},{"_id":"public/tags/vscode/index.html","hash":"c3684ad0bf5972bcc14b906118ad5762896c05d2","modified":1706628355296},{"_id":"public/tags/论文/index.html","hash":"14933aa8d35481f34e45c6e6c7fe8348dcedf0de","modified":1706628355296},{"_id":"public/tags/超分/index.html","hash":"8613caea48e2fe2a23cf2f5045704aa26136c9fe","modified":1706628355296},{"_id":"public/tags/机器学习/index.html","hash":"566fa447e891361299c693a7294b7a6fe2bfdd39","modified":1706797007240},{"_id":"public/tags/pytorch/index.html","hash":"4262d1ae6945e3076e7f916a942c4d6d61466e54","modified":1706797007240},{"_id":"public/tags/数据预处理/index.html","hash":"c52eab0ed39042857a1f1c47d49ab76b77ba99c6","modified":1706628355296},{"_id":"source/_posts/hexo/latex.md","hash":"ba1edb667cf9bce89015490169b7ef473d263fea","modified":1706628938369},{"_id":"source/_posts/hexo/sourcecode.md","hash":"1764463f235b0d7a0497a518bb041e9742fcc774","modified":1706629777144},{"_id":"public/2024/01/30/hexo/latex/index.html","hash":"f3c1776f52a2cd7b069ebe9be9a880ce3c53ab63","modified":1706797007240},{"_id":"public/2024/01/30/hexo/sourcecode/index.html","hash":"454ec2797210e86e226937594cbb7417481381e6","modified":1706797007240},{"_id":"public/archives/page/9/index.html","hash":"a040eaa07900a588738a17a1f0659fee7c7931ce","modified":1706797007240},{"_id":"public/archives/2024/page/2/index.html","hash":"27ad193a1e9d88d6aa4fedc7db4640ead7c662d1","modified":1706797007240},{"_id":"public/archives/2024/01/page/2/index.html","hash":"a99087736b481a0328c951b77bacac17d64ad11c","modified":1706629677713},{"_id":"public/page/9/index.html","hash":"47447787c71434afbcdda27012d6ffb4beca56e8","modified":1706797007240},{"_id":"public/categories/博客/hexo/index.html","hash":"f52aa798c2c8e3a5c42669bf886393211d69fdae","modified":1706629677713},{"_id":"public/categories/博客/git/index.html","hash":"ccdd68dc8bf25e30ae914ba7edef47435f4479ec","modified":1706629677713},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/3_linearalgebra.md","hash":"719ecd1747ecadfba04c81ed4a40b2ee677db506","modified":1706792562092},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/4_calculus.ipynb","hash":"b1b10442e0783a16071f565ae56b2ef684ca6f09","modified":1706792539784},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/5_autodifferential.ipynb","hash":"55a4cc821be2b2613909ed65c2b0dd259d7a04f5","modified":1706796772912},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/5_autodifferential.md","hash":"88650d982cfe5bfbd7acf08a8dcd97d968129147","modified":1706796926771},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/4_calculus.md","hash":"4678162e4ed1757b21f32dc340aa54ed72589090","modified":1706792531271},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/.ipynb_checkpoints/4_calculus-checkpoint.ipynb","hash":"96341d722267f34e7425aaf6e549607172121990","modified":1706775885763},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/4_calculus_files/4_calculus_1_1.svg","hash":"2268e578363aa8e3ea0d9fc6f9048b5476965606","modified":1706791900006},{"_id":"source/_posts/deeplearning/code/pytorch/1_prepare/4_calculus_files/4_calculus_3_1.svg","hash":"4388b61bde02e3677bad2d58f1cc537f2ce40879","modified":1706791900029},{"_id":"public/2024/02/01/deeplearning/code/pytorch/1_prepare/3_linearalgebra/index.html","hash":"7690a91ca847ee01d53f7a452b318c870230b3ac","modified":1706797007240},{"_id":"public/2024/02/01/deeplearning/code/pytorch/1_prepare/5_autodifferential/index.html","hash":"295042123a3e58316e4171db8ffd2881249aa59f","modified":1706797007240},{"_id":"public/2024/02/01/deeplearning/code/pytorch/1_prepare/4_calculus/index.html","hash":"40b95feace2416a24e602bc9bff944bd004478f0","modified":1706797007240},{"_id":"public/archives/2024/02/index.html","hash":"a72f4f5e871d2d6cbe633433a02ddb683816d060","modified":1706797007240}],"Category":[{"name":"深度学习","_id":"cls0iclqq0004wovwb0tdb0a0"},{"name":"Linux","_id":"cls0iclqu000awovw4pwr1d3i"},{"name":"博客","_id":"cls0iclr1000rwovwe92ea8gn"},{"name":"微信小程序","_id":"cls0iclr30014wovw55xo9bfc"},{"name":"数据结构","_id":"cls0iclr5001bwovw0erx93zn"},{"name":"算法","_id":"cls0iclrh002wwovwemr3ckr7"},{"name":"其他","_id":"cls0iclrh0033wovw147qf0nt"},{"name":"vscode","_id":"cls0iclrw0062wovw38094st8"},{"name":"hexo","parent":"cls0iclr1000rwovwe92ea8gn","_id":"cls0ila1u0005j0vw1fhqakth"},{"name":"git","parent":"cls0iclr1000rwovwe92ea8gn","_id":"cls0iqo8h000dj0vwdzht4cwr"}],"Data":[],"Page":[{"title":"标签","date":"2020-02-14T14:20:43.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \"标签\"\ndate: \"2020-02-14 22:20:43\"\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n\n---\n","updated":"2023-10-23T10:04:10.779Z","path":"tags/index.html","_id":"cls0iclqh0000wovw76fw1e2u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-07-20T02:18:50.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-07-20 10:18:50\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2023-07-26T04:04:21.211Z","path":"categories/index.html","_id":"cls0iclqn0002wovwd6puc7mk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"1. DDPM论文理解","date":"2023-10-24T02:28:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n- 文章：[去噪扩散概率模型](https://arxiv.org/pdf/2006.11239.pdf)\n\n- 代码：https://github.com/hojonathanho/diffusion\n# 一. 论文摘要\n\n- 提出了扩散概率模型\n- 潜在变量模型来源于非平衡热力学\n- 在加权变分界限上进行训练（变分界限是根据“扩散概率模型” 和 “采用了去噪分数匹配与朗之万动力学的训练方法“之间的联系\n- 模型允许渐进的有损解压（可以解释为自回归解码的推广）\n- 在无条件CIFAR10上Inception=9.46，FID=3.17。在256*256 LSUN上与Progressive GAV相似\n","source":"_drafts/1_DDPM.md","raw":"---\ntitle: 1. DDPM论文理解\ndate: 2023-10-24 10:28:00\ntags: [深度学习,DDPM,生成模型]\ncategories: [深度学习]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n- 文章：[去噪扩散概率模型](https://arxiv.org/pdf/2006.11239.pdf)\n\n- 代码：https://github.com/hojonathanho/diffusion\n# 一. 论文摘要\n\n- 提出了扩散概率模型\n- 潜在变量模型来源于非平衡热力学\n- 在加权变分界限上进行训练（变分界限是根据“扩散概率模型” 和 “采用了去噪分数匹配与朗之万动力学的训练方法“之间的联系\n- 模型允许渐进的有损解压（可以解释为自回归解码的推广）\n- 在无条件CIFAR10上Inception=9.46，FID=3.17。在256*256 LSUN上与Progressive GAV相似\n","slug":"1_DDPM","published":0,"updated":"2023-10-24T03:38:31.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqk0001wovw5iv5e6hh","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>文章：<a href=\"https://arxiv.org/pdf/2006.11239.pdf\">去噪扩散概率模型</a></p>\n</li>\n<li><p>代码：<a href=\"https://github.com/hojonathanho/diffusion\">https://github.com/hojonathanho/diffusion</a></p>\n</li>\n</ul>\n<h1 id=\"一-论文摘要\"><a href=\"#一-论文摘要\" class=\"headerlink\" title=\"一. 论文摘要\"></a>一. 论文摘要</h1><ul>\n<li>提出了扩散概率模型</li>\n<li>潜在变量模型来源于非平衡热力学</li>\n<li>在加权变分界限上进行训练（变分界限是根据“扩散概率模型” 和 “采用了去噪分数匹配与朗之万动力学的训练方法“之间的联系</li>\n<li>模型允许渐进的有损解压（可以解释为自回归解码的推广）</li>\n<li>在无条件CIFAR10上Inception&#x3D;9.46，FID&#x3D;3.17。在256*256 LSUN上与Progressive GAV相似</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>文章：<a href=\"https://arxiv.org/pdf/2006.11239.pdf\">去噪扩散概率模型</a></p>\n</li>\n<li><p>代码：<a href=\"https://github.com/hojonathanho/diffusion\">https://github.com/hojonathanho/diffusion</a></p>\n</li>\n</ul>\n<h1 id=\"一-论文摘要\"><a href=\"#一-论文摘要\" class=\"headerlink\" title=\"一. 论文摘要\"></a>一. 论文摘要</h1><ul>\n<li>提出了扩散概率模型</li>\n<li>潜在变量模型来源于非平衡热力学</li>\n<li>在加权变分界限上进行训练（变分界限是根据“扩散概率模型” 和 “采用了去噪分数匹配与朗之万动力学的训练方法“之间的联系</li>\n<li>模型允许渐进的有损解压（可以解释为自回归解码的推广）</li>\n<li>在无条件CIFAR10上Inception&#x3D;9.46，FID&#x3D;3.17。在256*256 LSUN上与Progressive GAV相似</li>\n</ul>"},{"_content":"## 1. pytorch网课\n### Introduction\n- format\n- calculate\n- variable\n- activation\n### Regression\n- 给定x , y（变量）\n- 搭建网络\n  - init重写（输入，输出，神经元个数）\n    - 每一层用Linear\n  - forward前向传递（输入数据）\n    - x依次经过init里面的层，最后返回\n- 定义网络、优化器、误差MSELoss\n- 训练（for)\n  - x输入网络得到y^\n  - 根据y与y^得到误差\n  - 优化器梯度为0\n  - backward\n  - 优化\n\n### Classification\n- 定义feature,label\n    - x0为y0类点，x1为y1类点\n    - 数据形式（[a,b] , 1)\n- 搭建网络\n    - init\n    - forward\n- 定义网络、优化器、误差CrossEntropyLoss\n- 训练（for)\n\n### quick_setup\n- net=torch.nn.Sequential()边定义边实例化\n\n### save and refine\n- save \n    - 训练完(for)后\n    - torch.save(net1,'net.pkl')#保留整个图\n    - torch.save(net1.state_dict(),'net_params.pkl')#保留结点参数\n- refine\n    - 直接提取：\n        - net2=torch.load('net.pkl')\n    - 参数提取：\n        - 先搭建一模一样的网络n\n        - 再n.load_state_dict(torch.load('net_params.pkl'))\n\n### minibize_train(批数据训练)\n- 定义batch_size，feature,label\n- 定义数据库：torch_dataset=Data.TensorDataset(x,y)\n- 定义loader：loader=Data.DataLoader( dataset,batch,shuffle,num_workers)\n- 定义网络等\n- 训练： for epoch in range(3):  \n&emsp;&nbsp;&emsp;&emsp;&emsp;for step,(batch_x,batch_y) in enumerate(loader):\n\n### optimizer\n- 用Adam\n\n### cnn\n- 下载数据集train_data,定义loader\n\n","source":"_drafts/progress1.md","raw":"## 1. pytorch网课\n### Introduction\n- format\n- calculate\n- variable\n- activation\n### Regression\n- 给定x , y（变量）\n- 搭建网络\n  - init重写（输入，输出，神经元个数）\n    - 每一层用Linear\n  - forward前向传递（输入数据）\n    - x依次经过init里面的层，最后返回\n- 定义网络、优化器、误差MSELoss\n- 训练（for)\n  - x输入网络得到y^\n  - 根据y与y^得到误差\n  - 优化器梯度为0\n  - backward\n  - 优化\n\n### Classification\n- 定义feature,label\n    - x0为y0类点，x1为y1类点\n    - 数据形式（[a,b] , 1)\n- 搭建网络\n    - init\n    - forward\n- 定义网络、优化器、误差CrossEntropyLoss\n- 训练（for)\n\n### quick_setup\n- net=torch.nn.Sequential()边定义边实例化\n\n### save and refine\n- save \n    - 训练完(for)后\n    - torch.save(net1,'net.pkl')#保留整个图\n    - torch.save(net1.state_dict(),'net_params.pkl')#保留结点参数\n- refine\n    - 直接提取：\n        - net2=torch.load('net.pkl')\n    - 参数提取：\n        - 先搭建一模一样的网络n\n        - 再n.load_state_dict(torch.load('net_params.pkl'))\n\n### minibize_train(批数据训练)\n- 定义batch_size，feature,label\n- 定义数据库：torch_dataset=Data.TensorDataset(x,y)\n- 定义loader：loader=Data.DataLoader( dataset,batch,shuffle,num_workers)\n- 定义网络等\n- 训练： for epoch in range(3):  \n&emsp;&nbsp;&emsp;&emsp;&emsp;for step,(batch_x,batch_y) in enumerate(loader):\n\n### optimizer\n- 用Adam\n\n### cnn\n- 下载数据集train_data,定义loader\n\n","slug":"progress1","published":0,"date":"2023-07-25T05:21:57.764Z","updated":"2023-02-23T10:16:58.035Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqo0003wovw729q99dk","content":"<h2 id=\"1-pytorch网课\"><a href=\"#1-pytorch网课\" class=\"headerlink\" title=\"1. pytorch网课\"></a>1. pytorch网课</h2><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><ul>\n<li>format</li>\n<li>calculate</li>\n<li>variable</li>\n<li>activation</li>\n</ul>\n<h3 id=\"Regression\"><a href=\"#Regression\" class=\"headerlink\" title=\"Regression\"></a>Regression</h3><ul>\n<li>给定x , y（变量）</li>\n<li>搭建网络<ul>\n<li>init重写（输入，输出，神经元个数）<ul>\n<li>每一层用Linear</li>\n</ul>\n</li>\n<li>forward前向传递（输入数据）<ul>\n<li>x依次经过init里面的层，最后返回</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>定义网络、优化器、误差MSELoss</li>\n<li>训练（for)<ul>\n<li>x输入网络得到y^</li>\n<li>根据y与y^得到误差</li>\n<li>优化器梯度为0</li>\n<li>backward</li>\n<li>优化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Classification\"><a href=\"#Classification\" class=\"headerlink\" title=\"Classification\"></a>Classification</h3><ul>\n<li>定义feature,label<ul>\n<li>x0为y0类点，x1为y1类点</li>\n<li>数据形式（[a,b] , 1)</li>\n</ul>\n</li>\n<li>搭建网络<ul>\n<li>init</li>\n<li>forward</li>\n</ul>\n</li>\n<li>定义网络、优化器、误差CrossEntropyLoss</li>\n<li>训练（for)</li>\n</ul>\n<h3 id=\"quick-setup\"><a href=\"#quick-setup\" class=\"headerlink\" title=\"quick_setup\"></a>quick_setup</h3><ul>\n<li>net&#x3D;torch.nn.Sequential()边定义边实例化</li>\n</ul>\n<h3 id=\"save-and-refine\"><a href=\"#save-and-refine\" class=\"headerlink\" title=\"save and refine\"></a>save and refine</h3><ul>\n<li>save <ul>\n<li>训练完(for)后</li>\n<li>torch.save(net1,’net.pkl’)#保留整个图</li>\n<li>torch.save(net1.state_dict(),’net_params.pkl’)#保留结点参数</li>\n</ul>\n</li>\n<li>refine<ul>\n<li>直接提取：<ul>\n<li>net2&#x3D;torch.load(‘net.pkl’)</li>\n</ul>\n</li>\n<li>参数提取：<ul>\n<li>先搭建一模一样的网络n</li>\n<li>再n.load_state_dict(torch.load(‘net_params.pkl’))</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minibize-train-批数据训练\"><a href=\"#minibize-train-批数据训练\" class=\"headerlink\" title=\"minibize_train(批数据训练)\"></a>minibize_train(批数据训练)</h3><ul>\n<li>定义batch_size，feature,label</li>\n<li>定义数据库：torch_dataset&#x3D;Data.TensorDataset(x,y)</li>\n<li>定义loader：loader&#x3D;Data.DataLoader( dataset,batch,shuffle,num_workers)</li>\n<li>定义网络等</li>\n<li>训练： for epoch in range(3):<br>&emsp;&nbsp;&emsp;&emsp;&emsp;for step,(batch_x,batch_y) in enumerate(loader):</li>\n</ul>\n<h3 id=\"optimizer\"><a href=\"#optimizer\" class=\"headerlink\" title=\"optimizer\"></a>optimizer</h3><ul>\n<li>用Adam</li>\n</ul>\n<h3 id=\"cnn\"><a href=\"#cnn\" class=\"headerlink\" title=\"cnn\"></a>cnn</h3><ul>\n<li>下载数据集train_data,定义loader</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-pytorch网课\"><a href=\"#1-pytorch网课\" class=\"headerlink\" title=\"1. pytorch网课\"></a>1. pytorch网课</h2><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><ul>\n<li>format</li>\n<li>calculate</li>\n<li>variable</li>\n<li>activation</li>\n</ul>\n<h3 id=\"Regression\"><a href=\"#Regression\" class=\"headerlink\" title=\"Regression\"></a>Regression</h3><ul>\n<li>给定x , y（变量）</li>\n<li>搭建网络<ul>\n<li>init重写（输入，输出，神经元个数）<ul>\n<li>每一层用Linear</li>\n</ul>\n</li>\n<li>forward前向传递（输入数据）<ul>\n<li>x依次经过init里面的层，最后返回</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>定义网络、优化器、误差MSELoss</li>\n<li>训练（for)<ul>\n<li>x输入网络得到y^</li>\n<li>根据y与y^得到误差</li>\n<li>优化器梯度为0</li>\n<li>backward</li>\n<li>优化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Classification\"><a href=\"#Classification\" class=\"headerlink\" title=\"Classification\"></a>Classification</h3><ul>\n<li>定义feature,label<ul>\n<li>x0为y0类点，x1为y1类点</li>\n<li>数据形式（[a,b] , 1)</li>\n</ul>\n</li>\n<li>搭建网络<ul>\n<li>init</li>\n<li>forward</li>\n</ul>\n</li>\n<li>定义网络、优化器、误差CrossEntropyLoss</li>\n<li>训练（for)</li>\n</ul>\n<h3 id=\"quick-setup\"><a href=\"#quick-setup\" class=\"headerlink\" title=\"quick_setup\"></a>quick_setup</h3><ul>\n<li>net&#x3D;torch.nn.Sequential()边定义边实例化</li>\n</ul>\n<h3 id=\"save-and-refine\"><a href=\"#save-and-refine\" class=\"headerlink\" title=\"save and refine\"></a>save and refine</h3><ul>\n<li>save <ul>\n<li>训练完(for)后</li>\n<li>torch.save(net1,’net.pkl’)#保留整个图</li>\n<li>torch.save(net1.state_dict(),’net_params.pkl’)#保留结点参数</li>\n</ul>\n</li>\n<li>refine<ul>\n<li>直接提取：<ul>\n<li>net2&#x3D;torch.load(‘net.pkl’)</li>\n</ul>\n</li>\n<li>参数提取：<ul>\n<li>先搭建一模一样的网络n</li>\n<li>再n.load_state_dict(torch.load(‘net_params.pkl’))</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minibize-train-批数据训练\"><a href=\"#minibize-train-批数据训练\" class=\"headerlink\" title=\"minibize_train(批数据训练)\"></a>minibize_train(批数据训练)</h3><ul>\n<li>定义batch_size，feature,label</li>\n<li>定义数据库：torch_dataset&#x3D;Data.TensorDataset(x,y)</li>\n<li>定义loader：loader&#x3D;Data.DataLoader( dataset,batch,shuffle,num_workers)</li>\n<li>定义网络等</li>\n<li>训练： for epoch in range(3):<br>&emsp;&nbsp;&emsp;&emsp;&emsp;for step,(batch_x,batch_y) in enumerate(loader):</li>\n</ul>\n<h3 id=\"optimizer\"><a href=\"#optimizer\" class=\"headerlink\" title=\"optimizer\"></a>optimizer</h3><ul>\n<li>用Adam</li>\n</ul>\n<h3 id=\"cnn\"><a href=\"#cnn\" class=\"headerlink\" title=\"cnn\"></a>cnn</h3><ul>\n<li>下载数据集train_data,定义loader</li>\n</ul>\n"},{"_content":"(需要修改的地方)\n显示分类时修改source/category里的index:\n\ntitle: categories\ndate: 2023-07-20 10:18:50\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n\n\n- 换头像\ntheme/yilia/config文件\n看到：avatar: img/head.png\n将head.png放到：blog/themes/yilia/source/img\n将blog/config文件中post_asset_folder: true\n\n","source":"_drafts/yilia配置.md","raw":"(需要修改的地方)\n显示分类时修改source/category里的index:\n\ntitle: categories\ndate: 2023-07-20 10:18:50\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n\n\n- 换头像\ntheme/yilia/config文件\n看到：avatar: img/head.png\n将head.png放到：blog/themes/yilia/source/img\n将blog/config文件中post_asset_folder: true\n\n","slug":"yilia配置","published":0,"date":"2023-07-26T04:08:04.455Z","updated":"2024-01-18T04:47:39.780Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqr0006wovwdb0o9isv","content":"<p>(需要修改的地方)<br>显示分类时修改source&#x2F;category里的index:</p>\n<p>title: categories<br>date: 2023-07-20 10:18:50<br>type: “categories”<br>layout: “categories”<br>comments: false</p>\n<ul>\n<li>换头像<br>theme&#x2F;yilia&#x2F;config文件<br>看到：avatar: img&#x2F;head.png<br>将head.png放到：blog&#x2F;themes&#x2F;yilia&#x2F;source&#x2F;img<br>将blog&#x2F;config文件中post_asset_folder: true</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>(需要修改的地方)<br>显示分类时修改source&#x2F;category里的index:</p>\n<p>title: categories<br>date: 2023-07-20 10:18:50<br>type: “categories”<br>layout: “categories”<br>comments: false</p>\n<ul>\n<li>换头像<br>theme&#x2F;yilia&#x2F;config文件<br>看到：avatar: img&#x2F;head.png<br>将head.png放到：blog&#x2F;themes&#x2F;yilia&#x2F;source&#x2F;img<br>将blog&#x2F;config文件中post_asset_folder: true</li>\n</ul>\n"},{"title":"Linux入门-0配置","date":"2021-03-01T12:00:00.000Z","toc":true,"_content":"#\n\n<!-- more -->\n\n## 安装\n\n\n\n### 1 虚拟机\n### 2 [下载finalshell](https://www.hostbuf.com/downloads/finalshell_install.exe)\n### 3 连接finalshell\n1. 在linux中右键，打开终端\n\n2. 输入：ifconfig ,找到ens下的inet后面的数字，复制![](./img/linux/install/1.png)\n\n   ![](D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\1.png)\n1. 打开finalshell点击左上文件图标，点击新串口左上带加号的文件图标，点击ssh连接，输入自定义的名称，主机输入刚刚的复制的一串数字，用户名、密码为linux用户的，点击确定\n  ![](./img/linux/install/2.png)\n\n  ![](D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\2.png)\n### 4（windows中使用ubuntu）\n1. windows中搜索：windows功能，点击：启动或关闭windows功能，将：适用于Linux的子系统勾选并重启\n\n2. 微软应用商店搜索ubuntu并下载，win10还需下载terminal\n\n3. 在terminal中点击向下箭头，选择Ubuntu\n  ![](./img/linux/install/3.png)\n\n  ![](D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\3.png)\n\n4. 如果显示Error: 0x800701bc WSL 2 ?????????????????? 则返回windows命令行输入wsl --update\n\n5. 完成后打开Ubuntu窗口，输入用户名，密码，密码\n\n","source":"_posts/linux/Linux_0安装.md","raw":"---\ntitle: Linux入门-0配置\ndate: 2021-03-01 20:00:00\ntoc: true\ntags: [Linux]\ncategories: [Linux]\n\n---\n#\n\n<!-- more -->\n\n## 安装\n\n\n\n### 1 虚拟机\n### 2 [下载finalshell](https://www.hostbuf.com/downloads/finalshell_install.exe)\n### 3 连接finalshell\n1. 在linux中右键，打开终端\n\n2. 输入：ifconfig ,找到ens下的inet后面的数字，复制![](./img/linux/install/1.png)\n\n   ![](D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\1.png)\n1. 打开finalshell点击左上文件图标，点击新串口左上带加号的文件图标，点击ssh连接，输入自定义的名称，主机输入刚刚的复制的一串数字，用户名、密码为linux用户的，点击确定\n  ![](./img/linux/install/2.png)\n\n  ![](D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\2.png)\n### 4（windows中使用ubuntu）\n1. windows中搜索：windows功能，点击：启动或关闭windows功能，将：适用于Linux的子系统勾选并重启\n\n2. 微软应用商店搜索ubuntu并下载，win10还需下载terminal\n\n3. 在terminal中点击向下箭头，选择Ubuntu\n  ![](./img/linux/install/3.png)\n\n  ![](D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\3.png)\n\n4. 如果显示Error: 0x800701bc WSL 2 ?????????????????? 则返回windows命令行输入wsl --update\n\n5. 完成后打开Ubuntu窗口，输入用户名，密码，密码\n\n","slug":"linux/Linux_0安装","published":1,"updated":"2024-01-25T07:45:03.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqs0007wovw7euf2g9q","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-虚拟机\"><a href=\"#1-虚拟机\" class=\"headerlink\" title=\"1 虚拟机\"></a>1 虚拟机</h3><h3 id=\"2-下载finalshell\"><a href=\"#2-下载finalshell\" class=\"headerlink\" title=\"2 下载finalshell\"></a>2 <a href=\"https://www.hostbuf.com/downloads/finalshell_install.exe\">下载finalshell</a></h3><h3 id=\"3-连接finalshell\"><a href=\"#3-连接finalshell\" class=\"headerlink\" title=\"3 连接finalshell\"></a>3 连接finalshell</h3><ol>\n<li><p>在linux中右键，打开终端</p>\n</li>\n<li><p>输入：ifconfig ,找到ens下的inet后面的数字，复制<img src=\"/./img/linux/install/1.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\1.png\"></p>\n</li>\n<li><p>打开finalshell点击左上文件图标，点击新串口左上带加号的文件图标，点击ssh连接，输入自定义的名称，主机输入刚刚的复制的一串数字，用户名、密码为linux用户的，点击确定<br>  <img src=\"/./img/linux/install/2.png\"></p>\n</li>\n</ol>\n<p>  <img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\2.png\"></p>\n<h3 id=\"4（windows中使用ubuntu）\"><a href=\"#4（windows中使用ubuntu）\" class=\"headerlink\" title=\"4（windows中使用ubuntu）\"></a>4（windows中使用ubuntu）</h3><ol>\n<li><p>windows中搜索：windows功能，点击：启动或关闭windows功能，将：适用于Linux的子系统勾选并重启</p>\n</li>\n<li><p>微软应用商店搜索ubuntu并下载，win10还需下载terminal</p>\n</li>\n<li><p>在terminal中点击向下箭头，选择Ubuntu<br>  <img src=\"/./img/linux/install/3.png\"></p>\n</li>\n</ol>\n<p>  <img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\3.png\"></p>\n<ol start=\"4\">\n<li><p>如果显示Error: 0x800701bc WSL 2 ?????????????????? 则返回windows命令行输入wsl –update</p>\n</li>\n<li><p>完成后打开Ubuntu窗口，输入用户名，密码，密码</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-虚拟机\"><a href=\"#1-虚拟机\" class=\"headerlink\" title=\"1 虚拟机\"></a>1 虚拟机</h3><h3 id=\"2-下载finalshell\"><a href=\"#2-下载finalshell\" class=\"headerlink\" title=\"2 下载finalshell\"></a>2 <a href=\"https://www.hostbuf.com/downloads/finalshell_install.exe\">下载finalshell</a></h3><h3 id=\"3-连接finalshell\"><a href=\"#3-连接finalshell\" class=\"headerlink\" title=\"3 连接finalshell\"></a>3 连接finalshell</h3><ol>\n<li><p>在linux中右键，打开终端</p>\n</li>\n<li><p>输入：ifconfig ,找到ens下的inet后面的数字，复制<img src=\"/./img/linux/install/1.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\1.png\"></p>\n</li>\n<li><p>打开finalshell点击左上文件图标，点击新串口左上带加号的文件图标，点击ssh连接，输入自定义的名称，主机输入刚刚的复制的一串数字，用户名、密码为linux用户的，点击确定<br>  <img src=\"/./img/linux/install/2.png\"></p>\n</li>\n</ol>\n<p>  <img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\2.png\"></p>\n<h3 id=\"4（windows中使用ubuntu）\"><a href=\"#4（windows中使用ubuntu）\" class=\"headerlink\" title=\"4（windows中使用ubuntu）\"></a>4（windows中使用ubuntu）</h3><ol>\n<li><p>windows中搜索：windows功能，点击：启动或关闭windows功能，将：适用于Linux的子系统勾选并重启</p>\n</li>\n<li><p>微软应用商店搜索ubuntu并下载，win10还需下载terminal</p>\n</li>\n<li><p>在terminal中点击向下箭头，选择Ubuntu<br>  <img src=\"/./img/linux/install/3.png\"></p>\n</li>\n</ol>\n<p>  <img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\install\\3.png\"></p>\n<ol start=\"4\">\n<li><p>如果显示Error: 0x800701bc WSL 2 ?????????????????? 则返回windows命令行输入wsl –update</p>\n</li>\n<li><p>完成后打开Ubuntu窗口，输入用户名，密码，密码</p>\n</li>\n</ol>"},{"title":"Linux入门-2用户和权限","date":"2021-03-01T12:00:00.000Z","toc":true,"_content":"#\n\n<!--more-->\n\n### 1. su命令\nsu [-] [用户名]\n\n### 2. sudo命令（以管理员身份运行）\n\nsudo Linux命令\n- 先进入root用户\n- 再visudo，G到最后一行，o到末尾，再末尾输入：用户名 ALL=(ALL)      NOPASSWD: ALL\n- 再esc，:wq退出 \n\n### 3. 用户组\n- 创建：groupadd 组名\n- 删除：groupdel 组名\n\n### 4. 用户\n#### 4-1创建用户\nuseradd [-g -d] 用户名\n（useradd 用户名 -g 组名 -d 目录）\n- g 指定用户的组，不写则组与用户名同\n- d指定用户home目录位置\n#### 4-2 删除用户\nuserdel [-r] 用户名\n- r 删除home目录\n#### 4-3 查看用户所属组\nid [用户名]\n#### 4-4 修改用户所属组\nusermod -aG 组名 用户名\n#### 4-5 查看系统用户(组)\ngetent passwd或group\n- 用户显示的信息：用户名:密码:用户组:描述信息:HOME目录:执行终端（默认bash)\n- 组显示信息：组名:组认证:组ID\n\n### 5 权限\n\n![](./lmg/linux/user/8.png)\n\n![](D:\\blog\\themes\\yilia\\source\\img\\linux\\user\\8.png)","source":"_posts/linux/Linux_2.用户和权限.md","raw":"---\ntitle: Linux入门-2用户和权限\ndate: 2021-03-01 20:00:00\ntoc: true\ntags: [Linux]\ncategories: [Linux]\n\n---\n#\n\n<!--more-->\n\n### 1. su命令\nsu [-] [用户名]\n\n### 2. sudo命令（以管理员身份运行）\n\nsudo Linux命令\n- 先进入root用户\n- 再visudo，G到最后一行，o到末尾，再末尾输入：用户名 ALL=(ALL)      NOPASSWD: ALL\n- 再esc，:wq退出 \n\n### 3. 用户组\n- 创建：groupadd 组名\n- 删除：groupdel 组名\n\n### 4. 用户\n#### 4-1创建用户\nuseradd [-g -d] 用户名\n（useradd 用户名 -g 组名 -d 目录）\n- g 指定用户的组，不写则组与用户名同\n- d指定用户home目录位置\n#### 4-2 删除用户\nuserdel [-r] 用户名\n- r 删除home目录\n#### 4-3 查看用户所属组\nid [用户名]\n#### 4-4 修改用户所属组\nusermod -aG 组名 用户名\n#### 4-5 查看系统用户(组)\ngetent passwd或group\n- 用户显示的信息：用户名:密码:用户组:描述信息:HOME目录:执行终端（默认bash)\n- 组显示信息：组名:组认证:组ID\n\n### 5 权限\n\n![](./lmg/linux/user/8.png)\n\n![](D:\\blog\\themes\\yilia\\source\\img\\linux\\user\\8.png)","slug":"linux/Linux_2.用户和权限","published":1,"updated":"2024-01-25T11:03:05.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqt0008wovw9l6mhco8","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h3 id=\"1-su命令\"><a href=\"#1-su命令\" class=\"headerlink\" title=\"1. su命令\"></a>1. su命令</h3><p>su [-] [用户名]</p>\n<h3 id=\"2-sudo命令（以管理员身份运行）\"><a href=\"#2-sudo命令（以管理员身份运行）\" class=\"headerlink\" title=\"2. sudo命令（以管理员身份运行）\"></a>2. sudo命令（以管理员身份运行）</h3><p>sudo Linux命令</p>\n<ul>\n<li>先进入root用户</li>\n<li>再visudo，G到最后一行，o到末尾，再末尾输入：用户名 ALL&#x3D;(ALL)      NOPASSWD: ALL</li>\n<li>再esc，:wq退出</li>\n</ul>\n<h3 id=\"3-用户组\"><a href=\"#3-用户组\" class=\"headerlink\" title=\"3. 用户组\"></a>3. 用户组</h3><ul>\n<li>创建：groupadd 组名</li>\n<li>删除：groupdel 组名</li>\n</ul>\n<h3 id=\"4-用户\"><a href=\"#4-用户\" class=\"headerlink\" title=\"4. 用户\"></a>4. 用户</h3><h4 id=\"4-1创建用户\"><a href=\"#4-1创建用户\" class=\"headerlink\" title=\"4-1创建用户\"></a>4-1创建用户</h4><p>useradd [-g -d] 用户名<br>（useradd 用户名 -g 组名 -d 目录）</p>\n<ul>\n<li>g 指定用户的组，不写则组与用户名同</li>\n<li>d指定用户home目录位置</li>\n</ul>\n<h4 id=\"4-2-删除用户\"><a href=\"#4-2-删除用户\" class=\"headerlink\" title=\"4-2 删除用户\"></a>4-2 删除用户</h4><p>userdel [-r] 用户名</p>\n<ul>\n<li>r 删除home目录</li>\n</ul>\n<h4 id=\"4-3-查看用户所属组\"><a href=\"#4-3-查看用户所属组\" class=\"headerlink\" title=\"4-3 查看用户所属组\"></a>4-3 查看用户所属组</h4><p>id [用户名]</p>\n<h4 id=\"4-4-修改用户所属组\"><a href=\"#4-4-修改用户所属组\" class=\"headerlink\" title=\"4-4 修改用户所属组\"></a>4-4 修改用户所属组</h4><p>usermod -aG 组名 用户名</p>\n<h4 id=\"4-5-查看系统用户-组\"><a href=\"#4-5-查看系统用户-组\" class=\"headerlink\" title=\"4-5 查看系统用户(组)\"></a>4-5 查看系统用户(组)</h4><p>getent passwd或group</p>\n<ul>\n<li>用户显示的信息：用户名:密码:用户组:描述信息:HOME目录:执行终端（默认bash)</li>\n<li>组显示信息：组名:组认证:组ID</li>\n</ul>\n<h3 id=\"5-权限\"><a href=\"#5-权限\" class=\"headerlink\" title=\"5 权限\"></a>5 权限</h3><p><img src=\"/./lmg/linux/user/8.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\user\\8.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"1-su命令\"><a href=\"#1-su命令\" class=\"headerlink\" title=\"1. su命令\"></a>1. su命令</h3><p>su [-] [用户名]</p>\n<h3 id=\"2-sudo命令（以管理员身份运行）\"><a href=\"#2-sudo命令（以管理员身份运行）\" class=\"headerlink\" title=\"2. sudo命令（以管理员身份运行）\"></a>2. sudo命令（以管理员身份运行）</h3><p>sudo Linux命令</p>\n<ul>\n<li>先进入root用户</li>\n<li>再visudo，G到最后一行，o到末尾，再末尾输入：用户名 ALL&#x3D;(ALL)      NOPASSWD: ALL</li>\n<li>再esc，:wq退出</li>\n</ul>\n<h3 id=\"3-用户组\"><a href=\"#3-用户组\" class=\"headerlink\" title=\"3. 用户组\"></a>3. 用户组</h3><ul>\n<li>创建：groupadd 组名</li>\n<li>删除：groupdel 组名</li>\n</ul>\n<h3 id=\"4-用户\"><a href=\"#4-用户\" class=\"headerlink\" title=\"4. 用户\"></a>4. 用户</h3><h4 id=\"4-1创建用户\"><a href=\"#4-1创建用户\" class=\"headerlink\" title=\"4-1创建用户\"></a>4-1创建用户</h4><p>useradd [-g -d] 用户名<br>（useradd 用户名 -g 组名 -d 目录）</p>\n<ul>\n<li>g 指定用户的组，不写则组与用户名同</li>\n<li>d指定用户home目录位置</li>\n</ul>\n<h4 id=\"4-2-删除用户\"><a href=\"#4-2-删除用户\" class=\"headerlink\" title=\"4-2 删除用户\"></a>4-2 删除用户</h4><p>userdel [-r] 用户名</p>\n<ul>\n<li>r 删除home目录</li>\n</ul>\n<h4 id=\"4-3-查看用户所属组\"><a href=\"#4-3-查看用户所属组\" class=\"headerlink\" title=\"4-3 查看用户所属组\"></a>4-3 查看用户所属组</h4><p>id [用户名]</p>\n<h4 id=\"4-4-修改用户所属组\"><a href=\"#4-4-修改用户所属组\" class=\"headerlink\" title=\"4-4 修改用户所属组\"></a>4-4 修改用户所属组</h4><p>usermod -aG 组名 用户名</p>\n<h4 id=\"4-5-查看系统用户-组\"><a href=\"#4-5-查看系统用户-组\" class=\"headerlink\" title=\"4-5 查看系统用户(组)\"></a>4-5 查看系统用户(组)</h4><p>getent passwd或group</p>\n<ul>\n<li>用户显示的信息：用户名:密码:用户组:描述信息:HOME目录:执行终端（默认bash)</li>\n<li>组显示信息：组名:组认证:组ID</li>\n</ul>\n<h3 id=\"5-权限\"><a href=\"#5-权限\" class=\"headerlink\" title=\"5 权限\"></a>5 权限</h3><p><img src=\"/./lmg/linux/user/8.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\linux\\user\\8.png\"></p>"},{"title":"Linux入门-1基础命令","date":"2021-03-01T12:00:00.000Z","toc":true,"_content":"#\n\n<!--more-->\n\n## 1. 目录结构\n根目录：/\n/home/hellow/test.txt\n\n## 2. 小tip\n### 2-1 特殊符号\n- . 当前目录\n\n- .. 上级目录\n\n- ~ home\n- `作为命令执行\n### 2-2 进入root用户\n- 进入\n\nsu - root\n\n123456\n\n- 退出\nexit\n### 2-3管道符\n|\ncat 1.txt | grep \"hello\"\n\n### 2-4重定向符\n\\>：右边文件内容清空，左边内容写入文件\n\n\\>>：追加\n## 3. 命令\n命令 [选项] [参数]\n### 1. ls命令（显示内容）\nls [-a -l -h] [路径]\n- a: all，列出全部文件（包括隐藏文件）\n- l: list，以列表展现（权限，用户和用户组，大小，创建日期）\n- h: 以易于阅读的形式，列出文件大小（搭配-l)\n- 组合使用：如-la\n### 2. cd命令（change directory)\ncd [路径]\n\n- cd 回到用户HOME目录\n- cd ../.. 返回上两级\n- cd 路径\n### 3. pwd命令（print work directory)\npwd\n### 4. mkdir命令（make directory)\nmkdir [-p] 路径\n\n- 多层创建\n### 5. touch命令（创建文件）\ntouch 路径\n### 6. cat命令（查看文件）\ncat 路径\n### 7. more命令（查看文件）\nmore 路径（分页看，空格下一页，q退出）\n### 8. cp命令（copy)\ncp [-r] 源路径 目的地\n- r 递归，用于文件夹的复制\n### 9. mv命令（move)\nmv 源路径 目的地/（可重命名）\n### 10. rm命令（remove)\nrm [-r -f] 参数1 参数2...\n\n- r 递归，用于删除文件夹\n- f (force)强制删除\n- 支持通配符：test* 表示以test开头\n### 11. grep命令（文件中通过关键字搜索行）\ngrep [-n] \"关键字\" 文件路径\n\n- n：结果中显示行号\n- 关键字：用于查找\n- 路径：可做输入端口\n### 12. wc命令（文件内容统计）\nwc [-cmlw] 文件路径\n- c：统计bytes数量\n- m：统计字符数量\n- l：统计行数\n- w：统计单词数\n- 路径：可做输入端口\n### 13. which命令（查看命令的源文件）\nwhich Linux命令\n### 14. find命令（文件搜索）\nfind 起始路径 -name \"test*\"\nfind 起始路径 -size +100k(大于100kb)\n### 15. echo命令（打印）\necho 输出内容\n- echo `pwd`：将pwd作为命令执行\n### 16. tail命令（从尾部查看）\ntail [-f -数字] 路径\n- f 持续跟踪\n- 数字 查看多少行（默认10）\n\n## 4. vim编辑器\nvi 文件路径\n\nvim 文件路径\n\n![](./img/linux/commend/4.png)\n![](./img/linux/commend/5.png)\n![](./img/linux/commend/6.png)\n![](./img/linux/commend/7.png)\n![](../../../themes/yilia/source/img/linux/commend/4.png)\n![](../../../themes/yilia/source/img/linux/commend/5.png)\n![](../../../themes/yilia/source/img/linux/commend/6.png)\n![](../../../themes/yilia/source/img/linux/commend/7.png)","source":"_posts/linux/Linux_1.基础命令.md","raw":"---\ntitle: Linux入门-1基础命令\ndate: 2021-03-01 20:00:00\ntoc: true\ntags: [Linux]\ncategories: [Linux]\n---\n#\n\n<!--more-->\n\n## 1. 目录结构\n根目录：/\n/home/hellow/test.txt\n\n## 2. 小tip\n### 2-1 特殊符号\n- . 当前目录\n\n- .. 上级目录\n\n- ~ home\n- `作为命令执行\n### 2-2 进入root用户\n- 进入\n\nsu - root\n\n123456\n\n- 退出\nexit\n### 2-3管道符\n|\ncat 1.txt | grep \"hello\"\n\n### 2-4重定向符\n\\>：右边文件内容清空，左边内容写入文件\n\n\\>>：追加\n## 3. 命令\n命令 [选项] [参数]\n### 1. ls命令（显示内容）\nls [-a -l -h] [路径]\n- a: all，列出全部文件（包括隐藏文件）\n- l: list，以列表展现（权限，用户和用户组，大小，创建日期）\n- h: 以易于阅读的形式，列出文件大小（搭配-l)\n- 组合使用：如-la\n### 2. cd命令（change directory)\ncd [路径]\n\n- cd 回到用户HOME目录\n- cd ../.. 返回上两级\n- cd 路径\n### 3. pwd命令（print work directory)\npwd\n### 4. mkdir命令（make directory)\nmkdir [-p] 路径\n\n- 多层创建\n### 5. touch命令（创建文件）\ntouch 路径\n### 6. cat命令（查看文件）\ncat 路径\n### 7. more命令（查看文件）\nmore 路径（分页看，空格下一页，q退出）\n### 8. cp命令（copy)\ncp [-r] 源路径 目的地\n- r 递归，用于文件夹的复制\n### 9. mv命令（move)\nmv 源路径 目的地/（可重命名）\n### 10. rm命令（remove)\nrm [-r -f] 参数1 参数2...\n\n- r 递归，用于删除文件夹\n- f (force)强制删除\n- 支持通配符：test* 表示以test开头\n### 11. grep命令（文件中通过关键字搜索行）\ngrep [-n] \"关键字\" 文件路径\n\n- n：结果中显示行号\n- 关键字：用于查找\n- 路径：可做输入端口\n### 12. wc命令（文件内容统计）\nwc [-cmlw] 文件路径\n- c：统计bytes数量\n- m：统计字符数量\n- l：统计行数\n- w：统计单词数\n- 路径：可做输入端口\n### 13. which命令（查看命令的源文件）\nwhich Linux命令\n### 14. find命令（文件搜索）\nfind 起始路径 -name \"test*\"\nfind 起始路径 -size +100k(大于100kb)\n### 15. echo命令（打印）\necho 输出内容\n- echo `pwd`：将pwd作为命令执行\n### 16. tail命令（从尾部查看）\ntail [-f -数字] 路径\n- f 持续跟踪\n- 数字 查看多少行（默认10）\n\n## 4. vim编辑器\nvi 文件路径\n\nvim 文件路径\n\n![](./img/linux/commend/4.png)\n![](./img/linux/commend/5.png)\n![](./img/linux/commend/6.png)\n![](./img/linux/commend/7.png)\n![](../../../themes/yilia/source/img/linux/commend/4.png)\n![](../../../themes/yilia/source/img/linux/commend/5.png)\n![](../../../themes/yilia/source/img/linux/commend/6.png)\n![](../../../themes/yilia/source/img/linux/commend/7.png)","slug":"linux/Linux_1.基础命令","published":1,"updated":"2024-01-25T11:01:12.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqu000bwovw0ogt51pc","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h2 id=\"1-目录结构\"><a href=\"#1-目录结构\" class=\"headerlink\" title=\"1. 目录结构\"></a>1. 目录结构</h2><p>根目录：&#x2F;<br>&#x2F;home&#x2F;hellow&#x2F;test.txt</p>\n<h2 id=\"2-小tip\"><a href=\"#2-小tip\" class=\"headerlink\" title=\"2. 小tip\"></a>2. 小tip</h2><h3 id=\"2-1-特殊符号\"><a href=\"#2-1-特殊符号\" class=\"headerlink\" title=\"2-1 特殊符号\"></a>2-1 特殊符号</h3><ul>\n<li><p>. 当前目录</p>\n</li>\n<li><p>.. 上级目录</p>\n</li>\n<li><p>~ home</p>\n</li>\n<li><p>&#96;作为命令执行</p>\n</li>\n</ul>\n<h3 id=\"2-2-进入root用户\"><a href=\"#2-2-进入root用户\" class=\"headerlink\" title=\"2-2 进入root用户\"></a>2-2 进入root用户</h3><ul>\n<li>进入</li>\n</ul>\n<p>su - root</p>\n<p>123456</p>\n<ul>\n<li>退出<br>exit</li>\n</ul>\n<h3 id=\"2-3管道符\"><a href=\"#2-3管道符\" class=\"headerlink\" title=\"2-3管道符\"></a>2-3管道符</h3><p>|<br>cat 1.txt | grep “hello”</p>\n<h3 id=\"2-4重定向符\"><a href=\"#2-4重定向符\" class=\"headerlink\" title=\"2-4重定向符\"></a>2-4重定向符</h3><p>&gt;：右边文件内容清空，左边内容写入文件</p>\n<p>&gt;&gt;：追加</p>\n<h2 id=\"3-命令\"><a href=\"#3-命令\" class=\"headerlink\" title=\"3. 命令\"></a>3. 命令</h2><p>命令 [选项] [参数]</p>\n<h3 id=\"1-ls命令（显示内容）\"><a href=\"#1-ls命令（显示内容）\" class=\"headerlink\" title=\"1. ls命令（显示内容）\"></a>1. ls命令（显示内容）</h3><p>ls [-a -l -h] [路径]</p>\n<ul>\n<li>a: all，列出全部文件（包括隐藏文件）</li>\n<li>l: list，以列表展现（权限，用户和用户组，大小，创建日期）</li>\n<li>h: 以易于阅读的形式，列出文件大小（搭配-l)</li>\n<li>组合使用：如-la</li>\n</ul>\n<h3 id=\"2-cd命令（change-directory\"><a href=\"#2-cd命令（change-directory\" class=\"headerlink\" title=\"2. cd命令（change directory)\"></a>2. cd命令（change directory)</h3><p>cd [路径]</p>\n<ul>\n<li>cd 回到用户HOME目录</li>\n<li>cd ..&#x2F;.. 返回上两级</li>\n<li>cd 路径</li>\n</ul>\n<h3 id=\"3-pwd命令（print-work-directory\"><a href=\"#3-pwd命令（print-work-directory\" class=\"headerlink\" title=\"3. pwd命令（print work directory)\"></a>3. pwd命令（print work directory)</h3><p>pwd</p>\n<h3 id=\"4-mkdir命令（make-directory\"><a href=\"#4-mkdir命令（make-directory\" class=\"headerlink\" title=\"4. mkdir命令（make directory)\"></a>4. mkdir命令（make directory)</h3><p>mkdir [-p] 路径</p>\n<ul>\n<li>多层创建</li>\n</ul>\n<h3 id=\"5-touch命令（创建文件）\"><a href=\"#5-touch命令（创建文件）\" class=\"headerlink\" title=\"5. touch命令（创建文件）\"></a>5. touch命令（创建文件）</h3><p>touch 路径</p>\n<h3 id=\"6-cat命令（查看文件）\"><a href=\"#6-cat命令（查看文件）\" class=\"headerlink\" title=\"6. cat命令（查看文件）\"></a>6. cat命令（查看文件）</h3><p>cat 路径</p>\n<h3 id=\"7-more命令（查看文件）\"><a href=\"#7-more命令（查看文件）\" class=\"headerlink\" title=\"7. more命令（查看文件）\"></a>7. more命令（查看文件）</h3><p>more 路径（分页看，空格下一页，q退出）</p>\n<h3 id=\"8-cp命令（copy\"><a href=\"#8-cp命令（copy\" class=\"headerlink\" title=\"8. cp命令（copy)\"></a>8. cp命令（copy)</h3><p>cp [-r] 源路径 目的地</p>\n<ul>\n<li>r 递归，用于文件夹的复制</li>\n</ul>\n<h3 id=\"9-mv命令（move\"><a href=\"#9-mv命令（move\" class=\"headerlink\" title=\"9. mv命令（move)\"></a>9. mv命令（move)</h3><p>mv 源路径 目的地&#x2F;（可重命名）</p>\n<h3 id=\"10-rm命令（remove\"><a href=\"#10-rm命令（remove\" class=\"headerlink\" title=\"10. rm命令（remove)\"></a>10. rm命令（remove)</h3><p>rm [-r -f] 参数1 参数2…</p>\n<ul>\n<li>r 递归，用于删除文件夹</li>\n<li>f (force)强制删除</li>\n<li>支持通配符：test* 表示以test开头</li>\n</ul>\n<h3 id=\"11-grep命令（文件中通过关键字搜索行）\"><a href=\"#11-grep命令（文件中通过关键字搜索行）\" class=\"headerlink\" title=\"11. grep命令（文件中通过关键字搜索行）\"></a>11. grep命令（文件中通过关键字搜索行）</h3><p>grep [-n] “关键字” 文件路径</p>\n<ul>\n<li>n：结果中显示行号</li>\n<li>关键字：用于查找</li>\n<li>路径：可做输入端口</li>\n</ul>\n<h3 id=\"12-wc命令（文件内容统计）\"><a href=\"#12-wc命令（文件内容统计）\" class=\"headerlink\" title=\"12. wc命令（文件内容统计）\"></a>12. wc命令（文件内容统计）</h3><p>wc [-cmlw] 文件路径</p>\n<ul>\n<li>c：统计bytes数量</li>\n<li>m：统计字符数量</li>\n<li>l：统计行数</li>\n<li>w：统计单词数</li>\n<li>路径：可做输入端口</li>\n</ul>\n<h3 id=\"13-which命令（查看命令的源文件）\"><a href=\"#13-which命令（查看命令的源文件）\" class=\"headerlink\" title=\"13. which命令（查看命令的源文件）\"></a>13. which命令（查看命令的源文件）</h3><p>which Linux命令</p>\n<h3 id=\"14-find命令（文件搜索）\"><a href=\"#14-find命令（文件搜索）\" class=\"headerlink\" title=\"14. find命令（文件搜索）\"></a>14. find命令（文件搜索）</h3><p>find 起始路径 -name “test*”<br>find 起始路径 -size +100k(大于100kb)</p>\n<h3 id=\"15-echo命令（打印）\"><a href=\"#15-echo命令（打印）\" class=\"headerlink\" title=\"15. echo命令（打印）\"></a>15. echo命令（打印）</h3><p>echo 输出内容</p>\n<ul>\n<li>echo <code>pwd</code>：将pwd作为命令执行</li>\n</ul>\n<h3 id=\"16-tail命令（从尾部查看）\"><a href=\"#16-tail命令（从尾部查看）\" class=\"headerlink\" title=\"16. tail命令（从尾部查看）\"></a>16. tail命令（从尾部查看）</h3><p>tail [-f -数字] 路径</p>\n<ul>\n<li>f 持续跟踪</li>\n<li>数字 查看多少行（默认10）</li>\n</ul>\n<h2 id=\"4-vim编辑器\"><a href=\"#4-vim编辑器\" class=\"headerlink\" title=\"4. vim编辑器\"></a>4. vim编辑器</h2><p>vi 文件路径</p>\n<p>vim 文件路径</p>\n<p><img src=\"/./img/linux/commend/4.png\"><br><img src=\"/./img/linux/commend/5.png\"><br><img src=\"/./img/linux/commend/6.png\"><br><img src=\"/./img/linux/commend/7.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/4.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/5.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/6.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/7.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h2 id=\"1-目录结构\"><a href=\"#1-目录结构\" class=\"headerlink\" title=\"1. 目录结构\"></a>1. 目录结构</h2><p>根目录：&#x2F;<br>&#x2F;home&#x2F;hellow&#x2F;test.txt</p>\n<h2 id=\"2-小tip\"><a href=\"#2-小tip\" class=\"headerlink\" title=\"2. 小tip\"></a>2. 小tip</h2><h3 id=\"2-1-特殊符号\"><a href=\"#2-1-特殊符号\" class=\"headerlink\" title=\"2-1 特殊符号\"></a>2-1 特殊符号</h3><ul>\n<li><p>. 当前目录</p>\n</li>\n<li><p>.. 上级目录</p>\n</li>\n<li><p>~ home</p>\n</li>\n<li><p>&#96;作为命令执行</p>\n</li>\n</ul>\n<h3 id=\"2-2-进入root用户\"><a href=\"#2-2-进入root用户\" class=\"headerlink\" title=\"2-2 进入root用户\"></a>2-2 进入root用户</h3><ul>\n<li>进入</li>\n</ul>\n<p>su - root</p>\n<p>123456</p>\n<ul>\n<li>退出<br>exit</li>\n</ul>\n<h3 id=\"2-3管道符\"><a href=\"#2-3管道符\" class=\"headerlink\" title=\"2-3管道符\"></a>2-3管道符</h3><p>|<br>cat 1.txt | grep “hello”</p>\n<h3 id=\"2-4重定向符\"><a href=\"#2-4重定向符\" class=\"headerlink\" title=\"2-4重定向符\"></a>2-4重定向符</h3><p>&gt;：右边文件内容清空，左边内容写入文件</p>\n<p>&gt;&gt;：追加</p>\n<h2 id=\"3-命令\"><a href=\"#3-命令\" class=\"headerlink\" title=\"3. 命令\"></a>3. 命令</h2><p>命令 [选项] [参数]</p>\n<h3 id=\"1-ls命令（显示内容）\"><a href=\"#1-ls命令（显示内容）\" class=\"headerlink\" title=\"1. ls命令（显示内容）\"></a>1. ls命令（显示内容）</h3><p>ls [-a -l -h] [路径]</p>\n<ul>\n<li>a: all，列出全部文件（包括隐藏文件）</li>\n<li>l: list，以列表展现（权限，用户和用户组，大小，创建日期）</li>\n<li>h: 以易于阅读的形式，列出文件大小（搭配-l)</li>\n<li>组合使用：如-la</li>\n</ul>\n<h3 id=\"2-cd命令（change-directory\"><a href=\"#2-cd命令（change-directory\" class=\"headerlink\" title=\"2. cd命令（change directory)\"></a>2. cd命令（change directory)</h3><p>cd [路径]</p>\n<ul>\n<li>cd 回到用户HOME目录</li>\n<li>cd ..&#x2F;.. 返回上两级</li>\n<li>cd 路径</li>\n</ul>\n<h3 id=\"3-pwd命令（print-work-directory\"><a href=\"#3-pwd命令（print-work-directory\" class=\"headerlink\" title=\"3. pwd命令（print work directory)\"></a>3. pwd命令（print work directory)</h3><p>pwd</p>\n<h3 id=\"4-mkdir命令（make-directory\"><a href=\"#4-mkdir命令（make-directory\" class=\"headerlink\" title=\"4. mkdir命令（make directory)\"></a>4. mkdir命令（make directory)</h3><p>mkdir [-p] 路径</p>\n<ul>\n<li>多层创建</li>\n</ul>\n<h3 id=\"5-touch命令（创建文件）\"><a href=\"#5-touch命令（创建文件）\" class=\"headerlink\" title=\"5. touch命令（创建文件）\"></a>5. touch命令（创建文件）</h3><p>touch 路径</p>\n<h3 id=\"6-cat命令（查看文件）\"><a href=\"#6-cat命令（查看文件）\" class=\"headerlink\" title=\"6. cat命令（查看文件）\"></a>6. cat命令（查看文件）</h3><p>cat 路径</p>\n<h3 id=\"7-more命令（查看文件）\"><a href=\"#7-more命令（查看文件）\" class=\"headerlink\" title=\"7. more命令（查看文件）\"></a>7. more命令（查看文件）</h3><p>more 路径（分页看，空格下一页，q退出）</p>\n<h3 id=\"8-cp命令（copy\"><a href=\"#8-cp命令（copy\" class=\"headerlink\" title=\"8. cp命令（copy)\"></a>8. cp命令（copy)</h3><p>cp [-r] 源路径 目的地</p>\n<ul>\n<li>r 递归，用于文件夹的复制</li>\n</ul>\n<h3 id=\"9-mv命令（move\"><a href=\"#9-mv命令（move\" class=\"headerlink\" title=\"9. mv命令（move)\"></a>9. mv命令（move)</h3><p>mv 源路径 目的地&#x2F;（可重命名）</p>\n<h3 id=\"10-rm命令（remove\"><a href=\"#10-rm命令（remove\" class=\"headerlink\" title=\"10. rm命令（remove)\"></a>10. rm命令（remove)</h3><p>rm [-r -f] 参数1 参数2…</p>\n<ul>\n<li>r 递归，用于删除文件夹</li>\n<li>f (force)强制删除</li>\n<li>支持通配符：test* 表示以test开头</li>\n</ul>\n<h3 id=\"11-grep命令（文件中通过关键字搜索行）\"><a href=\"#11-grep命令（文件中通过关键字搜索行）\" class=\"headerlink\" title=\"11. grep命令（文件中通过关键字搜索行）\"></a>11. grep命令（文件中通过关键字搜索行）</h3><p>grep [-n] “关键字” 文件路径</p>\n<ul>\n<li>n：结果中显示行号</li>\n<li>关键字：用于查找</li>\n<li>路径：可做输入端口</li>\n</ul>\n<h3 id=\"12-wc命令（文件内容统计）\"><a href=\"#12-wc命令（文件内容统计）\" class=\"headerlink\" title=\"12. wc命令（文件内容统计）\"></a>12. wc命令（文件内容统计）</h3><p>wc [-cmlw] 文件路径</p>\n<ul>\n<li>c：统计bytes数量</li>\n<li>m：统计字符数量</li>\n<li>l：统计行数</li>\n<li>w：统计单词数</li>\n<li>路径：可做输入端口</li>\n</ul>\n<h3 id=\"13-which命令（查看命令的源文件）\"><a href=\"#13-which命令（查看命令的源文件）\" class=\"headerlink\" title=\"13. which命令（查看命令的源文件）\"></a>13. which命令（查看命令的源文件）</h3><p>which Linux命令</p>\n<h3 id=\"14-find命令（文件搜索）\"><a href=\"#14-find命令（文件搜索）\" class=\"headerlink\" title=\"14. find命令（文件搜索）\"></a>14. find命令（文件搜索）</h3><p>find 起始路径 -name “test*”<br>find 起始路径 -size +100k(大于100kb)</p>\n<h3 id=\"15-echo命令（打印）\"><a href=\"#15-echo命令（打印）\" class=\"headerlink\" title=\"15. echo命令（打印）\"></a>15. echo命令（打印）</h3><p>echo 输出内容</p>\n<ul>\n<li>echo <code>pwd</code>：将pwd作为命令执行</li>\n</ul>\n<h3 id=\"16-tail命令（从尾部查看）\"><a href=\"#16-tail命令（从尾部查看）\" class=\"headerlink\" title=\"16. tail命令（从尾部查看）\"></a>16. tail命令（从尾部查看）</h3><p>tail [-f -数字] 路径</p>\n<ul>\n<li>f 持续跟踪</li>\n<li>数字 查看多少行（默认10）</li>\n</ul>\n<h2 id=\"4-vim编辑器\"><a href=\"#4-vim编辑器\" class=\"headerlink\" title=\"4. vim编辑器\"></a>4. vim编辑器</h2><p>vi 文件路径</p>\n<p>vim 文件路径</p>\n<p><img src=\"/./img/linux/commend/4.png\"><br><img src=\"/./img/linux/commend/5.png\"><br><img src=\"/./img/linux/commend/6.png\"><br><img src=\"/./img/linux/commend/7.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/4.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/5.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/6.png\"><br><img src=\"/../../../themes/yilia/source/img/linux/commend/7.png\"></p>"},{"title":"Hello World","date":"2014-12-24T15:57:18.000Z","toc":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hexo/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2014-12-24 23:57:18\ntoc: true\ncategories: [博客]\ntags: [博客,hexo]\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hexo/hello-world","published":1,"updated":"2023-10-23T09:55:30.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqv000cwovwels30r1i","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"hexo博客搭建","toc":true,"_content":"## 1.安装git\n\n <!-- more --> \n\n- 输入网址https://npm.taobao.org/mirrors/git-for-windows/（你也可以去官网下载）\n- 点击你想下载的版本\n![](../../../themes/yilia/source/img/hexo/6.png)\n![](./img/hexo/6.png)\n- 下载exe文件\n![](../../../themes/yilia/source/img/hexo/7.png)\n![](./img/hexo/7.png)\n- 一路next即可\n![](../../../themes/yilia/source/img/hexo/8.png)\n![](./img/hexo/8.png)\n## 2.安装nodejs\n- 输入网址：nodejs.org\n- 按装左边长期支持版本\n![](../../../themes/yilia/source/img/hexo/1.png)\n![](./img/hexo/1.png)\n- 安装点击next即可\n## 3.通过cnpm安装hexo\n- 进入控制台使用管理员身份\n- 输入：npm install -g cnpm --registry=https://registry.npm.taobao.org<回车>\n![](../../../themes/yilia/source/img/hexo/2.png)\n![](./img/hexo/2.png)\n- 输入：cnpm install -g hexo-cli<回车>\n## 4.搭建博客\n- 创建一个空文件夹(d:/blog/test)\n- 进入该文件夹：cd /d d:/blog/test<回车>\n- 初始化：hexo init<回车>\n- 打开：hexo s<回车>\n- 浏览器访问：http://localhost:4000/\n- 命令行点击ctr+c输入y<回车>即可关闭\n## 5.操作博客\n- 新建博客：hexo n \"test1.md\"(保存在了blog\\test\\source\\_posts\\test1.md)（也可直接在该目录下新建.md文件）\n- 编辑博客：使用vscode/typora等\n## 6.将博客部署到GitHub\n- 登录GitHub\n- 新建仓库\n![](../../../themes/yilia/source/img/hexo/3.png)\n![](./img/hexo/3.png)\n- 注意前面部分要跟自己的名字一样（以后通过\n![](../../../themes/yilia/source/img/hexo/4.png)\n![](./img/hexo/4.png)\n- 安装插件：命令行输入：cnpm install --save hexo-deployer-git\n- 找到_config.yml文件,将最后面加上：\n```\ntype: git\n  repo: git@github.com:lankeren035/lankeren035.github.io.git\n  branch: main\n```\n- 输入hexo d即可部署到远端（在test文件夹下）\n- 浏览器输入仓库名：lankeren035.github.io即可访问\n\n## 7.换主题\n- 找到目标主题：github.com/litten/hexo-theme-yilia\n- 命令行输入：git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia则会在theme下创建yilia文件夹\n- 在_config.yml中将theme后的改为yilia\n![](../../../themes/yilia/source/img/hexo/5.png)\n![](./img/hexo/5.png)\n- hexo g再hexo s通过本地看看\n- 最后hexo d再把远端的也更新了","source":"_posts/hexo/hexo搭建.md","raw":"---\ntitle: hexo博客搭建\ntoc: true\ncategories: [博客]\ntags: [博客,hexo]\n---\n## 1.安装git\n\n <!-- more --> \n\n- 输入网址https://npm.taobao.org/mirrors/git-for-windows/（你也可以去官网下载）\n- 点击你想下载的版本\n![](../../../themes/yilia/source/img/hexo/6.png)\n![](./img/hexo/6.png)\n- 下载exe文件\n![](../../../themes/yilia/source/img/hexo/7.png)\n![](./img/hexo/7.png)\n- 一路next即可\n![](../../../themes/yilia/source/img/hexo/8.png)\n![](./img/hexo/8.png)\n## 2.安装nodejs\n- 输入网址：nodejs.org\n- 按装左边长期支持版本\n![](../../../themes/yilia/source/img/hexo/1.png)\n![](./img/hexo/1.png)\n- 安装点击next即可\n## 3.通过cnpm安装hexo\n- 进入控制台使用管理员身份\n- 输入：npm install -g cnpm --registry=https://registry.npm.taobao.org<回车>\n![](../../../themes/yilia/source/img/hexo/2.png)\n![](./img/hexo/2.png)\n- 输入：cnpm install -g hexo-cli<回车>\n## 4.搭建博客\n- 创建一个空文件夹(d:/blog/test)\n- 进入该文件夹：cd /d d:/blog/test<回车>\n- 初始化：hexo init<回车>\n- 打开：hexo s<回车>\n- 浏览器访问：http://localhost:4000/\n- 命令行点击ctr+c输入y<回车>即可关闭\n## 5.操作博客\n- 新建博客：hexo n \"test1.md\"(保存在了blog\\test\\source\\_posts\\test1.md)（也可直接在该目录下新建.md文件）\n- 编辑博客：使用vscode/typora等\n## 6.将博客部署到GitHub\n- 登录GitHub\n- 新建仓库\n![](../../../themes/yilia/source/img/hexo/3.png)\n![](./img/hexo/3.png)\n- 注意前面部分要跟自己的名字一样（以后通过\n![](../../../themes/yilia/source/img/hexo/4.png)\n![](./img/hexo/4.png)\n- 安装插件：命令行输入：cnpm install --save hexo-deployer-git\n- 找到_config.yml文件,将最后面加上：\n```\ntype: git\n  repo: git@github.com:lankeren035/lankeren035.github.io.git\n  branch: main\n```\n- 输入hexo d即可部署到远端（在test文件夹下）\n- 浏览器输入仓库名：lankeren035.github.io即可访问\n\n## 7.换主题\n- 找到目标主题：github.com/litten/hexo-theme-yilia\n- 命令行输入：git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia则会在theme下创建yilia文件夹\n- 在_config.yml中将theme后的改为yilia\n![](../../../themes/yilia/source/img/hexo/5.png)\n![](./img/hexo/5.png)\n- hexo g再hexo s通过本地看看\n- 最后hexo d再把远端的也更新了","slug":"hexo/hexo搭建","published":1,"date":"2023-07-25T05:05:51.620Z","updated":"2024-01-25T11:34:17.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqw000fwovwcpx04w2j","content":"<h2 id=\"1-安装git\"><a href=\"#1-安装git\" class=\"headerlink\" title=\"1.安装git\"></a>1.安装git</h2> <span id=\"more\"></span> \n\n<ul>\n<li>输入网址<a href=\"https://npm.taobao.org/mirrors/git-for-windows/%EF%BC%88%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%8E%BB%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89\">https://npm.taobao.org/mirrors/git-for-windows/（你也可以去官网下载）</a></li>\n<li>点击你想下载的版本<br><img src=\"/../../../themes/yilia/source/img/hexo/6.png\"><br><img src=\"/./img/hexo/6.png\"></li>\n<li>下载exe文件<br><img src=\"/../../../themes/yilia/source/img/hexo/7.png\"><br><img src=\"/./img/hexo/7.png\"></li>\n<li>一路next即可<br><img src=\"/../../../themes/yilia/source/img/hexo/8.png\"><br><img src=\"/./img/hexo/8.png\"></li>\n</ul>\n<h2 id=\"2-安装nodejs\"><a href=\"#2-安装nodejs\" class=\"headerlink\" title=\"2.安装nodejs\"></a>2.安装nodejs</h2><ul>\n<li>输入网址：nodejs.org</li>\n<li>按装左边长期支持版本<br><img src=\"/../../../themes/yilia/source/img/hexo/1.png\"><br><img src=\"/./img/hexo/1.png\"></li>\n<li>安装点击next即可</li>\n</ul>\n<h2 id=\"3-通过cnpm安装hexo\"><a href=\"#3-通过cnpm安装hexo\" class=\"headerlink\" title=\"3.通过cnpm安装hexo\"></a>3.通过cnpm安装hexo</h2><ul>\n<li>进入控制台使用管理员身份</li>\n<li>输入：npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>&lt;回车&gt;<br><img src=\"/../../../themes/yilia/source/img/hexo/2.png\"><br><img src=\"/./img/hexo/2.png\"></li>\n<li>输入：cnpm install -g hexo-cli&lt;回车&gt;</li>\n</ul>\n<h2 id=\"4-搭建博客\"><a href=\"#4-搭建博客\" class=\"headerlink\" title=\"4.搭建博客\"></a>4.搭建博客</h2><ul>\n<li>创建一个空文件夹(d:&#x2F;blog&#x2F;test)</li>\n<li>进入该文件夹：cd &#x2F;d d:&#x2F;blog&#x2F;test&lt;回车&gt;</li>\n<li>初始化：hexo init&lt;回车&gt;</li>\n<li>打开：hexo s&lt;回车&gt;</li>\n<li>浏览器访问：<a href=\"http://localhost:4000/\">http://localhost:4000/</a></li>\n<li>命令行点击ctr+c输入y&lt;回车&gt;即可关闭</li>\n</ul>\n<h2 id=\"5-操作博客\"><a href=\"#5-操作博客\" class=\"headerlink\" title=\"5.操作博客\"></a>5.操作博客</h2><ul>\n<li>新建博客：hexo n “test1.md”(保存在了blog\\test\\source_posts\\test1.md)（也可直接在该目录下新建.md文件）</li>\n<li>编辑博客：使用vscode&#x2F;typora等</li>\n</ul>\n<h2 id=\"6-将博客部署到GitHub\"><a href=\"#6-将博客部署到GitHub\" class=\"headerlink\" title=\"6.将博客部署到GitHub\"></a>6.将博客部署到GitHub</h2><ul>\n<li>登录GitHub</li>\n<li>新建仓库<br><img src=\"/../../../themes/yilia/source/img/hexo/3.png\"><br><img src=\"/./img/hexo/3.png\"></li>\n<li>注意前面部分要跟自己的名字一样（以后通过<br><img src=\"/../../../themes/yilia/source/img/hexo/4.png\"><br><img src=\"/./img/hexo/4.png\"></li>\n<li>安装插件：命令行输入：cnpm install –save hexo-deployer-git</li>\n<li>找到_config.yml文件,将最后面加上：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">  repo: git@github.com:lankeren035/lankeren035.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure></li>\n<li>输入hexo d即可部署到远端（在test文件夹下）</li>\n<li>浏览器输入仓库名：lankeren035.github.io即可访问</li>\n</ul>\n<h2 id=\"7-换主题\"><a href=\"#7-换主题\" class=\"headerlink\" title=\"7.换主题\"></a>7.换主题</h2><ul>\n<li>找到目标主题：github.com&#x2F;litten&#x2F;hexo-theme-yilia</li>\n<li>命令行输入：git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes&#x2F;yilia则会在theme下创建yilia文件夹</li>\n<li>在_config.yml中将theme后的改为yilia<br><img src=\"/../../../themes/yilia/source/img/hexo/5.png\"><br><img src=\"/./img/hexo/5.png\"></li>\n<li>hexo g再hexo s通过本地看看</li>\n<li>最后hexo d再把远端的也更新了</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-安装git\"><a href=\"#1-安装git\" class=\"headerlink\" title=\"1.安装git\"></a>1.安装git</h2>","more":"<ul>\n<li>输入网址<a href=\"https://npm.taobao.org/mirrors/git-for-windows/%EF%BC%88%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%8E%BB%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%EF%BC%89\">https://npm.taobao.org/mirrors/git-for-windows/（你也可以去官网下载）</a></li>\n<li>点击你想下载的版本<br><img src=\"/../../../themes/yilia/source/img/hexo/6.png\"><br><img src=\"/./img/hexo/6.png\"></li>\n<li>下载exe文件<br><img src=\"/../../../themes/yilia/source/img/hexo/7.png\"><br><img src=\"/./img/hexo/7.png\"></li>\n<li>一路next即可<br><img src=\"/../../../themes/yilia/source/img/hexo/8.png\"><br><img src=\"/./img/hexo/8.png\"></li>\n</ul>\n<h2 id=\"2-安装nodejs\"><a href=\"#2-安装nodejs\" class=\"headerlink\" title=\"2.安装nodejs\"></a>2.安装nodejs</h2><ul>\n<li>输入网址：nodejs.org</li>\n<li>按装左边长期支持版本<br><img src=\"/../../../themes/yilia/source/img/hexo/1.png\"><br><img src=\"/./img/hexo/1.png\"></li>\n<li>安装点击next即可</li>\n</ul>\n<h2 id=\"3-通过cnpm安装hexo\"><a href=\"#3-通过cnpm安装hexo\" class=\"headerlink\" title=\"3.通过cnpm安装hexo\"></a>3.通过cnpm安装hexo</h2><ul>\n<li>进入控制台使用管理员身份</li>\n<li>输入：npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>&lt;回车&gt;<br><img src=\"/../../../themes/yilia/source/img/hexo/2.png\"><br><img src=\"/./img/hexo/2.png\"></li>\n<li>输入：cnpm install -g hexo-cli&lt;回车&gt;</li>\n</ul>\n<h2 id=\"4-搭建博客\"><a href=\"#4-搭建博客\" class=\"headerlink\" title=\"4.搭建博客\"></a>4.搭建博客</h2><ul>\n<li>创建一个空文件夹(d:&#x2F;blog&#x2F;test)</li>\n<li>进入该文件夹：cd &#x2F;d d:&#x2F;blog&#x2F;test&lt;回车&gt;</li>\n<li>初始化：hexo init&lt;回车&gt;</li>\n<li>打开：hexo s&lt;回车&gt;</li>\n<li>浏览器访问：<a href=\"http://localhost:4000/\">http://localhost:4000/</a></li>\n<li>命令行点击ctr+c输入y&lt;回车&gt;即可关闭</li>\n</ul>\n<h2 id=\"5-操作博客\"><a href=\"#5-操作博客\" class=\"headerlink\" title=\"5.操作博客\"></a>5.操作博客</h2><ul>\n<li>新建博客：hexo n “test1.md”(保存在了blog\\test\\source_posts\\test1.md)（也可直接在该目录下新建.md文件）</li>\n<li>编辑博客：使用vscode&#x2F;typora等</li>\n</ul>\n<h2 id=\"6-将博客部署到GitHub\"><a href=\"#6-将博客部署到GitHub\" class=\"headerlink\" title=\"6.将博客部署到GitHub\"></a>6.将博客部署到GitHub</h2><ul>\n<li>登录GitHub</li>\n<li>新建仓库<br><img src=\"/../../../themes/yilia/source/img/hexo/3.png\"><br><img src=\"/./img/hexo/3.png\"></li>\n<li>注意前面部分要跟自己的名字一样（以后通过<br><img src=\"/../../../themes/yilia/source/img/hexo/4.png\"><br><img src=\"/./img/hexo/4.png\"></li>\n<li>安装插件：命令行输入：cnpm install –save hexo-deployer-git</li>\n<li>找到_config.yml文件,将最后面加上：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">  repo: git@github.com:lankeren035/lankeren035.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure></li>\n<li>输入hexo d即可部署到远端（在test文件夹下）</li>\n<li>浏览器输入仓库名：lankeren035.github.io即可访问</li>\n</ul>\n<h2 id=\"7-换主题\"><a href=\"#7-换主题\" class=\"headerlink\" title=\"7.换主题\"></a>7.换主题</h2><ul>\n<li>找到目标主题：github.com&#x2F;litten&#x2F;hexo-theme-yilia</li>\n<li>命令行输入：git clone <a href=\"https://github.com/litten/hexo-theme-yilia.git\">https://github.com/litten/hexo-theme-yilia.git</a> themes&#x2F;yilia则会在theme下创建yilia文件夹</li>\n<li>在_config.yml中将theme后的改为yilia<br><img src=\"/../../../themes/yilia/source/img/hexo/5.png\"><br><img src=\"/./img/hexo/5.png\"></li>\n<li>hexo g再hexo s通过本地看看</li>\n<li>最后hexo d再把远端的也更新了</li>\n</ul>"},{"title":"微信小程序基础","date":"2021-03-01T12:00:00.000Z","toc":true,"_content":"#\n\n<!--more-->\n\n## 1.总体结构\n\n### （1）概述\n#### 1)项目结构\n- page：存放所有页面\n- utils: 存放工具模块（如格式化时间的自定义模块）\n- app.js: 项目入口\n- app.json: 项目全局配置\n- app.wxss: 项目全局样式\n- project.config.json: 项目配置文件\n- sitemap.json: 配置小程序及其页面是否允许被微信索引\n\n#### 2）页面组成\n- .js文件：页面脚本，存放页面数据、事件处理函数等\n- .json文件：配置文件，配置窗口外观、表现等\n- .wxml文件：模板结构文件\n- .wxss文件: 样式表文件\n\n### （2）详述\n#### 1）json文件\n json是一种数据格式，在开发中json总是以配置文件的形式出现。\n|app.json|afadsf|\n|-------------------|------|\n|project.config.json|\n|sitemap.json|\n|每个页面的json|","source":"_posts/wechartapp/weixin.md","raw":"---\ntitle: 微信小程序基础\ndate: 2021-03-01 20:00:00\ntoc: true\ntags: [微信小程序]\ncategories: [微信小程序]\n\n---\n#\n\n<!--more-->\n\n## 1.总体结构\n\n### （1）概述\n#### 1)项目结构\n- page：存放所有页面\n- utils: 存放工具模块（如格式化时间的自定义模块）\n- app.js: 项目入口\n- app.json: 项目全局配置\n- app.wxss: 项目全局样式\n- project.config.json: 项目配置文件\n- sitemap.json: 配置小程序及其页面是否允许被微信索引\n\n#### 2）页面组成\n- .js文件：页面脚本，存放页面数据、事件处理函数等\n- .json文件：配置文件，配置窗口外观、表现等\n- .wxml文件：模板结构文件\n- .wxss文件: 样式表文件\n\n### （2）详述\n#### 1）json文件\n json是一种数据格式，在开发中json总是以配置文件的形式出现。\n|app.json|afadsf|\n|-------------------|------|\n|project.config.json|\n|sitemap.json|\n|每个页面的json|","slug":"wechartapp/weixin","published":1,"updated":"2024-01-18T04:36:36.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqx000hwovw8j9b0lgj","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h2 id=\"1-总体结构\"><a href=\"#1-总体结构\" class=\"headerlink\" title=\"1.总体结构\"></a>1.总体结构</h2><h3 id=\"（1）概述\"><a href=\"#（1）概述\" class=\"headerlink\" title=\"（1）概述\"></a>（1）概述</h3><h4 id=\"1-项目结构\"><a href=\"#1-项目结构\" class=\"headerlink\" title=\"1)项目结构\"></a>1)项目结构</h4><ul>\n<li>page：存放所有页面</li>\n<li>utils: 存放工具模块（如格式化时间的自定义模块）</li>\n<li>app.js: 项目入口</li>\n<li>app.json: 项目全局配置</li>\n<li>app.wxss: 项目全局样式</li>\n<li>project.config.json: 项目配置文件</li>\n<li>sitemap.json: 配置小程序及其页面是否允许被微信索引</li>\n</ul>\n<h4 id=\"2）页面组成\"><a href=\"#2）页面组成\" class=\"headerlink\" title=\"2）页面组成\"></a>2）页面组成</h4><ul>\n<li>.js文件：页面脚本，存放页面数据、事件处理函数等</li>\n<li>.json文件：配置文件，配置窗口外观、表现等</li>\n<li>.wxml文件：模板结构文件</li>\n<li>.wxss文件: 样式表文件</li>\n</ul>\n<h3 id=\"（2）详述\"><a href=\"#（2）详述\" class=\"headerlink\" title=\"（2）详述\"></a>（2）详述</h3><h4 id=\"1）json文件\"><a href=\"#1）json文件\" class=\"headerlink\" title=\"1）json文件\"></a>1）json文件</h4><p> json是一种数据格式，在开发中json总是以配置文件的形式出现。</p>\n<table>\n<thead>\n<tr>\n<th>app.json</th>\n<th>afadsf</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>project.config.json</td>\n<td></td>\n</tr>\n<tr>\n<td>sitemap.json</td>\n<td></td>\n</tr>\n<tr>\n<td>每个页面的json</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h2 id=\"1-总体结构\"><a href=\"#1-总体结构\" class=\"headerlink\" title=\"1.总体结构\"></a>1.总体结构</h2><h3 id=\"（1）概述\"><a href=\"#（1）概述\" class=\"headerlink\" title=\"（1）概述\"></a>（1）概述</h3><h4 id=\"1-项目结构\"><a href=\"#1-项目结构\" class=\"headerlink\" title=\"1)项目结构\"></a>1)项目结构</h4><ul>\n<li>page：存放所有页面</li>\n<li>utils: 存放工具模块（如格式化时间的自定义模块）</li>\n<li>app.js: 项目入口</li>\n<li>app.json: 项目全局配置</li>\n<li>app.wxss: 项目全局样式</li>\n<li>project.config.json: 项目配置文件</li>\n<li>sitemap.json: 配置小程序及其页面是否允许被微信索引</li>\n</ul>\n<h4 id=\"2）页面组成\"><a href=\"#2）页面组成\" class=\"headerlink\" title=\"2）页面组成\"></a>2）页面组成</h4><ul>\n<li>.js文件：页面脚本，存放页面数据、事件处理函数等</li>\n<li>.json文件：配置文件，配置窗口外观、表现等</li>\n<li>.wxml文件：模板结构文件</li>\n<li>.wxss文件: 样式表文件</li>\n</ul>\n<h3 id=\"（2）详述\"><a href=\"#（2）详述\" class=\"headerlink\" title=\"（2）详述\"></a>（2）详述</h3><h4 id=\"1）json文件\"><a href=\"#1）json文件\" class=\"headerlink\" title=\"1）json文件\"></a>1）json文件</h4><p> json是一种数据格式，在开发中json总是以配置文件的形式出现。</p>\n<table>\n<thead>\n<tr>\n<th>app.json</th>\n<th>afadsf</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>project.config.json</td>\n<td></td>\n</tr>\n<tr>\n<td>sitemap.json</td>\n<td></td>\n</tr>\n<tr>\n<td>每个页面的json</td>\n<td></td>\n</tr>\n</tbody></table>"},{"title":"1. 数据结构基本概念","date":"2023-01-31T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n![数据结构]<!--more-->\n(/img/datastruct/1_extract/1.png)\n![](../../../../themes/yilia/source/img/datastruct/1_extract/1.png)\n\n\n## 1.1 数据\n- 信息的载体，被计算机程序识别和处理的符号的集合\n## 1.2 数据元素\n- 数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。\n- 例如一个人的信息\n## 1.3 数据项\n- 数据不可分割的最小单位。\n- 例如姓名字段\n## 1.4 数据对象\n- 性质相同的数据元素的集合，是数据的一个子集。\n- 例如所有人的信息\n\n|概念|定义|举例|\n|:---:|:---:|:---:|\n|数据|信息的载体，被计算机程序识别和处理的符号的集合|一个人的信息|\n|数据元素|数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。|一个人的信息|\n|数据项|数据不可分割的最小单位。|姓名字段|\n|数据对象|性质相同的数据元素的集合，是数据的一个子集。|所有人的信息|\n\n\n## 1.5 数据结构\n- 相互之间存在一种或多种特定关系的数据元素的集合。\n- 例如所有人的信息按照年龄排序\n## 1.6 逻辑结构\n- 数据对象中数据元素之间的相互关系\n- 例如所有人的信息按照年龄排序\n## 1.7 物理结构\n- 数据的逻辑结构在计算机中的存储形式\n- 例如所有人的信息按照年龄排序，存储在数组中\n## 1.8 数据类型\n- 一组性质相同的值的集合及定义在此集合上的一些操作的总称\n- 例如整数类型，浮点数类型\n## 1.9 抽象数据类型\n- 一个数学模型及定义在该模型上的一组操作\n- 例如整数类型，浮点数类型\n## 1.10 算法\n- 为解决特定问题而规定的一个有限长的操作序列\n- 例如排序算法\n## 1.11 数据类型\n- 一个值的集合和定义在此集合上的一组操作的总称\n\n|原子类型|其值不可再分的数据类型|\n|:---:|:---:|\n|结构类型|其值可再分为若干成分的数据类型|\n## 1.12 抽象数据类型\n- 一个数学模型及定义在该模型上的一组操作\n---\n\n# 2 数据结构三要素\n## 2.1 逻辑结构\n- 数据元素之间的逻辑关系\n- 集合、线性、树形、图形\n\n## 2.2 数据运算\n- 增删查改\n\n## 2.3 物理结构（存储结构）\n- 用计算机表示数据元素的逻辑关系\n插入表格：\n\n|顺序存储|链式存储|索引存储|散列存储|\n|:---:|:---:|:---:|:---:|\n|数组|链表|索引表|散列表|\n|逻辑相邻则物理相邻|逻辑相邻则物理不一定相邻|附加索引表|根据关键字得到存储地址|\n|![](../../../../themes/yilia/source/img/datastruct/1_extract/2.png)![数据结构](/img/datastruct/1_extract/2.png)|![](../../../../themes/yilia/source/img/datastruct/1_extract/3.png)![数据结构](/img/datastruct/1_extract/3.png)|![](../../../../themes/yilia/source/img/datastruct/1_extract/4.png)![数据结构](/img/datastruct/1_extract/4.png)||\n---\n# 3 算法的基本概念\n![](../../../../themes/yilia/source/img/datastruct/1_extract/5.png)![数据结构](/img/datastruct/1_extract/5.png)\n## 3.1 啥是算法\n- 对特定问题求解步骤的一种描述\n- 指令的有限序列\n- 每条指令表示一个或多个操作\n## 3.2 算法特性\n- 有穷性\n\n   ·执行有限步骤后结束\n   \n   ·每一步都可在有限时间内完成\n\n- 确定性\n \n   ·每一步都有确定的含义\n   \n   ·对于相同的输入只能得出相同的输出\n\n- 可行性\n\n   ·可以通过已经实现的基本运算执行有限次得出结果\n\n- 输入\n\n   ·有0个或多个输入\n\n- 输出\n\n   ·至少有1个或多个输出\n\n## 3.3 算法设计的要求\n- 正确性\n\n   ·算法能够得出正确的结果\n\n- 可读性\n\n   ·算法要便于阅读、理解和交流\n\n- 健壮性\n\n   ·算法对不合理数据输入有适当的处理能力\n\n- 时间效率高和存储量低\n\n   ·算法执行时间短，占用存储空间少\n\n## 3.4 算法效率的度量方法\n### 3.4.1 事后统计方法\n\n- 运行时间取决于计算机的硬件、软件环境\n\n### 3.4.2 事前分析估算方法\n- O(1)<O(log<sub>n</sub>)<O(n)<O(nlog<sub>n</sub>)<O(n<sup>2</sup>)<O(n<sup>3</sup>)<O(2<sup>n</sup>)<O(n!)<O(n<sup>n</sup>)\n- 时间复杂度\n![](../../../../themes/yilia/source/img/datastruct/1_extract/8.png)![数据结构](/img/datastruct/1_extract/8.png)\n- 空间复杂度\n![](../../../../themes/yilia/source/img/datastruct/1_extract/9.png)![数据结构](/img/datastruct/1_extract/9.png)\n- 例子：\n![](../../../../themes/yilia/source/img/datastruct/1_extract/6.png)![数据结构](/img/datastruct/1_extract/6.png)\n\n![](../../../../themes/yilia/source/img/datastruct/1_extract/7.png)![数据结构](/img/datastruct/1_extract/7.png)","source":"_posts/datastruct/1_extract/1_基础.md","raw":"---\ntitle: 1. 数据结构基本概念\ndate: 2023-02-01 00:00:00\ntags: [数据结构]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n![数据结构]<!--more-->\n(/img/datastruct/1_extract/1.png)\n![](../../../../themes/yilia/source/img/datastruct/1_extract/1.png)\n\n\n## 1.1 数据\n- 信息的载体，被计算机程序识别和处理的符号的集合\n## 1.2 数据元素\n- 数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。\n- 例如一个人的信息\n## 1.3 数据项\n- 数据不可分割的最小单位。\n- 例如姓名字段\n## 1.4 数据对象\n- 性质相同的数据元素的集合，是数据的一个子集。\n- 例如所有人的信息\n\n|概念|定义|举例|\n|:---:|:---:|:---:|\n|数据|信息的载体，被计算机程序识别和处理的符号的集合|一个人的信息|\n|数据元素|数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。|一个人的信息|\n|数据项|数据不可分割的最小单位。|姓名字段|\n|数据对象|性质相同的数据元素的集合，是数据的一个子集。|所有人的信息|\n\n\n## 1.5 数据结构\n- 相互之间存在一种或多种特定关系的数据元素的集合。\n- 例如所有人的信息按照年龄排序\n## 1.6 逻辑结构\n- 数据对象中数据元素之间的相互关系\n- 例如所有人的信息按照年龄排序\n## 1.7 物理结构\n- 数据的逻辑结构在计算机中的存储形式\n- 例如所有人的信息按照年龄排序，存储在数组中\n## 1.8 数据类型\n- 一组性质相同的值的集合及定义在此集合上的一些操作的总称\n- 例如整数类型，浮点数类型\n## 1.9 抽象数据类型\n- 一个数学模型及定义在该模型上的一组操作\n- 例如整数类型，浮点数类型\n## 1.10 算法\n- 为解决特定问题而规定的一个有限长的操作序列\n- 例如排序算法\n## 1.11 数据类型\n- 一个值的集合和定义在此集合上的一组操作的总称\n\n|原子类型|其值不可再分的数据类型|\n|:---:|:---:|\n|结构类型|其值可再分为若干成分的数据类型|\n## 1.12 抽象数据类型\n- 一个数学模型及定义在该模型上的一组操作\n---\n\n# 2 数据结构三要素\n## 2.1 逻辑结构\n- 数据元素之间的逻辑关系\n- 集合、线性、树形、图形\n\n## 2.2 数据运算\n- 增删查改\n\n## 2.3 物理结构（存储结构）\n- 用计算机表示数据元素的逻辑关系\n插入表格：\n\n|顺序存储|链式存储|索引存储|散列存储|\n|:---:|:---:|:---:|:---:|\n|数组|链表|索引表|散列表|\n|逻辑相邻则物理相邻|逻辑相邻则物理不一定相邻|附加索引表|根据关键字得到存储地址|\n|![](../../../../themes/yilia/source/img/datastruct/1_extract/2.png)![数据结构](/img/datastruct/1_extract/2.png)|![](../../../../themes/yilia/source/img/datastruct/1_extract/3.png)![数据结构](/img/datastruct/1_extract/3.png)|![](../../../../themes/yilia/source/img/datastruct/1_extract/4.png)![数据结构](/img/datastruct/1_extract/4.png)||\n---\n# 3 算法的基本概念\n![](../../../../themes/yilia/source/img/datastruct/1_extract/5.png)![数据结构](/img/datastruct/1_extract/5.png)\n## 3.1 啥是算法\n- 对特定问题求解步骤的一种描述\n- 指令的有限序列\n- 每条指令表示一个或多个操作\n## 3.2 算法特性\n- 有穷性\n\n   ·执行有限步骤后结束\n   \n   ·每一步都可在有限时间内完成\n\n- 确定性\n \n   ·每一步都有确定的含义\n   \n   ·对于相同的输入只能得出相同的输出\n\n- 可行性\n\n   ·可以通过已经实现的基本运算执行有限次得出结果\n\n- 输入\n\n   ·有0个或多个输入\n\n- 输出\n\n   ·至少有1个或多个输出\n\n## 3.3 算法设计的要求\n- 正确性\n\n   ·算法能够得出正确的结果\n\n- 可读性\n\n   ·算法要便于阅读、理解和交流\n\n- 健壮性\n\n   ·算法对不合理数据输入有适当的处理能力\n\n- 时间效率高和存储量低\n\n   ·算法执行时间短，占用存储空间少\n\n## 3.4 算法效率的度量方法\n### 3.4.1 事后统计方法\n\n- 运行时间取决于计算机的硬件、软件环境\n\n### 3.4.2 事前分析估算方法\n- O(1)<O(log<sub>n</sub>)<O(n)<O(nlog<sub>n</sub>)<O(n<sup>2</sup>)<O(n<sup>3</sup>)<O(2<sup>n</sup>)<O(n!)<O(n<sup>n</sup>)\n- 时间复杂度\n![](../../../../themes/yilia/source/img/datastruct/1_extract/8.png)![数据结构](/img/datastruct/1_extract/8.png)\n- 空间复杂度\n![](../../../../themes/yilia/source/img/datastruct/1_extract/9.png)![数据结构](/img/datastruct/1_extract/9.png)\n- 例子：\n![](../../../../themes/yilia/source/img/datastruct/1_extract/6.png)![数据结构](/img/datastruct/1_extract/6.png)\n\n![](../../../../themes/yilia/source/img/datastruct/1_extract/7.png)![数据结构](/img/datastruct/1_extract/7.png)","slug":"datastruct/1_extract/1_基础","published":1,"updated":"2023-10-23T11:59:15.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclqy000jwovwgqqfgwom","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<p>![数据结构]<!--more--><br>(&#x2F;img&#x2F;datastruct&#x2F;1_extract&#x2F;1.png)<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/1.png\"></p>\n<h2 id=\"1-1-数据\"><a href=\"#1-1-数据\" class=\"headerlink\" title=\"1.1 数据\"></a>1.1 数据</h2><ul>\n<li>信息的载体，被计算机程序识别和处理的符号的集合</li>\n</ul>\n<h2 id=\"1-2-数据元素\"><a href=\"#1-2-数据元素\" class=\"headerlink\" title=\"1.2 数据元素\"></a>1.2 数据元素</h2><ul>\n<li>数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。</li>\n<li>例如一个人的信息</li>\n</ul>\n<h2 id=\"1-3-数据项\"><a href=\"#1-3-数据项\" class=\"headerlink\" title=\"1.3 数据项\"></a>1.3 数据项</h2><ul>\n<li>数据不可分割的最小单位。</li>\n<li>例如姓名字段</li>\n</ul>\n<h2 id=\"1-4-数据对象\"><a href=\"#1-4-数据对象\" class=\"headerlink\" title=\"1.4 数据对象\"></a>1.4 数据对象</h2><ul>\n<li>性质相同的数据元素的集合，是数据的一个子集。</li>\n<li>例如所有人的信息</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">概念</th>\n<th align=\"center\">定义</th>\n<th align=\"center\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据</td>\n<td align=\"center\">信息的载体，被计算机程序识别和处理的符号的集合</td>\n<td align=\"center\">一个人的信息</td>\n</tr>\n<tr>\n<td align=\"center\">数据元素</td>\n<td align=\"center\">数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。</td>\n<td align=\"center\">一个人的信息</td>\n</tr>\n<tr>\n<td align=\"center\">数据项</td>\n<td align=\"center\">数据不可分割的最小单位。</td>\n<td align=\"center\">姓名字段</td>\n</tr>\n<tr>\n<td align=\"center\">数据对象</td>\n<td align=\"center\">性质相同的数据元素的集合，是数据的一个子集。</td>\n<td align=\"center\">所有人的信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"1-5-数据结构\"><a href=\"#1-5-数据结构\" class=\"headerlink\" title=\"1.5 数据结构\"></a>1.5 数据结构</h2><ul>\n<li>相互之间存在一种或多种特定关系的数据元素的集合。</li>\n<li>例如所有人的信息按照年龄排序</li>\n</ul>\n<h2 id=\"1-6-逻辑结构\"><a href=\"#1-6-逻辑结构\" class=\"headerlink\" title=\"1.6 逻辑结构\"></a>1.6 逻辑结构</h2><ul>\n<li>数据对象中数据元素之间的相互关系</li>\n<li>例如所有人的信息按照年龄排序</li>\n</ul>\n<h2 id=\"1-7-物理结构\"><a href=\"#1-7-物理结构\" class=\"headerlink\" title=\"1.7 物理结构\"></a>1.7 物理结构</h2><ul>\n<li>数据的逻辑结构在计算机中的存储形式</li>\n<li>例如所有人的信息按照年龄排序，存储在数组中</li>\n</ul>\n<h2 id=\"1-8-数据类型\"><a href=\"#1-8-数据类型\" class=\"headerlink\" title=\"1.8 数据类型\"></a>1.8 数据类型</h2><ul>\n<li>一组性质相同的值的集合及定义在此集合上的一些操作的总称</li>\n<li>例如整数类型，浮点数类型</li>\n</ul>\n<h2 id=\"1-9-抽象数据类型\"><a href=\"#1-9-抽象数据类型\" class=\"headerlink\" title=\"1.9 抽象数据类型\"></a>1.9 抽象数据类型</h2><ul>\n<li>一个数学模型及定义在该模型上的一组操作</li>\n<li>例如整数类型，浮点数类型</li>\n</ul>\n<h2 id=\"1-10-算法\"><a href=\"#1-10-算法\" class=\"headerlink\" title=\"1.10 算法\"></a>1.10 算法</h2><ul>\n<li>为解决特定问题而规定的一个有限长的操作序列</li>\n<li>例如排序算法</li>\n</ul>\n<h2 id=\"1-11-数据类型\"><a href=\"#1-11-数据类型\" class=\"headerlink\" title=\"1.11 数据类型\"></a>1.11 数据类型</h2><ul>\n<li>一个值的集合和定义在此集合上的一组操作的总称</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">原子类型</th>\n<th align=\"center\">其值不可再分的数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">结构类型</td>\n<td align=\"center\">其值可再分为若干成分的数据类型</td>\n</tr>\n</tbody></table>\n<h2 id=\"1-12-抽象数据类型\"><a href=\"#1-12-抽象数据类型\" class=\"headerlink\" title=\"1.12 抽象数据类型\"></a>1.12 抽象数据类型</h2><ul>\n<li>一个数学模型及定义在该模型上的一组操作</li>\n</ul>\n<hr>\n<h1 id=\"2-数据结构三要素\"><a href=\"#2-数据结构三要素\" class=\"headerlink\" title=\"2 数据结构三要素\"></a>2 数据结构三要素</h1><h2 id=\"2-1-逻辑结构\"><a href=\"#2-1-逻辑结构\" class=\"headerlink\" title=\"2.1 逻辑结构\"></a>2.1 逻辑结构</h2><ul>\n<li>数据元素之间的逻辑关系</li>\n<li>集合、线性、树形、图形</li>\n</ul>\n<h2 id=\"2-2-数据运算\"><a href=\"#2-2-数据运算\" class=\"headerlink\" title=\"2.2 数据运算\"></a>2.2 数据运算</h2><ul>\n<li>增删查改</li>\n</ul>\n<h2 id=\"2-3-物理结构（存储结构）\"><a href=\"#2-3-物理结构（存储结构）\" class=\"headerlink\" title=\"2.3 物理结构（存储结构）\"></a>2.3 物理结构（存储结构）</h2><ul>\n<li>用计算机表示数据元素的逻辑关系<br>插入表格：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">顺序存储</th>\n<th align=\"center\">链式存储</th>\n<th align=\"center\">索引存储</th>\n<th align=\"center\">散列存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数组</td>\n<td align=\"center\">链表</td>\n<td align=\"center\">索引表</td>\n<td align=\"center\">散列表</td>\n</tr>\n<tr>\n<td align=\"center\">逻辑相邻则物理相邻</td>\n<td align=\"center\">逻辑相邻则物理不一定相邻</td>\n<td align=\"center\">附加索引表</td>\n<td align=\"center\">根据关键字得到存储地址</td>\n</tr>\n<tr>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/2.png\"><img src=\"/img/datastruct/1_extract/2.png\" alt=\"数据结构\"></td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/3.png\"><img src=\"/img/datastruct/1_extract/3.png\" alt=\"数据结构\"></td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/4.png\"><img src=\"/img/datastruct/1_extract/4.png\" alt=\"数据结构\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"3-算法的基本概念\"><a href=\"#3-算法的基本概念\" class=\"headerlink\" title=\"3 算法的基本概念\"></a>3 算法的基本概念</h1><p><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/5.png\"><img src=\"/img/datastruct/1_extract/5.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-1-啥是算法\"><a href=\"#3-1-啥是算法\" class=\"headerlink\" title=\"3.1 啥是算法\"></a>3.1 啥是算法</h2><ul>\n<li>对特定问题求解步骤的一种描述</li>\n<li>指令的有限序列</li>\n<li>每条指令表示一个或多个操作</li>\n</ul>\n<h2 id=\"3-2-算法特性\"><a href=\"#3-2-算法特性\" class=\"headerlink\" title=\"3.2 算法特性\"></a>3.2 算法特性</h2><ul>\n<li><p>有穷性</p>\n<p> ·执行有限步骤后结束</p>\n<p> ·每一步都可在有限时间内完成</p>\n</li>\n<li><p>确定性</p>\n<p> ·每一步都有确定的含义</p>\n<p> ·对于相同的输入只能得出相同的输出</p>\n</li>\n<li><p>可行性</p>\n<p> ·可以通过已经实现的基本运算执行有限次得出结果</p>\n</li>\n<li><p>输入</p>\n<p> ·有0个或多个输入</p>\n</li>\n<li><p>输出</p>\n<p> ·至少有1个或多个输出</p>\n</li>\n</ul>\n<h2 id=\"3-3-算法设计的要求\"><a href=\"#3-3-算法设计的要求\" class=\"headerlink\" title=\"3.3 算法设计的要求\"></a>3.3 算法设计的要求</h2><ul>\n<li><p>正确性</p>\n<p> ·算法能够得出正确的结果</p>\n</li>\n<li><p>可读性</p>\n<p> ·算法要便于阅读、理解和交流</p>\n</li>\n<li><p>健壮性</p>\n<p> ·算法对不合理数据输入有适当的处理能力</p>\n</li>\n<li><p>时间效率高和存储量低</p>\n<p> ·算法执行时间短，占用存储空间少</p>\n</li>\n</ul>\n<h2 id=\"3-4-算法效率的度量方法\"><a href=\"#3-4-算法效率的度量方法\" class=\"headerlink\" title=\"3.4 算法效率的度量方法\"></a>3.4 算法效率的度量方法</h2><h3 id=\"3-4-1-事后统计方法\"><a href=\"#3-4-1-事后统计方法\" class=\"headerlink\" title=\"3.4.1 事后统计方法\"></a>3.4.1 事后统计方法</h3><ul>\n<li>运行时间取决于计算机的硬件、软件环境</li>\n</ul>\n<h3 id=\"3-4-2-事前分析估算方法\"><a href=\"#3-4-2-事前分析估算方法\" class=\"headerlink\" title=\"3.4.2 事前分析估算方法\"></a>3.4.2 事前分析估算方法</h3><ul>\n<li>O(1)&lt;O(log<sub>n</sub>)&lt;O(n)&lt;O(nlog<sub>n</sub>)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</li>\n<li>时间复杂度<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/8.png\"><img src=\"/img/datastruct/1_extract/8.png\" alt=\"数据结构\"></li>\n<li>空间复杂度<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/9.png\"><img src=\"/img/datastruct/1_extract/9.png\" alt=\"数据结构\"></li>\n<li>例子：<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/6.png\"><img src=\"/img/datastruct/1_extract/6.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/7.png\"><img src=\"/img/datastruct/1_extract/7.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p>![数据结构]<!--more--><br>(&#x2F;img&#x2F;datastruct&#x2F;1_extract&#x2F;1.png)<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/1.png\"></p>\n<h2 id=\"1-1-数据\"><a href=\"#1-1-数据\" class=\"headerlink\" title=\"1.1 数据\"></a>1.1 数据</h2><ul>\n<li>信息的载体，被计算机程序识别和处理的符号的集合</li>\n</ul>\n<h2 id=\"1-2-数据元素\"><a href=\"#1-2-数据元素\" class=\"headerlink\" title=\"1.2 数据元素\"></a>1.2 数据元素</h2><ul>\n<li>数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。</li>\n<li>例如一个人的信息</li>\n</ul>\n<h2 id=\"1-3-数据项\"><a href=\"#1-3-数据项\" class=\"headerlink\" title=\"1.3 数据项\"></a>1.3 数据项</h2><ul>\n<li>数据不可分割的最小单位。</li>\n<li>例如姓名字段</li>\n</ul>\n<h2 id=\"1-4-数据对象\"><a href=\"#1-4-数据对象\" class=\"headerlink\" title=\"1.4 数据对象\"></a>1.4 数据对象</h2><ul>\n<li>性质相同的数据元素的集合，是数据的一个子集。</li>\n<li>例如所有人的信息</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">概念</th>\n<th align=\"center\">定义</th>\n<th align=\"center\">举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据</td>\n<td align=\"center\">信息的载体，被计算机程序识别和处理的符号的集合</td>\n<td align=\"center\">一个人的信息</td>\n</tr>\n<tr>\n<td align=\"center\">数据元素</td>\n<td align=\"center\">数据的基本单位，常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成。</td>\n<td align=\"center\">一个人的信息</td>\n</tr>\n<tr>\n<td align=\"center\">数据项</td>\n<td align=\"center\">数据不可分割的最小单位。</td>\n<td align=\"center\">姓名字段</td>\n</tr>\n<tr>\n<td align=\"center\">数据对象</td>\n<td align=\"center\">性质相同的数据元素的集合，是数据的一个子集。</td>\n<td align=\"center\">所有人的信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"1-5-数据结构\"><a href=\"#1-5-数据结构\" class=\"headerlink\" title=\"1.5 数据结构\"></a>1.5 数据结构</h2><ul>\n<li>相互之间存在一种或多种特定关系的数据元素的集合。</li>\n<li>例如所有人的信息按照年龄排序</li>\n</ul>\n<h2 id=\"1-6-逻辑结构\"><a href=\"#1-6-逻辑结构\" class=\"headerlink\" title=\"1.6 逻辑结构\"></a>1.6 逻辑结构</h2><ul>\n<li>数据对象中数据元素之间的相互关系</li>\n<li>例如所有人的信息按照年龄排序</li>\n</ul>\n<h2 id=\"1-7-物理结构\"><a href=\"#1-7-物理结构\" class=\"headerlink\" title=\"1.7 物理结构\"></a>1.7 物理结构</h2><ul>\n<li>数据的逻辑结构在计算机中的存储形式</li>\n<li>例如所有人的信息按照年龄排序，存储在数组中</li>\n</ul>\n<h2 id=\"1-8-数据类型\"><a href=\"#1-8-数据类型\" class=\"headerlink\" title=\"1.8 数据类型\"></a>1.8 数据类型</h2><ul>\n<li>一组性质相同的值的集合及定义在此集合上的一些操作的总称</li>\n<li>例如整数类型，浮点数类型</li>\n</ul>\n<h2 id=\"1-9-抽象数据类型\"><a href=\"#1-9-抽象数据类型\" class=\"headerlink\" title=\"1.9 抽象数据类型\"></a>1.9 抽象数据类型</h2><ul>\n<li>一个数学模型及定义在该模型上的一组操作</li>\n<li>例如整数类型，浮点数类型</li>\n</ul>\n<h2 id=\"1-10-算法\"><a href=\"#1-10-算法\" class=\"headerlink\" title=\"1.10 算法\"></a>1.10 算法</h2><ul>\n<li>为解决特定问题而规定的一个有限长的操作序列</li>\n<li>例如排序算法</li>\n</ul>\n<h2 id=\"1-11-数据类型\"><a href=\"#1-11-数据类型\" class=\"headerlink\" title=\"1.11 数据类型\"></a>1.11 数据类型</h2><ul>\n<li>一个值的集合和定义在此集合上的一组操作的总称</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">原子类型</th>\n<th align=\"center\">其值不可再分的数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">结构类型</td>\n<td align=\"center\">其值可再分为若干成分的数据类型</td>\n</tr>\n</tbody></table>\n<h2 id=\"1-12-抽象数据类型\"><a href=\"#1-12-抽象数据类型\" class=\"headerlink\" title=\"1.12 抽象数据类型\"></a>1.12 抽象数据类型</h2><ul>\n<li>一个数学模型及定义在该模型上的一组操作</li>\n</ul>\n<hr>\n<h1 id=\"2-数据结构三要素\"><a href=\"#2-数据结构三要素\" class=\"headerlink\" title=\"2 数据结构三要素\"></a>2 数据结构三要素</h1><h2 id=\"2-1-逻辑结构\"><a href=\"#2-1-逻辑结构\" class=\"headerlink\" title=\"2.1 逻辑结构\"></a>2.1 逻辑结构</h2><ul>\n<li>数据元素之间的逻辑关系</li>\n<li>集合、线性、树形、图形</li>\n</ul>\n<h2 id=\"2-2-数据运算\"><a href=\"#2-2-数据运算\" class=\"headerlink\" title=\"2.2 数据运算\"></a>2.2 数据运算</h2><ul>\n<li>增删查改</li>\n</ul>\n<h2 id=\"2-3-物理结构（存储结构）\"><a href=\"#2-3-物理结构（存储结构）\" class=\"headerlink\" title=\"2.3 物理结构（存储结构）\"></a>2.3 物理结构（存储结构）</h2><ul>\n<li>用计算机表示数据元素的逻辑关系<br>插入表格：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">顺序存储</th>\n<th align=\"center\">链式存储</th>\n<th align=\"center\">索引存储</th>\n<th align=\"center\">散列存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数组</td>\n<td align=\"center\">链表</td>\n<td align=\"center\">索引表</td>\n<td align=\"center\">散列表</td>\n</tr>\n<tr>\n<td align=\"center\">逻辑相邻则物理相邻</td>\n<td align=\"center\">逻辑相邻则物理不一定相邻</td>\n<td align=\"center\">附加索引表</td>\n<td align=\"center\">根据关键字得到存储地址</td>\n</tr>\n<tr>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/2.png\"><img src=\"/img/datastruct/1_extract/2.png\" alt=\"数据结构\"></td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/3.png\"><img src=\"/img/datastruct/1_extract/3.png\" alt=\"数据结构\"></td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/4.png\"><img src=\"/img/datastruct/1_extract/4.png\" alt=\"数据结构\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"3-算法的基本概念\"><a href=\"#3-算法的基本概念\" class=\"headerlink\" title=\"3 算法的基本概念\"></a>3 算法的基本概念</h1><p><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/5.png\"><img src=\"/img/datastruct/1_extract/5.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-1-啥是算法\"><a href=\"#3-1-啥是算法\" class=\"headerlink\" title=\"3.1 啥是算法\"></a>3.1 啥是算法</h2><ul>\n<li>对特定问题求解步骤的一种描述</li>\n<li>指令的有限序列</li>\n<li>每条指令表示一个或多个操作</li>\n</ul>\n<h2 id=\"3-2-算法特性\"><a href=\"#3-2-算法特性\" class=\"headerlink\" title=\"3.2 算法特性\"></a>3.2 算法特性</h2><ul>\n<li><p>有穷性</p>\n<p> ·执行有限步骤后结束</p>\n<p> ·每一步都可在有限时间内完成</p>\n</li>\n<li><p>确定性</p>\n<p> ·每一步都有确定的含义</p>\n<p> ·对于相同的输入只能得出相同的输出</p>\n</li>\n<li><p>可行性</p>\n<p> ·可以通过已经实现的基本运算执行有限次得出结果</p>\n</li>\n<li><p>输入</p>\n<p> ·有0个或多个输入</p>\n</li>\n<li><p>输出</p>\n<p> ·至少有1个或多个输出</p>\n</li>\n</ul>\n<h2 id=\"3-3-算法设计的要求\"><a href=\"#3-3-算法设计的要求\" class=\"headerlink\" title=\"3.3 算法设计的要求\"></a>3.3 算法设计的要求</h2><ul>\n<li><p>正确性</p>\n<p> ·算法能够得出正确的结果</p>\n</li>\n<li><p>可读性</p>\n<p> ·算法要便于阅读、理解和交流</p>\n</li>\n<li><p>健壮性</p>\n<p> ·算法对不合理数据输入有适当的处理能力</p>\n</li>\n<li><p>时间效率高和存储量低</p>\n<p> ·算法执行时间短，占用存储空间少</p>\n</li>\n</ul>\n<h2 id=\"3-4-算法效率的度量方法\"><a href=\"#3-4-算法效率的度量方法\" class=\"headerlink\" title=\"3.4 算法效率的度量方法\"></a>3.4 算法效率的度量方法</h2><h3 id=\"3-4-1-事后统计方法\"><a href=\"#3-4-1-事后统计方法\" class=\"headerlink\" title=\"3.4.1 事后统计方法\"></a>3.4.1 事后统计方法</h3><ul>\n<li>运行时间取决于计算机的硬件、软件环境</li>\n</ul>\n<h3 id=\"3-4-2-事前分析估算方法\"><a href=\"#3-4-2-事前分析估算方法\" class=\"headerlink\" title=\"3.4.2 事前分析估算方法\"></a>3.4.2 事前分析估算方法</h3><ul>\n<li>O(1)&lt;O(log<sub>n</sub>)&lt;O(n)&lt;O(nlog<sub>n</sub>)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</li>\n<li>时间复杂度<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/8.png\"><img src=\"/img/datastruct/1_extract/8.png\" alt=\"数据结构\"></li>\n<li>空间复杂度<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/9.png\"><img src=\"/img/datastruct/1_extract/9.png\" alt=\"数据结构\"></li>\n<li>例子：<br><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/6.png\"><img src=\"/img/datastruct/1_extract/6.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/1_extract/7.png\"><img src=\"/img/datastruct/1_extract/7.png\" alt=\"数据结构\"></p>"},{"title":"2.2 单链表","date":"2023-08-04T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png)\n![数据结构](/img/datastruct/2_linearlist/1.png)\n\n\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/1.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/1.png)\n### 2.4.1 定义\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/2.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/2.png)\n\n||顺序表|单链表|\n|:---:|:---:|:---:|\n|结构|![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/3.png)![数据结构](/img/datastruct/2_linearlist/linklist/3.png)|![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/4.png)![数据结构](/img/datastruct/2_linearlist/linklist/4.png)|\n|优点|随机存取，存储密度高|不要求大片连续空间，方便改容量|\n|缺点|要求大片连续空间，改容量不便|不可随机存取，额外指针空间|\n\n\n|带头结点|不带头结点|\n|:---:|:---:|\n||写代码更麻烦|\n||对第一个结点和后续结点的处理逻辑不同|\n||对空表和非空表的处理需要用不同的逻辑|\n\n### 2.4.2基本操作\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/5.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/5.png)\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/6.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/6.png)\n\n- 查找\n    - 按位查找\n    - 按值查找\n- 插入\n    - 位序插入\n    - 指定结点后插\n- 删除\n    - 按位删除\n    - 删除指定节点\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef struct LNode{\n    int data;\n    struct LNode *next;\n} LNode, *Linklist;\n//输出链表\nvoid printlist(LNode L){\n    LNode* p=&L;\n    for(;p!=NULL;p=p->next)\n        printf(\"%d \",p->data);\n}\n\n//头插法-带头结点\nLinklist HeadInsert(Linklist L){\n    LNode *s;\n    int i=0,x=0;\n    int input[6]={5,4,3,2,1,-1};\n    L=(Linklist)malloc(sizeof(LNode));\n    L->next=NULL;\n    for(;input[i]!=-1;i++){\n        InsertNextNode(L,input[i]);\n    }\n    return L;\n}\n\n//尾插法-带头结点\nLinklist TailInsert(Linklist L){\n    LNode *s,*r;\n    int i=0,x=0;\n    int input[6]={5,4,3,2,1,-1};\n    L=(Linklist)malloc(sizeof(LNode));\n    L->next=NULL;\n    r=L;\n    for(;input[i]!=-1;i++){\n        s=(LNode*)malloc(sizeof(LNode));\n        s->data=input[i];\n        r->next=s;\n        r=s;\n    }\n    r->next=NULL;\n    return L;\n}\n\n//尾插法-不带头结点\nLinklist HeadInsertNoHead(Linklist L){\n    LNode *s;\n    int i=1,x=0;\n    int input[6]={5,4,3,2,1,-1};\n    L=(Linklist)malloc(sizeof(LNode));\n    L->data=input[0];\n    L->next=NULL;\n    for(;input[i]!=-1;i++){\n        s=(LNode*)malloc(sizeof(LNode));\n        s->next=L->next;\n        L->next=s;\n        s->data=input[i];\n    }\n    return L;\n}\n\n\n\n//按位查找\nLNode* GetElement(Linklist L,int i){\n    if(i<0) return NULL;\n    int j=0;\n    LNode* p=L;\n    for(;p!=NULL && j<i;j++)\n        p=p->next;\n    return p;\n}\n\n//按值查找\nLNode* LocateElem(Linklist L,int e){\n    LNode* p=L->next;\n    for(;p!=NULL && p->data!=e;p=p->next);\n    return p;\n}\n\n//求\nint Length(Linklist L){\n    int i=0;\n    LNode* p=L;\n    for(;p!=NULL;p=p->next)\n        i++;\n    return i;\n}\n\nvoid test_head(){\n    printf(\"带头结点测试：\");\n    Linklist L=NULL;\n    L=HeadInsert(L);\n    printlist(*(L->next));\n\n    //按位查找\n    printf(\"\\n第3个位置的元素为：%d\\n\",GetElement(L,3)->data);\n\n    //按位插入\n    printf(\"\\n在第1个位置插入11\\n\");\n    ListInsert_head(L,1,11);\n    printf(\"插入后：\");\n    printlist(*(L->next));    \n\n    //后插\n    printf(\"\\n在第2个位置后插22\\n\");\n    LNode *p=GetElement(L,2);\n    InsertNextNode(p,22);\n    printf(\"插入后：\");\n    printlist(*(L->next));\n\n    //前插\n    printf(\"\\n在第3个位置前插33\\n\");\n    p=GetElement(L,3);\n    InsertPriorNode(p,33);\n    printf(\"插入后：\");\n    printlist(*(L->next));\n\n    //按位删除\n    printf(\"\\n删除第1个位置\\n\");\n    int e;\n    ListDelete(L,1,&e);\n    printf(\"删除后：\");\n    printlist(*(L->next));\n\n    //逆置\n    printf(\"\\n逆置\\n\");\n    Reverse(&L);\n    printf(\"逆置后：\");\n    printlist(*(L->next));\n    \n}\nvoid test_nohead(){\n    Linklist L=NULL;\n    L=HeadInsertNoHead(L);\n    printf(\"\\n\\n\\n不带头结点测试：\");\n    printlist(*L);\n\n    //按位插入\n    printf(\"\\n在第1个位置插入11\\n\");\n    ListInsert_nohead(&L,1,11);\n    printf(\"插入后：\");\n    printlist(*L);\n\n    printf(\"\\n在第2个位置插入22\\n\");\n    ListInsert_nohead(&L,2,22);\n    printf(\"插入后：\");\n    printlist(*L);\n\n    \n}\nint main(){\n    test_head();\n    test_nohead();\n    return 0;\n}\n\n\n\n\n\n//按位插入_头\nint ListInsert_head(Linklist L, int i, int e){\n    if(i<1) return 0;\n    LNode *p=GetElement(L,i-1);\n    return InsertNextNode(p,e);\n}\n\n//按位插入_不头\nint ListInsert_nohead(Linklist *L,int i, int e){\n    if(i<1) return 0;\n    if(i==1){\n        LNode *s=(LNode*)malloc(sizeof(LNode));\n        s->data=e;\n        s->next=*L;\n        *L=s;\n        return 1;\n    }\n    LNode *p=*L;\n    int j=1;\n    for(;p!=NULL && j<i-1;j++) p=p->next;\n    if(p==NULL) return 0;\n    LNode *s=(LNode*)malloc(sizeof(LNode));\n    s->data=e;\n    s->next=p->next;//顺序不能换        \n    p->next=s;\n    return 1;\n}\n\n//后插\nint InsertNextNode(LNode *p, int e){\n    if(p==NULL) return 0;\n    LNode *s=(LNode*)malloc(sizeof(LNode));\n    s->data=e;\n    s->next=p->next;\n    p->next=s;\n    return 1;\n}\n\n//前插\nint InsertPriorNode(LNode *p, int e){//只需交换数据域\n    if(p==NULL) return 0;\n    LNode *s=(LNode*)malloc(sizeof(LNode));\n    if(s==NULL) return 0;\n    s->next=p->next;\n    p->next=s;\n    s->data=p->data;\n    p->data=e;\n    return 1;\n}\n\n//按位删除\nint ListDelete(Linklist L, int i, int *e){\n    if(i<1) return 0;\n    LNode *p=L;\n    int j=0;\n    for(;p!=NULL && j<i-1;j++) p=p->next;\n    if(p==NULL) return 0;\n    LNode *q=p->next;\n    if(q==NULL) return 0;\n    p->next=q->next;\n    *e=q->data;\n    free(q);\n    return 1;\n}\n\n//逆置\nvoid Reverse(Linklist *L){\n    LNode *p=(*L)->next;\n    (*L)->next=NULL;\n    LNode *q;\n    while(p!=NULL){\n        q=p->next;\n        p->next=(*L)->next;\n        (*L)->next=p;\n        p=q;\n    }\n}\n```","source":"_posts/datastruct/2_linearlist/2_linklist.md","raw":"---\ntitle: 2.2 单链表\ndate: 2023-08-05 00:00:00\ntags: [数据结构,线性表,单链表]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png)\n![数据结构](/img/datastruct/2_linearlist/1.png)\n\n\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/1.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/1.png)\n### 2.4.1 定义\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/2.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/2.png)\n\n||顺序表|单链表|\n|:---:|:---:|:---:|\n|结构|![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/3.png)![数据结构](/img/datastruct/2_linearlist/linklist/3.png)|![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/4.png)![数据结构](/img/datastruct/2_linearlist/linklist/4.png)|\n|优点|随机存取，存储密度高|不要求大片连续空间，方便改容量|\n|缺点|要求大片连续空间，改容量不便|不可随机存取，额外指针空间|\n\n\n|带头结点|不带头结点|\n|:---:|:---:|\n||写代码更麻烦|\n||对第一个结点和后续结点的处理逻辑不同|\n||对空表和非空表的处理需要用不同的逻辑|\n\n### 2.4.2基本操作\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/5.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/5.png)\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/6.png)\n![数据结构](/img/datastruct/2_linearlist/linklist/6.png)\n\n- 查找\n    - 按位查找\n    - 按值查找\n- 插入\n    - 位序插入\n    - 指定结点后插\n- 删除\n    - 按位删除\n    - 删除指定节点\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef struct LNode{\n    int data;\n    struct LNode *next;\n} LNode, *Linklist;\n//输出链表\nvoid printlist(LNode L){\n    LNode* p=&L;\n    for(;p!=NULL;p=p->next)\n        printf(\"%d \",p->data);\n}\n\n//头插法-带头结点\nLinklist HeadInsert(Linklist L){\n    LNode *s;\n    int i=0,x=0;\n    int input[6]={5,4,3,2,1,-1};\n    L=(Linklist)malloc(sizeof(LNode));\n    L->next=NULL;\n    for(;input[i]!=-1;i++){\n        InsertNextNode(L,input[i]);\n    }\n    return L;\n}\n\n//尾插法-带头结点\nLinklist TailInsert(Linklist L){\n    LNode *s,*r;\n    int i=0,x=0;\n    int input[6]={5,4,3,2,1,-1};\n    L=(Linklist)malloc(sizeof(LNode));\n    L->next=NULL;\n    r=L;\n    for(;input[i]!=-1;i++){\n        s=(LNode*)malloc(sizeof(LNode));\n        s->data=input[i];\n        r->next=s;\n        r=s;\n    }\n    r->next=NULL;\n    return L;\n}\n\n//尾插法-不带头结点\nLinklist HeadInsertNoHead(Linklist L){\n    LNode *s;\n    int i=1,x=0;\n    int input[6]={5,4,3,2,1,-1};\n    L=(Linklist)malloc(sizeof(LNode));\n    L->data=input[0];\n    L->next=NULL;\n    for(;input[i]!=-1;i++){\n        s=(LNode*)malloc(sizeof(LNode));\n        s->next=L->next;\n        L->next=s;\n        s->data=input[i];\n    }\n    return L;\n}\n\n\n\n//按位查找\nLNode* GetElement(Linklist L,int i){\n    if(i<0) return NULL;\n    int j=0;\n    LNode* p=L;\n    for(;p!=NULL && j<i;j++)\n        p=p->next;\n    return p;\n}\n\n//按值查找\nLNode* LocateElem(Linklist L,int e){\n    LNode* p=L->next;\n    for(;p!=NULL && p->data!=e;p=p->next);\n    return p;\n}\n\n//求\nint Length(Linklist L){\n    int i=0;\n    LNode* p=L;\n    for(;p!=NULL;p=p->next)\n        i++;\n    return i;\n}\n\nvoid test_head(){\n    printf(\"带头结点测试：\");\n    Linklist L=NULL;\n    L=HeadInsert(L);\n    printlist(*(L->next));\n\n    //按位查找\n    printf(\"\\n第3个位置的元素为：%d\\n\",GetElement(L,3)->data);\n\n    //按位插入\n    printf(\"\\n在第1个位置插入11\\n\");\n    ListInsert_head(L,1,11);\n    printf(\"插入后：\");\n    printlist(*(L->next));    \n\n    //后插\n    printf(\"\\n在第2个位置后插22\\n\");\n    LNode *p=GetElement(L,2);\n    InsertNextNode(p,22);\n    printf(\"插入后：\");\n    printlist(*(L->next));\n\n    //前插\n    printf(\"\\n在第3个位置前插33\\n\");\n    p=GetElement(L,3);\n    InsertPriorNode(p,33);\n    printf(\"插入后：\");\n    printlist(*(L->next));\n\n    //按位删除\n    printf(\"\\n删除第1个位置\\n\");\n    int e;\n    ListDelete(L,1,&e);\n    printf(\"删除后：\");\n    printlist(*(L->next));\n\n    //逆置\n    printf(\"\\n逆置\\n\");\n    Reverse(&L);\n    printf(\"逆置后：\");\n    printlist(*(L->next));\n    \n}\nvoid test_nohead(){\n    Linklist L=NULL;\n    L=HeadInsertNoHead(L);\n    printf(\"\\n\\n\\n不带头结点测试：\");\n    printlist(*L);\n\n    //按位插入\n    printf(\"\\n在第1个位置插入11\\n\");\n    ListInsert_nohead(&L,1,11);\n    printf(\"插入后：\");\n    printlist(*L);\n\n    printf(\"\\n在第2个位置插入22\\n\");\n    ListInsert_nohead(&L,2,22);\n    printf(\"插入后：\");\n    printlist(*L);\n\n    \n}\nint main(){\n    test_head();\n    test_nohead();\n    return 0;\n}\n\n\n\n\n\n//按位插入_头\nint ListInsert_head(Linklist L, int i, int e){\n    if(i<1) return 0;\n    LNode *p=GetElement(L,i-1);\n    return InsertNextNode(p,e);\n}\n\n//按位插入_不头\nint ListInsert_nohead(Linklist *L,int i, int e){\n    if(i<1) return 0;\n    if(i==1){\n        LNode *s=(LNode*)malloc(sizeof(LNode));\n        s->data=e;\n        s->next=*L;\n        *L=s;\n        return 1;\n    }\n    LNode *p=*L;\n    int j=1;\n    for(;p!=NULL && j<i-1;j++) p=p->next;\n    if(p==NULL) return 0;\n    LNode *s=(LNode*)malloc(sizeof(LNode));\n    s->data=e;\n    s->next=p->next;//顺序不能换        \n    p->next=s;\n    return 1;\n}\n\n//后插\nint InsertNextNode(LNode *p, int e){\n    if(p==NULL) return 0;\n    LNode *s=(LNode*)malloc(sizeof(LNode));\n    s->data=e;\n    s->next=p->next;\n    p->next=s;\n    return 1;\n}\n\n//前插\nint InsertPriorNode(LNode *p, int e){//只需交换数据域\n    if(p==NULL) return 0;\n    LNode *s=(LNode*)malloc(sizeof(LNode));\n    if(s==NULL) return 0;\n    s->next=p->next;\n    p->next=s;\n    s->data=p->data;\n    p->data=e;\n    return 1;\n}\n\n//按位删除\nint ListDelete(Linklist L, int i, int *e){\n    if(i<1) return 0;\n    LNode *p=L;\n    int j=0;\n    for(;p!=NULL && j<i-1;j++) p=p->next;\n    if(p==NULL) return 0;\n    LNode *q=p->next;\n    if(q==NULL) return 0;\n    p->next=q->next;\n    *e=q->data;\n    free(q);\n    return 1;\n}\n\n//逆置\nvoid Reverse(Linklist *L){\n    LNode *p=(*L)->next;\n    (*L)->next=NULL;\n    LNode *q;\n    while(p!=NULL){\n        q=p->next;\n        p->next=(*L)->next;\n        (*L)->next=p;\n        p=q;\n    }\n}\n```","slug":"datastruct/2_linearlist/2_linklist","published":1,"updated":"2023-10-23T12:02:48.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr0000nwovwhuas25q0","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/1.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/1.png\" alt=\"数据结构\"></p>\n<h3 id=\"2-4-1-定义\"><a href=\"#2-4-1-定义\" class=\"headerlink\" title=\"2.4.1 定义\"></a>2.4.1 定义</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/2.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/2.png\" alt=\"数据结构\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">顺序表</th>\n<th align=\"center\">单链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">结构</td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/3.png\"><img src=\"/img/datastruct/2_linearlist/linklist/3.png\" alt=\"数据结构\"></td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/4.png\"><img src=\"/img/datastruct/2_linearlist/linklist/4.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">随机存取，存储密度高</td>\n<td align=\"center\">不要求大片连续空间，方便改容量</td>\n</tr>\n<tr>\n<td align=\"center\">缺点</td>\n<td align=\"center\">要求大片连续空间，改容量不便</td>\n<td align=\"center\">不可随机存取，额外指针空间</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">带头结点</th>\n<th align=\"center\">不带头结点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\">写代码更麻烦</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">对第一个结点和后续结点的处理逻辑不同</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">对空表和非空表的处理需要用不同的逻辑</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-2基本操作\"><a href=\"#2-4-2基本操作\" class=\"headerlink\" title=\"2.4.2基本操作\"></a>2.4.2基本操作</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/5.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/6.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li>查找<ul>\n<li>按位查找</li>\n<li>按值查找</li>\n</ul>\n</li>\n<li>插入<ul>\n<li>位序插入</li>\n<li>指定结点后插</li>\n</ul>\n</li>\n<li>删除<ul>\n<li>按位删除</li>\n<li>删除指定节点</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, *Linklist;</span><br><span class=\"line\"><span class=\"comment\">//输出链表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(LNode L)</span>&#123;</span><br><span class=\"line\">    LNode* p=&amp;L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span>;p=p-&gt;next)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//头插法-带头结点</span></span><br><span class=\"line\">Linklist <span class=\"title function_\">HeadInsert</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> input[<span class=\"number\">6</span>]=&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    L=(Linklist)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;input[i]!=<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        InsertNextNode(L,input[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尾插法-带头结点</span></span><br><span class=\"line\">Linklist <span class=\"title function_\">TailInsert</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    LNode *s,*r;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> input[<span class=\"number\">6</span>]=&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    L=(Linklist)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    r=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;input[i]!=<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data=input[i];</span><br><span class=\"line\">        r-&gt;next=s;</span><br><span class=\"line\">        r=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尾插法-不带头结点</span></span><br><span class=\"line\">Linklist <span class=\"title function_\">HeadInsertNoHead</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> input[<span class=\"number\">6</span>]=&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    L=(Linklist)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;data=input[<span class=\"number\">0</span>];</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;input[i]!=<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;next=L-&gt;next;</span><br><span class=\"line\">        L-&gt;next=s;</span><br><span class=\"line\">        s-&gt;data=input[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位查找</span></span><br><span class=\"line\">LNode* <span class=\"title function_\">GetElement</span><span class=\"params\">(Linklist L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode* p=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; j&lt;i;j++)</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按值查找</span></span><br><span class=\"line\">LNode* <span class=\"title function_\">LocateElem</span><span class=\"params\">(Linklist L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LNode* p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data!=e;p=p-&gt;next);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Length</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode* p=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span>;p=p-&gt;next)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test_head</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;带头结点测试：&quot;</span>);</span><br><span class=\"line\">    Linklist L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    L=HeadInsert(L);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n第3个位置的元素为：%d\\n&quot;</span>,GetElement(L,<span class=\"number\">3</span>)-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位插入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第1个位置插入11\\n&quot;</span>);</span><br><span class=\"line\">    ListInsert_head(L,<span class=\"number\">1</span>,<span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后插</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第2个位置后插22\\n&quot;</span>);</span><br><span class=\"line\">    LNode *p=GetElement(L,<span class=\"number\">2</span>);</span><br><span class=\"line\">    InsertNextNode(p,<span class=\"number\">22</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前插</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第3个位置前插33\\n&quot;</span>);</span><br><span class=\"line\">    p=GetElement(L,<span class=\"number\">3</span>);</span><br><span class=\"line\">    InsertPriorNode(p,<span class=\"number\">33</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位删除</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第1个位置\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> e;</span><br><span class=\"line\">    ListDelete(L,<span class=\"number\">1</span>,&amp;e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//逆置</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n逆置\\n&quot;</span>);</span><br><span class=\"line\">    Reverse(&amp;L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;逆置后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test_nohead</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Linklist L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    L=HeadInsertNoHead(L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\n\\n不带头结点测试：&quot;</span>);</span><br><span class=\"line\">    printlist(*L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位插入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第1个位置插入11\\n&quot;</span>);</span><br><span class=\"line\">    ListInsert_nohead(&amp;L,<span class=\"number\">1</span>,<span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第2个位置插入22\\n&quot;</span>);</span><br><span class=\"line\">    ListInsert_nohead(&amp;L,<span class=\"number\">2</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*L);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    test_head();</span><br><span class=\"line\">    test_nohead();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位插入_头</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert_head</span><span class=\"params\">(Linklist L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *p=GetElement(L,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> InsertNextNode(p,e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位插入_不头</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert_nohead</span><span class=\"params\">(Linklist *L,<span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data=e;</span><br><span class=\"line\">        s-&gt;next=*L;</span><br><span class=\"line\">        *L=s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LNode *p=*L;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; j&lt;i<span class=\"number\">-1</span>;j++) p=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data=e;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;<span class=\"comment\">//顺序不能换        </span></span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后插</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InsertNextNode</span><span class=\"params\">(LNode *p, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data=e;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前插</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InsertPriorNode</span><span class=\"params\">(LNode *p, <span class=\"type\">int</span> e)</span>&#123;<span class=\"comment\">//只需交换数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    s-&gt;data=p-&gt;data;</span><br><span class=\"line\">    p-&gt;data=e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(Linklist L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *p=L;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; j&lt;i<span class=\"number\">-1</span>;j++) p=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *q=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    p-&gt;next=q-&gt;next;</span><br><span class=\"line\">    *e=q-&gt;data;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//逆置</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reverse</span><span class=\"params\">(Linklist *L)</span>&#123;</span><br><span class=\"line\">    LNode *p=(*L)-&gt;next;</span><br><span class=\"line\">    (*L)-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    LNode *q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        q=p-&gt;next;</span><br><span class=\"line\">        p-&gt;next=(*L)-&gt;next;</span><br><span class=\"line\">        (*L)-&gt;next=p;</span><br><span class=\"line\">        p=q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/1.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/1.png\" alt=\"数据结构\"></p>\n<h3 id=\"2-4-1-定义\"><a href=\"#2-4-1-定义\" class=\"headerlink\" title=\"2.4.1 定义\"></a>2.4.1 定义</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/2.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/2.png\" alt=\"数据结构\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">顺序表</th>\n<th align=\"center\">单链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">结构</td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/3.png\"><img src=\"/img/datastruct/2_linearlist/linklist/3.png\" alt=\"数据结构\"></td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/4.png\"><img src=\"/img/datastruct/2_linearlist/linklist/4.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">随机存取，存储密度高</td>\n<td align=\"center\">不要求大片连续空间，方便改容量</td>\n</tr>\n<tr>\n<td align=\"center\">缺点</td>\n<td align=\"center\">要求大片连续空间，改容量不便</td>\n<td align=\"center\">不可随机存取，额外指针空间</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">带头结点</th>\n<th align=\"center\">不带头结点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\">写代码更麻烦</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">对第一个结点和后续结点的处理逻辑不同</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">对空表和非空表的处理需要用不同的逻辑</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-2基本操作\"><a href=\"#2-4-2基本操作\" class=\"headerlink\" title=\"2.4.2基本操作\"></a>2.4.2基本操作</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/5.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/linklist/6.png\"><br><img src=\"/img/datastruct/2_linearlist/linklist/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li>查找<ul>\n<li>按位查找</li>\n<li>按值查找</li>\n</ul>\n</li>\n<li>插入<ul>\n<li>位序插入</li>\n<li>指定结点后插</li>\n</ul>\n</li>\n<li>删除<ul>\n<li>按位删除</li>\n<li>删除指定节点</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LNode, *Linklist;</span><br><span class=\"line\"><span class=\"comment\">//输出链表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(LNode L)</span>&#123;</span><br><span class=\"line\">    LNode* p=&amp;L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span>;p=p-&gt;next)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//头插法-带头结点</span></span><br><span class=\"line\">Linklist <span class=\"title function_\">HeadInsert</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> input[<span class=\"number\">6</span>]=&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    L=(Linklist)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;input[i]!=<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        InsertNextNode(L,input[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尾插法-带头结点</span></span><br><span class=\"line\">Linklist <span class=\"title function_\">TailInsert</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    LNode *s,*r;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> input[<span class=\"number\">6</span>]=&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    L=(Linklist)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    r=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;input[i]!=<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data=input[i];</span><br><span class=\"line\">        r-&gt;next=s;</span><br><span class=\"line\">        r=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尾插法-不带头结点</span></span><br><span class=\"line\">Linklist <span class=\"title function_\">HeadInsertNoHead</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> input[<span class=\"number\">6</span>]=&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    L=(Linklist)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;data=input[<span class=\"number\">0</span>];</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;input[i]!=<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;next=L-&gt;next;</span><br><span class=\"line\">        L-&gt;next=s;</span><br><span class=\"line\">        s-&gt;data=input[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位查找</span></span><br><span class=\"line\">LNode* <span class=\"title function_\">GetElement</span><span class=\"params\">(Linklist L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode* p=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; j&lt;i;j++)</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按值查找</span></span><br><span class=\"line\">LNode* <span class=\"title function_\">LocateElem</span><span class=\"params\">(Linklist L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LNode* p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data!=e;p=p-&gt;next);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Length</span><span class=\"params\">(Linklist L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode* p=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span>;p=p-&gt;next)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test_head</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;带头结点测试：&quot;</span>);</span><br><span class=\"line\">    Linklist L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    L=HeadInsert(L);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n第3个位置的元素为：%d\\n&quot;</span>,GetElement(L,<span class=\"number\">3</span>)-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位插入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第1个位置插入11\\n&quot;</span>);</span><br><span class=\"line\">    ListInsert_head(L,<span class=\"number\">1</span>,<span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后插</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第2个位置后插22\\n&quot;</span>);</span><br><span class=\"line\">    LNode *p=GetElement(L,<span class=\"number\">2</span>);</span><br><span class=\"line\">    InsertNextNode(p,<span class=\"number\">22</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前插</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第3个位置前插33\\n&quot;</span>);</span><br><span class=\"line\">    p=GetElement(L,<span class=\"number\">3</span>);</span><br><span class=\"line\">    InsertPriorNode(p,<span class=\"number\">33</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位删除</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第1个位置\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> e;</span><br><span class=\"line\">    ListDelete(L,<span class=\"number\">1</span>,&amp;e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//逆置</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n逆置\\n&quot;</span>);</span><br><span class=\"line\">    Reverse(&amp;L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;逆置后：&quot;</span>);</span><br><span class=\"line\">    printlist(*(L-&gt;next));</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test_nohead</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Linklist L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    L=HeadInsertNoHead(L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\n\\n不带头结点测试：&quot;</span>);</span><br><span class=\"line\">    printlist(*L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位插入</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第1个位置插入11\\n&quot;</span>);</span><br><span class=\"line\">    ListInsert_nohead(&amp;L,<span class=\"number\">1</span>,<span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n在第2个位置插入22\\n&quot;</span>);</span><br><span class=\"line\">    ListInsert_nohead(&amp;L,<span class=\"number\">2</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;插入后：&quot;</span>);</span><br><span class=\"line\">    printlist(*L);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    test_head();</span><br><span class=\"line\">    test_nohead();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位插入_头</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert_head</span><span class=\"params\">(Linklist L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *p=GetElement(L,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> InsertNextNode(p,e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位插入_不头</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert_nohead</span><span class=\"params\">(Linklist *L,<span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data=e;</span><br><span class=\"line\">        s-&gt;next=*L;</span><br><span class=\"line\">        *L=s;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LNode *p=*L;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; j&lt;i<span class=\"number\">-1</span>;j++) p=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data=e;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;<span class=\"comment\">//顺序不能换        </span></span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后插</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InsertNextNode</span><span class=\"params\">(LNode *p, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data=e;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前插</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InsertPriorNode</span><span class=\"params\">(LNode *p, <span class=\"type\">int</span> e)</span>&#123;<span class=\"comment\">//只需交换数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *s=(LNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    s-&gt;data=p-&gt;data;</span><br><span class=\"line\">    p-&gt;data=e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(Linklist L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *p=L;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span> &amp;&amp; j&lt;i<span class=\"number\">-1</span>;j++) p=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LNode *q=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q==<span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    p-&gt;next=q-&gt;next;</span><br><span class=\"line\">    *e=q-&gt;data;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//逆置</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Reverse</span><span class=\"params\">(Linklist *L)</span>&#123;</span><br><span class=\"line\">    LNode *p=(*L)-&gt;next;</span><br><span class=\"line\">    (*L)-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    LNode *q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        q=p-&gt;next;</span><br><span class=\"line\">        p-&gt;next=(*L)-&gt;next;</span><br><span class=\"line\">        (*L)-&gt;next=p;</span><br><span class=\"line\">        p=q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2.3 双链表","date":"2023-08-04T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png)\n![数据结构](/img/datastruct/2_linearlist/1.png)\n\n# 2 线性表\n\n\n|单链表|双链表\n|:---:|:---:|\n|无法逆向检索，不太方便|可进可退，存储密度更低\n\n\n\n### 2.4.1 基本操作\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/1.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/1.png)\n\n- 插入\n- 删除\n- 遍历\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef struct DNode{\n    int data;\n    struct DNode *prior,*next;\n} DNode, *DLinklist;\n\n//创建一个结点\nDNode* CreateNode(int data){\n    DNode *p;\n    p=(DNode*)malloc(sizeof(DNode));\n    p->data=data;\n    p->prior=NULL;\n    p->next=NULL;\n    return p;\n}\n\n//输出链表\nvoid printlist(DLinklist L){\n    DNode* p=L;\n    for(;p!=NULL;p=p->next)\n        printf(\"%d \",p->data);\n}\n\nint main(){\n    DLinklist L=NULL;\n    //创建一个结点\n    DNode *p=CreateNode(1);\n    //插入\n    InsertNextNode(p,CreateNode(2));\n    InsertNextNode(p->next,CreateNode(3));\n    InsertNextNode(p->next->next,CreateNode(4));\n    InsertNextNode(p->next->next->next,CreateNode(5));\n\n    //输出链表\n    printlist(p);\n    return 0;\n}\n\n//后插\nint InsertNextNode(DNode *p, DNode *s){\n    if(p==NULL||s==NULL)\n        return 0;\n    s->next=p->next;\n    if(p->next!=NULL)\n        p->next->prior=s;\n    s->prior=p;\n    p->next=s;\n    return 1;\n}\n\n//删除\nint DeleteNode(DNode *p){\n    if(p==NULL)\n        return 0;\n    p->prior->next=p->next;\n    p->next->prior=p->prior;\n    free(p);\n    return 1;\n}\n\n```\n\n## 2.5 循环链表\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/2.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/2.png)\n\n## 2.6 静态链表\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/3.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/3.png)\n\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/4.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/4.png)\n\n### 2.6.1 代码实现\n- 插入\n- 删除\n\n## 2.7 顺序表vs链表\n\n||顺序表|链表\n|:---:|:---:|:---:|\n|逻辑结构|线性结构|线性结构\n|存储结构|顺序存储|链式存储\n|优点|随机存取，存储密度高|插入和删除\n\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/5.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/5.png)","source":"_posts/datastruct/2_linearlist/3_doublelinklist.md","raw":"---\ntitle: 2.3 双链表\ndate: 2023-08-05 00:00:00\ntags: [数据结构,线性表,双链表]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png)\n![数据结构](/img/datastruct/2_linearlist/1.png)\n\n# 2 线性表\n\n\n|单链表|双链表\n|:---:|:---:|\n|无法逆向检索，不太方便|可进可退，存储密度更低\n\n\n\n### 2.4.1 基本操作\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/1.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/1.png)\n\n- 插入\n- 删除\n- 遍历\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef struct DNode{\n    int data;\n    struct DNode *prior,*next;\n} DNode, *DLinklist;\n\n//创建一个结点\nDNode* CreateNode(int data){\n    DNode *p;\n    p=(DNode*)malloc(sizeof(DNode));\n    p->data=data;\n    p->prior=NULL;\n    p->next=NULL;\n    return p;\n}\n\n//输出链表\nvoid printlist(DLinklist L){\n    DNode* p=L;\n    for(;p!=NULL;p=p->next)\n        printf(\"%d \",p->data);\n}\n\nint main(){\n    DLinklist L=NULL;\n    //创建一个结点\n    DNode *p=CreateNode(1);\n    //插入\n    InsertNextNode(p,CreateNode(2));\n    InsertNextNode(p->next,CreateNode(3));\n    InsertNextNode(p->next->next,CreateNode(4));\n    InsertNextNode(p->next->next->next,CreateNode(5));\n\n    //输出链表\n    printlist(p);\n    return 0;\n}\n\n//后插\nint InsertNextNode(DNode *p, DNode *s){\n    if(p==NULL||s==NULL)\n        return 0;\n    s->next=p->next;\n    if(p->next!=NULL)\n        p->next->prior=s;\n    s->prior=p;\n    p->next=s;\n    return 1;\n}\n\n//删除\nint DeleteNode(DNode *p){\n    if(p==NULL)\n        return 0;\n    p->prior->next=p->next;\n    p->next->prior=p->prior;\n    free(p);\n    return 1;\n}\n\n```\n\n## 2.5 循环链表\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/2.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/2.png)\n\n## 2.6 静态链表\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/3.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/3.png)\n\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/4.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/4.png)\n\n### 2.6.1 代码实现\n- 插入\n- 删除\n\n## 2.7 顺序表vs链表\n\n||顺序表|链表\n|:---:|:---:|:---:|\n|逻辑结构|线性结构|线性结构\n|存储结构|顺序存储|链式存储\n|优点|随机存取，存储密度高|插入和删除\n\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/5.png)\n![数据结构](/img/datastruct/2_linearlist/doublelinklist/5.png)","slug":"datastruct/2_linearlist/3_doublelinklist","published":1,"updated":"2023-10-23T12:03:40.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr0000qwovwcqci5bzy","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/1.png\" alt=\"数据结构\"></p>\n<h1 id=\"2-线性表\"><a href=\"#2-线性表\" class=\"headerlink\" title=\"2 线性表\"></a>2 线性表</h1><table>\n<thead>\n<tr>\n<th align=\"center\">单链表</th>\n<th align=\"center\">双链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">无法逆向检索，不太方便</td>\n<td align=\"center\">可进可退，存储密度更低</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-1-基本操作\"><a href=\"#2-4-1-基本操作\" class=\"headerlink\" title=\"2.4.1 基本操作\"></a>2.4.1 基本操作</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/1.png\" alt=\"数据结构\"></p>\n<ul>\n<li>插入</li>\n<li>删除</li>\n<li>遍历<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; DNode, *DLinklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个结点</span></span><br><span class=\"line\">DNode* <span class=\"title function_\">CreateNode</span><span class=\"params\">(<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    DNode *p;</span><br><span class=\"line\">    p=(DNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">    p-&gt;data=data;</span><br><span class=\"line\">    p-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出链表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(DLinklist L)</span>&#123;</span><br><span class=\"line\">    DNode* p=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span>;p=p-&gt;next)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DLinklist L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个结点</span></span><br><span class=\"line\">    DNode *p=CreateNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//插入</span></span><br><span class=\"line\">    InsertNextNode(p,CreateNode(<span class=\"number\">2</span>));</span><br><span class=\"line\">    InsertNextNode(p-&gt;next,CreateNode(<span class=\"number\">3</span>));</span><br><span class=\"line\">    InsertNextNode(p-&gt;next-&gt;next,CreateNode(<span class=\"number\">4</span>));</span><br><span class=\"line\">    InsertNextNode(p-&gt;next-&gt;next-&gt;next,CreateNode(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//输出链表</span></span><br><span class=\"line\">    printlist(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后插</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InsertNextNode</span><span class=\"params\">(DNode *p, DNode *s)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>||s==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        p-&gt;next-&gt;prior=s;</span><br><span class=\"line\">    s-&gt;prior=p;</span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeleteNode</span><span class=\"params\">(DNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    p-&gt;prior-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next-&gt;prior=p-&gt;prior;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"2-5-循环链表\"><a href=\"#2-5-循环链表\" class=\"headerlink\" title=\"2.5 循环链表\"></a>2.5 循环链表</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/2.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/2.png\" alt=\"数据结构\"></p>\n<h2 id=\"2-6-静态链表\"><a href=\"#2-6-静态链表\" class=\"headerlink\" title=\"2.6 静态链表\"></a>2.6 静态链表</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/3.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/3.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/4.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/4.png\" alt=\"数据结构\"></p>\n<h3 id=\"2-6-1-代码实现\"><a href=\"#2-6-1-代码实现\" class=\"headerlink\" title=\"2.6.1 代码实现\"></a>2.6.1 代码实现</h3><ul>\n<li>插入</li>\n<li>删除</li>\n</ul>\n<h2 id=\"2-7-顺序表vs链表\"><a href=\"#2-7-顺序表vs链表\" class=\"headerlink\" title=\"2.7 顺序表vs链表\"></a>2.7 顺序表vs链表</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">顺序表</th>\n<th align=\"center\">链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">逻辑结构</td>\n<td align=\"center\">线性结构</td>\n<td align=\"center\">线性结构</td>\n</tr>\n<tr>\n<td align=\"center\">存储结构</td>\n<td align=\"center\">顺序存储</td>\n<td align=\"center\">链式存储</td>\n</tr>\n<tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">随机存取，存储密度高</td>\n<td align=\"center\">插入和删除</td>\n</tr>\n</tbody></table>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/5.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/5.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/1.png\" alt=\"数据结构\"></p>\n<h1 id=\"2-线性表\"><a href=\"#2-线性表\" class=\"headerlink\" title=\"2 线性表\"></a>2 线性表</h1><table>\n<thead>\n<tr>\n<th align=\"center\">单链表</th>\n<th align=\"center\">双链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">无法逆向检索，不太方便</td>\n<td align=\"center\">可进可退，存储密度更低</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-1-基本操作\"><a href=\"#2-4-1-基本操作\" class=\"headerlink\" title=\"2.4.1 基本操作\"></a>2.4.1 基本操作</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/1.png\" alt=\"数据结构\"></p>\n<ul>\n<li>插入</li>\n<li>删除</li>\n<li>遍历<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; DNode, *DLinklist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个结点</span></span><br><span class=\"line\">DNode* <span class=\"title function_\">CreateNode</span><span class=\"params\">(<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    DNode *p;</span><br><span class=\"line\">    p=(DNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">    p-&gt;data=data;</span><br><span class=\"line\">    p-&gt;prior=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出链表</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printlist</span><span class=\"params\">(DLinklist L)</span>&#123;</span><br><span class=\"line\">    DNode* p=L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;p!=<span class=\"literal\">NULL</span>;p=p-&gt;next)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DLinklist L=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个结点</span></span><br><span class=\"line\">    DNode *p=CreateNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//插入</span></span><br><span class=\"line\">    InsertNextNode(p,CreateNode(<span class=\"number\">2</span>));</span><br><span class=\"line\">    InsertNextNode(p-&gt;next,CreateNode(<span class=\"number\">3</span>));</span><br><span class=\"line\">    InsertNextNode(p-&gt;next-&gt;next,CreateNode(<span class=\"number\">4</span>));</span><br><span class=\"line\">    InsertNextNode(p-&gt;next-&gt;next-&gt;next,CreateNode(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//输出链表</span></span><br><span class=\"line\">    printlist(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后插</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InsertNextNode</span><span class=\"params\">(DNode *p, DNode *s)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>||s==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    s-&gt;next=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        p-&gt;next-&gt;prior=s;</span><br><span class=\"line\">    s-&gt;prior=p;</span><br><span class=\"line\">    p-&gt;next=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeleteNode</span><span class=\"params\">(DNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    p-&gt;prior-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next-&gt;prior=p-&gt;prior;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"2-5-循环链表\"><a href=\"#2-5-循环链表\" class=\"headerlink\" title=\"2.5 循环链表\"></a>2.5 循环链表</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/2.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/2.png\" alt=\"数据结构\"></p>\n<h2 id=\"2-6-静态链表\"><a href=\"#2-6-静态链表\" class=\"headerlink\" title=\"2.6 静态链表\"></a>2.6 静态链表</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/3.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/3.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/4.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/4.png\" alt=\"数据结构\"></p>\n<h3 id=\"2-6-1-代码实现\"><a href=\"#2-6-1-代码实现\" class=\"headerlink\" title=\"2.6.1 代码实现\"></a>2.6.1 代码实现</h3><ul>\n<li>插入</li>\n<li>删除</li>\n</ul>\n<h2 id=\"2-7-顺序表vs链表\"><a href=\"#2-7-顺序表vs链表\" class=\"headerlink\" title=\"2.7 顺序表vs链表\"></a>2.7 顺序表vs链表</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">顺序表</th>\n<th align=\"center\">链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">逻辑结构</td>\n<td align=\"center\">线性结构</td>\n<td align=\"center\">线性结构</td>\n</tr>\n<tr>\n<td align=\"center\">存储结构</td>\n<td align=\"center\">顺序存储</td>\n<td align=\"center\">链式存储</td>\n</tr>\n<tr>\n<td align=\"center\">优点</td>\n<td align=\"center\">随机存取，存储密度高</td>\n<td align=\"center\">插入和删除</td>\n</tr>\n</tbody></table>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/doublelinklist/5.png\"><br><img src=\"/img/datastruct/2_linearlist/doublelinklist/5.png\" alt=\"数据结构\"></p>"},{"title":"2.1 线性表的定义","date":"2023-01-31T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png)\n![数据结构](/img/datastruct/2_linearlist/1.png)\n\n\n## 2.1 定义\n- L=(a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,...,a<sub>n</sub>)\n- 有限个相同数据类型的数据元素的有序序列\n- 一些概念\n   \n   ·位序：数据元素在线性表中的位置\n   \n   ·表头：第一个元素a<sub>1</sub>\n\n   ·表尾：最后一个元素a<sub>n</sub>\n\n- 一些性质\n\n   ·除第一个元素外，每个元素有且仅有一个直接前驱\n   ·除最后一个元素外，每个元素有且仅有一个直接后继\n## 2.2 基本操作\n\n|函数|功能|说明|\n|:---:|:---:|:---:|\n|InitList(&L)|初始化|构造一个空的线性表L，分配内存空间|\n|DestroyList(&L)|销毁|销毁线性表，并释放内存空间|\n|ClearList(&L)|清空|清空线性表，保留内存空间|\n|Empty(L)|判空|判断线性表是否为空|\n|Length(L)|求长|返回线性表的长度|\n|GetElem(L,i,&e)|取值|返回线性表中第i个元素的值|\n|LocateElem(L,e,compare())|查找|返回线性表中第一个与e满足compare()的元素的位序|\n|PriorElem(L,cur_e,&pre_e)|前驱|返回线性表中元素cur_e的前驱元素的值|\n|NextElem(L,cur_e,&next_e)|后继|返回线性表中元素cur_e的后继元素的值|\n|ListInsert(&L,i,e)|插入|在线性表的第i个位置插入元素e|\n|ListDelete(&L,i,&e)|删除|删除线性表中第i个位置的元素，并返回其值|\n|ListTraverse(L,visit())|遍历|依次对线性表中每个元素调用visit()函数|\n\n## 2.3 顺序表\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/2.png)\n![数据结构](/img/datastruct/2_linearlist/2.png)\n### 2.3.1 顺序存储实现线性表\n- 静态分配\n```c\n/*\n实现顺序表\n静态分配\n*/\n#include<stdio.h>\n#define MaxSize 10\ntypedef struct\n{\n    int data[MaxSize];\n    int length;\n}SqList;\n\n//初始化\nvoid InitList(SqList* L){\n    L->length=0;//逻辑归零\n}\n\nint main(){\n    SqList L;\n    InitList(&L);\n    //违规访问\n    for(int i=0;i<MaxSize;i++){\n        printf(\"ta[%d]=%d\\n\",i,L.data[i]);\n    }\n    return 0;\n}\n```\n- 动态分配\n```c\n/*\n顺序表\n动态分配\n*/\n#include<stdio.h>\n#include<stdlib.h>\n#define InitSize 10 //默认最大长度\ntypedef struct\n{\n    int *data ;//指针，用于动态分配\n    int MaxSize; \n    int length;\n}SeqList;\n//初始化\nvoid InitList(SeqList *L){\n    //申请空间\n    L->data=(int*)malloc(InitSize*sizeof(int));\n    L->length=0;\n    L->MaxSize=InitSize;\n}\n\n//动态增长\nvoid IncreaseSize(SeqList *L, int len){\n    int* p=L->data;\n    L->data=(int *)malloc((L->MaxSize+len)*sizeof(int));\n    //将数据复制到新的区域\n    int i=0;\n    for(i=0;i<L->length;i++){\n        L->data[i]=p[i];\n    }\n    L->MaxSize=L->MaxSize+len;\n    free(p);\n}\n\nint main(){\n    SeqList L;\n    //初始化\n    InitList(&L);\n    printf(\"最大长度：%d\\n\",L.MaxSize);\n    //增长\n    IncreaseSize(&L,5);\n    printf(\"+5\\n\");\n    printf(\"最大长度：%d\",L.MaxSize);\n    return 0;\n}\n```\n- 基本操作\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/3.png)\n![数据结构](/img/datastruct/2_linearlist/3.png)\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/4.png)\n![数据结构](/img/datastruct/2_linearlist/4.png)\n```c\n/*\n顺序表\n静态分配\n*/\n#include<stdio.h>\n#define MaxSize 10\ntypedef struct\n{\n    int data[MaxSize];\n    int length;\n}SqList;\n//初始化\nvoid InitList(SqList* L){\n    L->length=0;//逻辑上置零\n}\nvoid PrintList(SqList L){\n    //判空\n    if(L.data==NULL || L.length==0)\n        return;\n    int i=0;\n    for(i=0;i<L.length;i++)\n        printf(\"%d \",L.data[i]);\n}\n\nint main(){\n    SqList L;\n    InitList(&L);\n    ListInsert(&L,1,1);\n    ListInsert(&L,2,2);\n    ListInsert(&L,3,4);\n    ListInsert(&L,4,5);\n    printf(\"前：\");\n    PrintList(L);\n    ListInsert(&L,3,3);\n    printf(\"\\n位序：3，插入：3\");\n    printf(\"\\n后：\");\n    PrintList(L);\n\n    //删除\n    int x=0;\n    ListDelete(&L,1,&x);\n    printf(\"\\n删除第%d个元素：%d\",1,x);\n    printf(\"\\n删除后：\");\n    PrintList(L);\n\n    ListDelete(&L,2,&x);\n    printf(\"\\n删除第%d个元素：%d\",2,x);\n    printf(\"\\n删除后：\");\n    PrintList(L);\n\n    printf(\"\\n删除第%d个元素：%d\",L.length,x);\n    ListDelete(&L,L.length,&x);\n    printf(\"\\n删除后：\");\n    PrintList(L);\n\n    //按位查找\n    printf(\"\\n第1个：%d\",GetElement(L,0));\n    printf(\"\\n第2个：%d\",GetElement(L,1));\n\n    //按值查找\n    printf(\"\\n2的位序：%d\",LocateElement(L,2));\n    printf(\"\\n4的位序：：%d\",LocateElement(L,4));\n    printf(\"\\n5的位序：：%d\",LocateElement(L,5));\n    return 0;\n}\n\n//位序插入\nint ListInsert(SqList *L,int i, int e){\n    //满否\n    if (L->length>=MaxSize || i<1 || i>L->length+1) return 0;\n    int j=0;\n    for(j=L->length;j>=i;j--)//后移\n        L->data[j]=L->data[j-1];\n    L->data[j]=e;//插入\n    return ++(L->length);\n}\n\n//删除\nint ListDelete(SqList *L,int i, int *e){\n    if(i<1|| i>L->length) return 0;\n    *e=L->data[i-1];\n    int j=i;\n    for(;j<L->length;j++) L->data[j-1]=L->data[j];\n    L->length--;\n    return 1;\n}\n\n//按位查找\nint GetElement(SqList L,int i){\n    if(i<1 || i>L.length) return 0;\n    return L.data[i-1];\n}\n\n//按值查找\nint LocateElement(SqList L,int e){\n    int i=0;\n    for(;i<L.length;i++)\n        if(L.data[i]==e)\n            return i+1;\n    return -1;\n}\n```\n\n\n||按位插入/删除||\n|:---:|:---:|:---:|\n|最好|尾插|O(1)|\n|最坏|头插|O(n)|\n|平均|$$p=\\frac{1}{n+1}$$ $$1p+2p+...+np$$|O(n)|\n\n||按位查找|按值查找|\n|:---:|:---:|:---:|\n|最好|O(1)|O(1)|\n|最坏|O(1)|O(n)|\n|平均|O(1)|O(n)|","source":"_posts/datastruct/2_linearlist/1_linearlist.md","raw":"---\ntitle: 2.1 线性表的定义\ndate: 2023-02-01 00:00:00\ntags: [数据结构,线性表]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png)\n![数据结构](/img/datastruct/2_linearlist/1.png)\n\n\n## 2.1 定义\n- L=(a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,...,a<sub>n</sub>)\n- 有限个相同数据类型的数据元素的有序序列\n- 一些概念\n   \n   ·位序：数据元素在线性表中的位置\n   \n   ·表头：第一个元素a<sub>1</sub>\n\n   ·表尾：最后一个元素a<sub>n</sub>\n\n- 一些性质\n\n   ·除第一个元素外，每个元素有且仅有一个直接前驱\n   ·除最后一个元素外，每个元素有且仅有一个直接后继\n## 2.2 基本操作\n\n|函数|功能|说明|\n|:---:|:---:|:---:|\n|InitList(&L)|初始化|构造一个空的线性表L，分配内存空间|\n|DestroyList(&L)|销毁|销毁线性表，并释放内存空间|\n|ClearList(&L)|清空|清空线性表，保留内存空间|\n|Empty(L)|判空|判断线性表是否为空|\n|Length(L)|求长|返回线性表的长度|\n|GetElem(L,i,&e)|取值|返回线性表中第i个元素的值|\n|LocateElem(L,e,compare())|查找|返回线性表中第一个与e满足compare()的元素的位序|\n|PriorElem(L,cur_e,&pre_e)|前驱|返回线性表中元素cur_e的前驱元素的值|\n|NextElem(L,cur_e,&next_e)|后继|返回线性表中元素cur_e的后继元素的值|\n|ListInsert(&L,i,e)|插入|在线性表的第i个位置插入元素e|\n|ListDelete(&L,i,&e)|删除|删除线性表中第i个位置的元素，并返回其值|\n|ListTraverse(L,visit())|遍历|依次对线性表中每个元素调用visit()函数|\n\n## 2.3 顺序表\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/2.png)\n![数据结构](/img/datastruct/2_linearlist/2.png)\n### 2.3.1 顺序存储实现线性表\n- 静态分配\n```c\n/*\n实现顺序表\n静态分配\n*/\n#include<stdio.h>\n#define MaxSize 10\ntypedef struct\n{\n    int data[MaxSize];\n    int length;\n}SqList;\n\n//初始化\nvoid InitList(SqList* L){\n    L->length=0;//逻辑归零\n}\n\nint main(){\n    SqList L;\n    InitList(&L);\n    //违规访问\n    for(int i=0;i<MaxSize;i++){\n        printf(\"ta[%d]=%d\\n\",i,L.data[i]);\n    }\n    return 0;\n}\n```\n- 动态分配\n```c\n/*\n顺序表\n动态分配\n*/\n#include<stdio.h>\n#include<stdlib.h>\n#define InitSize 10 //默认最大长度\ntypedef struct\n{\n    int *data ;//指针，用于动态分配\n    int MaxSize; \n    int length;\n}SeqList;\n//初始化\nvoid InitList(SeqList *L){\n    //申请空间\n    L->data=(int*)malloc(InitSize*sizeof(int));\n    L->length=0;\n    L->MaxSize=InitSize;\n}\n\n//动态增长\nvoid IncreaseSize(SeqList *L, int len){\n    int* p=L->data;\n    L->data=(int *)malloc((L->MaxSize+len)*sizeof(int));\n    //将数据复制到新的区域\n    int i=0;\n    for(i=0;i<L->length;i++){\n        L->data[i]=p[i];\n    }\n    L->MaxSize=L->MaxSize+len;\n    free(p);\n}\n\nint main(){\n    SeqList L;\n    //初始化\n    InitList(&L);\n    printf(\"最大长度：%d\\n\",L.MaxSize);\n    //增长\n    IncreaseSize(&L,5);\n    printf(\"+5\\n\");\n    printf(\"最大长度：%d\",L.MaxSize);\n    return 0;\n}\n```\n- 基本操作\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/3.png)\n![数据结构](/img/datastruct/2_linearlist/3.png)\n![](../../../../themes/yilia/source/img/datastruct/2_linearlist/4.png)\n![数据结构](/img/datastruct/2_linearlist/4.png)\n```c\n/*\n顺序表\n静态分配\n*/\n#include<stdio.h>\n#define MaxSize 10\ntypedef struct\n{\n    int data[MaxSize];\n    int length;\n}SqList;\n//初始化\nvoid InitList(SqList* L){\n    L->length=0;//逻辑上置零\n}\nvoid PrintList(SqList L){\n    //判空\n    if(L.data==NULL || L.length==0)\n        return;\n    int i=0;\n    for(i=0;i<L.length;i++)\n        printf(\"%d \",L.data[i]);\n}\n\nint main(){\n    SqList L;\n    InitList(&L);\n    ListInsert(&L,1,1);\n    ListInsert(&L,2,2);\n    ListInsert(&L,3,4);\n    ListInsert(&L,4,5);\n    printf(\"前：\");\n    PrintList(L);\n    ListInsert(&L,3,3);\n    printf(\"\\n位序：3，插入：3\");\n    printf(\"\\n后：\");\n    PrintList(L);\n\n    //删除\n    int x=0;\n    ListDelete(&L,1,&x);\n    printf(\"\\n删除第%d个元素：%d\",1,x);\n    printf(\"\\n删除后：\");\n    PrintList(L);\n\n    ListDelete(&L,2,&x);\n    printf(\"\\n删除第%d个元素：%d\",2,x);\n    printf(\"\\n删除后：\");\n    PrintList(L);\n\n    printf(\"\\n删除第%d个元素：%d\",L.length,x);\n    ListDelete(&L,L.length,&x);\n    printf(\"\\n删除后：\");\n    PrintList(L);\n\n    //按位查找\n    printf(\"\\n第1个：%d\",GetElement(L,0));\n    printf(\"\\n第2个：%d\",GetElement(L,1));\n\n    //按值查找\n    printf(\"\\n2的位序：%d\",LocateElement(L,2));\n    printf(\"\\n4的位序：：%d\",LocateElement(L,4));\n    printf(\"\\n5的位序：：%d\",LocateElement(L,5));\n    return 0;\n}\n\n//位序插入\nint ListInsert(SqList *L,int i, int e){\n    //满否\n    if (L->length>=MaxSize || i<1 || i>L->length+1) return 0;\n    int j=0;\n    for(j=L->length;j>=i;j--)//后移\n        L->data[j]=L->data[j-1];\n    L->data[j]=e;//插入\n    return ++(L->length);\n}\n\n//删除\nint ListDelete(SqList *L,int i, int *e){\n    if(i<1|| i>L->length) return 0;\n    *e=L->data[i-1];\n    int j=i;\n    for(;j<L->length;j++) L->data[j-1]=L->data[j];\n    L->length--;\n    return 1;\n}\n\n//按位查找\nint GetElement(SqList L,int i){\n    if(i<1 || i>L.length) return 0;\n    return L.data[i-1];\n}\n\n//按值查找\nint LocateElement(SqList L,int e){\n    int i=0;\n    for(;i<L.length;i++)\n        if(L.data[i]==e)\n            return i+1;\n    return -1;\n}\n```\n\n\n||按位插入/删除||\n|:---:|:---:|:---:|\n|最好|尾插|O(1)|\n|最坏|头插|O(n)|\n|平均|$$p=\\frac{1}{n+1}$$ $$1p+2p+...+np$$|O(n)|\n\n||按位查找|按值查找|\n|:---:|:---:|:---:|\n|最好|O(1)|O(1)|\n|最坏|O(1)|O(n)|\n|平均|O(1)|O(n)|","slug":"datastruct/2_linearlist/1_linearlist","published":1,"updated":"2023-10-23T12:02:34.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr1000uwovw8qjwg88j","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1 定义\"></a>2.1 定义</h2><ul>\n<li><p>L&#x3D;(a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,…,a<sub>n</sub>)</p>\n</li>\n<li><p>有限个相同数据类型的数据元素的有序序列</p>\n</li>\n<li><p>一些概念</p>\n<p> ·位序：数据元素在线性表中的位置</p>\n<p> ·表头：第一个元素a<sub>1</sub></p>\n<p> ·表尾：最后一个元素a<sub>n</sub></p>\n</li>\n<li><p>一些性质</p>\n<p> ·除第一个元素外，每个元素有且仅有一个直接前驱<br> ·除最后一个元素外，每个元素有且仅有一个直接后继</p>\n</li>\n</ul>\n<h2 id=\"2-2-基本操作\"><a href=\"#2-2-基本操作\" class=\"headerlink\" title=\"2.2 基本操作\"></a>2.2 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">InitList(&amp;L)</td>\n<td align=\"center\">初始化</td>\n<td align=\"center\">构造一个空的线性表L，分配内存空间</td>\n</tr>\n<tr>\n<td align=\"center\">DestroyList(&amp;L)</td>\n<td align=\"center\">销毁</td>\n<td align=\"center\">销毁线性表，并释放内存空间</td>\n</tr>\n<tr>\n<td align=\"center\">ClearList(&amp;L)</td>\n<td align=\"center\">清空</td>\n<td align=\"center\">清空线性表，保留内存空间</td>\n</tr>\n<tr>\n<td align=\"center\">Empty(L)</td>\n<td align=\"center\">判空</td>\n<td align=\"center\">判断线性表是否为空</td>\n</tr>\n<tr>\n<td align=\"center\">Length(L)</td>\n<td align=\"center\">求长</td>\n<td align=\"center\">返回线性表的长度</td>\n</tr>\n<tr>\n<td align=\"center\">GetElem(L,i,&amp;e)</td>\n<td align=\"center\">取值</td>\n<td align=\"center\">返回线性表中第i个元素的值</td>\n</tr>\n<tr>\n<td align=\"center\">LocateElem(L,e,compare())</td>\n<td align=\"center\">查找</td>\n<td align=\"center\">返回线性表中第一个与e满足compare()的元素的位序</td>\n</tr>\n<tr>\n<td align=\"center\">PriorElem(L,cur_e,&amp;pre_e)</td>\n<td align=\"center\">前驱</td>\n<td align=\"center\">返回线性表中元素cur_e的前驱元素的值</td>\n</tr>\n<tr>\n<td align=\"center\">NextElem(L,cur_e,&amp;next_e)</td>\n<td align=\"center\">后继</td>\n<td align=\"center\">返回线性表中元素cur_e的后继元素的值</td>\n</tr>\n<tr>\n<td align=\"center\">ListInsert(&amp;L,i,e)</td>\n<td align=\"center\">插入</td>\n<td align=\"center\">在线性表的第i个位置插入元素e</td>\n</tr>\n<tr>\n<td align=\"center\">ListDelete(&amp;L,i,&amp;e)</td>\n<td align=\"center\">删除</td>\n<td align=\"center\">删除线性表中第i个位置的元素，并返回其值</td>\n</tr>\n<tr>\n<td align=\"center\">ListTraverse(L,visit())</td>\n<td align=\"center\">遍历</td>\n<td align=\"center\">依次对线性表中每个元素调用visit()函数</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-3-顺序表\"><a href=\"#2-3-顺序表\" class=\"headerlink\" title=\"2.3 顺序表\"></a>2.3 顺序表</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/2.png\"><br><img src=\"/img/datastruct/2_linearlist/2.png\" alt=\"数据结构\"></p>\n<h3 id=\"2-3-1-顺序存储实现线性表\"><a href=\"#2-3-1-顺序存储实现线性表\" class=\"headerlink\" title=\"2.3.1 顺序存储实现线性表\"></a>2.3.1 顺序存储实现线性表</h3><ul>\n<li>静态分配<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">实现顺序表</span></span><br><span class=\"line\"><span class=\"comment\">静态分配</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SqList* L)</span>&#123;</span><br><span class=\"line\">    L-&gt;length=<span class=\"number\">0</span>;<span class=\"comment\">//逻辑归零</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    InitList(&amp;L);</span><br><span class=\"line\">    <span class=\"comment\">//违规访问</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;MaxSize;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ta[%d]=%d\\n&quot;</span>,i,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>动态分配<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">顺序表</span></span><br><span class=\"line\"><span class=\"comment\">动态分配</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> InitSize 10 <span class=\"comment\">//默认最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *data ;<span class=\"comment\">//指针，用于动态分配</span></span><br><span class=\"line\">    <span class=\"type\">int</span> MaxSize; </span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SeqList;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SeqList *L)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//申请空间</span></span><br><span class=\"line\">    L-&gt;data=(<span class=\"type\">int</span>*)<span class=\"built_in\">malloc</span>(InitSize*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    L-&gt;length=<span class=\"number\">0</span>;</span><br><span class=\"line\">    L-&gt;MaxSize=InitSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//动态增长</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">IncreaseSize</span><span class=\"params\">(SeqList *L, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* p=L-&gt;data;</span><br><span class=\"line\">    L-&gt;data=(<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>((L-&gt;MaxSize+len)*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"comment\">//将数据复制到新的区域</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L-&gt;length;i++)&#123;</span><br><span class=\"line\">        L-&gt;data[i]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;MaxSize=L-&gt;MaxSize+len;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SeqList L;</span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    InitList(&amp;L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;最大长度：%d\\n&quot;</span>,L.MaxSize);</span><br><span class=\"line\">    <span class=\"comment\">//增长</span></span><br><span class=\"line\">    IncreaseSize(&amp;L,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;+5\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;最大长度：%d&quot;</span>,L.MaxSize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>基本操作<br><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/3.png\"><br><img src=\"/img/datastruct/2_linearlist/3.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/4.png\"><br><img src=\"/img/datastruct/2_linearlist/4.png\" alt=\"数据结构\"><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">顺序表</span></span><br><span class=\"line\"><span class=\"comment\">静态分配</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SqList* L)</span>&#123;</span><br><span class=\"line\">    L-&gt;length=<span class=\"number\">0</span>;<span class=\"comment\">//逻辑上置零</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintList</span><span class=\"params\">(SqList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.data==<span class=\"literal\">NULL</span> || L.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L.length;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,L.data[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    InitList(&amp;L);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;前：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">3</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n位序：3，插入：3&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    ListDelete(&amp;L,<span class=\"number\">1</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第%d个元素：%d&quot;</span>,<span class=\"number\">1</span>,x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListDelete(&amp;L,<span class=\"number\">2</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第%d个元素：%d&quot;</span>,<span class=\"number\">2</span>,x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第%d个元素：%d&quot;</span>,L.length,x);</span><br><span class=\"line\">    ListDelete(&amp;L,L.length,&amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n第1个：%d&quot;</span>,GetElement(L,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n第2个：%d&quot;</span>,GetElement(L,<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按值查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n2的位序：%d&quot;</span>,LocateElement(L,<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n4的位序：：%d&quot;</span>,LocateElement(L,<span class=\"number\">4</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n5的位序：：%d&quot;</span>,LocateElement(L,<span class=\"number\">5</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//位序插入</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//满否</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L-&gt;length&gt;=MaxSize || i&lt;<span class=\"number\">1</span> || i&gt;L-&gt;length+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=L-&gt;length;j&gt;=i;j--)<span class=\"comment\">//后移</span></span><br><span class=\"line\">        L-&gt;data[j]=L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    L-&gt;data[j]=e;<span class=\"comment\">//插入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++(L-&gt;length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>|| i&gt;L-&gt;length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *e=L-&gt;data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> j=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;j&lt;L-&gt;length;j++) L-&gt;data[j<span class=\"number\">-1</span>]=L-&gt;data[j];</span><br><span class=\"line\">    L-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetElement</span><span class=\"params\">(SqList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span> || i&gt;L.length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L.data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按值查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElement</span><span class=\"params\">(SqList L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i&lt;L.length;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.data[i]==e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">按位插入&#x2F;删除</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">最好</td>\n<td align=\"center\">尾插</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\">最坏</td>\n<td align=\"center\">头插</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">平均</td>\n<td align=\"center\">$$p&#x3D;\\frac{1}{n+1}$$ $$1p+2p+…+np$$</td>\n<td align=\"center\">O(n)</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">按位查找</th>\n<th align=\"center\">按值查找</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">最好</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\">最坏</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">平均</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/1.png\"><br><img src=\"/img/datastruct/2_linearlist/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1 定义\"></a>2.1 定义</h2><ul>\n<li><p>L&#x3D;(a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,…,a<sub>n</sub>)</p>\n</li>\n<li><p>有限个相同数据类型的数据元素的有序序列</p>\n</li>\n<li><p>一些概念</p>\n<p> ·位序：数据元素在线性表中的位置</p>\n<p> ·表头：第一个元素a<sub>1</sub></p>\n<p> ·表尾：最后一个元素a<sub>n</sub></p>\n</li>\n<li><p>一些性质</p>\n<p> ·除第一个元素外，每个元素有且仅有一个直接前驱<br> ·除最后一个元素外，每个元素有且仅有一个直接后继</p>\n</li>\n</ul>\n<h2 id=\"2-2-基本操作\"><a href=\"#2-2-基本操作\" class=\"headerlink\" title=\"2.2 基本操作\"></a>2.2 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">InitList(&amp;L)</td>\n<td align=\"center\">初始化</td>\n<td align=\"center\">构造一个空的线性表L，分配内存空间</td>\n</tr>\n<tr>\n<td align=\"center\">DestroyList(&amp;L)</td>\n<td align=\"center\">销毁</td>\n<td align=\"center\">销毁线性表，并释放内存空间</td>\n</tr>\n<tr>\n<td align=\"center\">ClearList(&amp;L)</td>\n<td align=\"center\">清空</td>\n<td align=\"center\">清空线性表，保留内存空间</td>\n</tr>\n<tr>\n<td align=\"center\">Empty(L)</td>\n<td align=\"center\">判空</td>\n<td align=\"center\">判断线性表是否为空</td>\n</tr>\n<tr>\n<td align=\"center\">Length(L)</td>\n<td align=\"center\">求长</td>\n<td align=\"center\">返回线性表的长度</td>\n</tr>\n<tr>\n<td align=\"center\">GetElem(L,i,&amp;e)</td>\n<td align=\"center\">取值</td>\n<td align=\"center\">返回线性表中第i个元素的值</td>\n</tr>\n<tr>\n<td align=\"center\">LocateElem(L,e,compare())</td>\n<td align=\"center\">查找</td>\n<td align=\"center\">返回线性表中第一个与e满足compare()的元素的位序</td>\n</tr>\n<tr>\n<td align=\"center\">PriorElem(L,cur_e,&amp;pre_e)</td>\n<td align=\"center\">前驱</td>\n<td align=\"center\">返回线性表中元素cur_e的前驱元素的值</td>\n</tr>\n<tr>\n<td align=\"center\">NextElem(L,cur_e,&amp;next_e)</td>\n<td align=\"center\">后继</td>\n<td align=\"center\">返回线性表中元素cur_e的后继元素的值</td>\n</tr>\n<tr>\n<td align=\"center\">ListInsert(&amp;L,i,e)</td>\n<td align=\"center\">插入</td>\n<td align=\"center\">在线性表的第i个位置插入元素e</td>\n</tr>\n<tr>\n<td align=\"center\">ListDelete(&amp;L,i,&amp;e)</td>\n<td align=\"center\">删除</td>\n<td align=\"center\">删除线性表中第i个位置的元素，并返回其值</td>\n</tr>\n<tr>\n<td align=\"center\">ListTraverse(L,visit())</td>\n<td align=\"center\">遍历</td>\n<td align=\"center\">依次对线性表中每个元素调用visit()函数</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-3-顺序表\"><a href=\"#2-3-顺序表\" class=\"headerlink\" title=\"2.3 顺序表\"></a>2.3 顺序表</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/2.png\"><br><img src=\"/img/datastruct/2_linearlist/2.png\" alt=\"数据结构\"></p>\n<h3 id=\"2-3-1-顺序存储实现线性表\"><a href=\"#2-3-1-顺序存储实现线性表\" class=\"headerlink\" title=\"2.3.1 顺序存储实现线性表\"></a>2.3.1 顺序存储实现线性表</h3><ul>\n<li>静态分配<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">实现顺序表</span></span><br><span class=\"line\"><span class=\"comment\">静态分配</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SqList* L)</span>&#123;</span><br><span class=\"line\">    L-&gt;length=<span class=\"number\">0</span>;<span class=\"comment\">//逻辑归零</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    InitList(&amp;L);</span><br><span class=\"line\">    <span class=\"comment\">//违规访问</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;MaxSize;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ta[%d]=%d\\n&quot;</span>,i,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>动态分配<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">顺序表</span></span><br><span class=\"line\"><span class=\"comment\">动态分配</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> InitSize 10 <span class=\"comment\">//默认最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *data ;<span class=\"comment\">//指针，用于动态分配</span></span><br><span class=\"line\">    <span class=\"type\">int</span> MaxSize; </span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SeqList;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SeqList *L)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//申请空间</span></span><br><span class=\"line\">    L-&gt;data=(<span class=\"type\">int</span>*)<span class=\"built_in\">malloc</span>(InitSize*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    L-&gt;length=<span class=\"number\">0</span>;</span><br><span class=\"line\">    L-&gt;MaxSize=InitSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//动态增长</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">IncreaseSize</span><span class=\"params\">(SeqList *L, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* p=L-&gt;data;</span><br><span class=\"line\">    L-&gt;data=(<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>((L-&gt;MaxSize+len)*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"comment\">//将数据复制到新的区域</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L-&gt;length;i++)&#123;</span><br><span class=\"line\">        L-&gt;data[i]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;MaxSize=L-&gt;MaxSize+len;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SeqList L;</span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    InitList(&amp;L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;最大长度：%d\\n&quot;</span>,L.MaxSize);</span><br><span class=\"line\">    <span class=\"comment\">//增长</span></span><br><span class=\"line\">    IncreaseSize(&amp;L,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;+5\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;最大长度：%d&quot;</span>,L.MaxSize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>基本操作<br><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/3.png\"><br><img src=\"/img/datastruct/2_linearlist/3.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/2_linearlist/4.png\"><br><img src=\"/img/datastruct/2_linearlist/4.png\" alt=\"数据结构\"><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">顺序表</span></span><br><span class=\"line\"><span class=\"comment\">静态分配</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SqList* L)</span>&#123;</span><br><span class=\"line\">    L-&gt;length=<span class=\"number\">0</span>;<span class=\"comment\">//逻辑上置零</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PrintList</span><span class=\"params\">(SqList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L.data==<span class=\"literal\">NULL</span> || L.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L.length;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,L.data[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    InitList(&amp;L);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;前：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">3</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n位序：3，插入：3&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    ListDelete(&amp;L,<span class=\"number\">1</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第%d个元素：%d&quot;</span>,<span class=\"number\">1</span>,x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    ListDelete(&amp;L,<span class=\"number\">2</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第%d个元素：%d&quot;</span>,<span class=\"number\">2</span>,x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除第%d个元素：%d&quot;</span>,L.length,x);</span><br><span class=\"line\">    ListDelete(&amp;L,L.length,&amp;x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n删除后：&quot;</span>);</span><br><span class=\"line\">    PrintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按位查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n第1个：%d&quot;</span>,GetElement(L,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n第2个：%d&quot;</span>,GetElement(L,<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按值查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n2的位序：%d&quot;</span>,LocateElement(L,<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n4的位序：：%d&quot;</span>,LocateElement(L,<span class=\"number\">4</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n5的位序：：%d&quot;</span>,LocateElement(L,<span class=\"number\">5</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//位序插入</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//满否</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L-&gt;length&gt;=MaxSize || i&lt;<span class=\"number\">1</span> || i&gt;L-&gt;length+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=L-&gt;length;j&gt;=i;j--)<span class=\"comment\">//后移</span></span><br><span class=\"line\">        L-&gt;data[j]=L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    L-&gt;data[j]=e;<span class=\"comment\">//插入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++(L-&gt;length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span>|| i&gt;L-&gt;length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *e=L-&gt;data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> j=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;j&lt;L-&gt;length;j++) L-&gt;data[j<span class=\"number\">-1</span>]=L-&gt;data[j];</span><br><span class=\"line\">    L-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按位查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetElement</span><span class=\"params\">(SqList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">1</span> || i&gt;L.length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L.data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按值查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElement</span><span class=\"params\">(SqList L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i&lt;L.length;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L.data[i]==e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">按位插入&#x2F;删除</th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">最好</td>\n<td align=\"center\">尾插</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\">最坏</td>\n<td align=\"center\">头插</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">平均</td>\n<td align=\"center\">$$p&#x3D;\\frac{1}{n+1}$$ $$1p+2p+…+np$$</td>\n<td align=\"center\">O(n)</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">按位查找</th>\n<th align=\"center\">按值查找</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">最好</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\">最坏</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">平均</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n</tbody></table>"},{"title":"3.1 栈的定义","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/1.png)\n![数据结构](/img/datastruct/3_stack/stack/1.png)\n\n\n## 3.1 定义\n- 栈是限定仅在表尾进行插入和删除操作的线性表\n\n## 3.2 基本操作\n|操作|描述|\n|:---:|:---:|\n|InitStack(&S)|初始化栈S，构造一个空栈|\n|DestroyStack(&S)|若栈存在，则销毁它|\n|Push(&S,x)|若栈S存在，插入新元素x到栈S中并成为栈顶元素|\n|Pop(&S,&x)|删除栈S中栈顶元素，并用x返回其值|\n|GetTop(S,&x)|返回栈S中栈顶元素，不修改栈顶指针|\n|StackEmpty(S)|若栈为空，返回true，否则返回false|\n\n- （常考：给你一个出栈序列，问你能不能通过入栈操作得到这个出栈序列）共有卡特兰数种出栈序列：$C_n=\\frac{1}{n+1}\\binom{2n}{n}$\n\n## 3.3 顺序栈\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/2.png)\n![数据结构](/img/datastruct/3_stack/stack/2.png)\n\n- 顺序栈的实现\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXSIZE 10\ntypedef struct{\n    int data[MAXSIZE];\n    int top;\n} SqStack;\n\n//初始化\nvoid InitStack(SqStack *S){\n    S->top=-1;\n}\n\n//判空\nint StackEmpty(SqStack S){\n    if(S.top==-1)\n        return 1;\n    else\n        return 0;\n}\n\n//入栈\nint Push(SqStack *S, int x){\n    if(S->top==MAXSIZE-1)\n        return 0;\n    S->top++;\n    S->data[S->top]=x;\n    return 1;\n}\n\n//出栈\nint Pop(SqStack *S, int *x){\n    if(S->top==-1)\n        return 0;\n    *x=S->data[S->top];\n    S->top--;\n    return 1;\n}\n\n//取栈顶元素\nint GetTop(SqStack S, int *x){\n    if(S.top==-1)\n        return 0;\n    *x=S.data[S.top];\n    return 1;\n}\n```\n\n- 共享栈\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/3.png)\n![数据结构](/img/datastruct/3_stack/stack/3.png)\n\n## 3.4 链栈\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/4.png)\n![数据结构](/img/datastruct/3_stack/stack/4.png)\n- 链栈的实现\n```c\n\n```","source":"_posts/datastruct/3_stack/1_stack.md","raw":"---\ntitle: 3.1 栈的定义\ndate: 2023-08-07 00:00:00\ntags: [数据结构,栈]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/1.png)\n![数据结构](/img/datastruct/3_stack/stack/1.png)\n\n\n## 3.1 定义\n- 栈是限定仅在表尾进行插入和删除操作的线性表\n\n## 3.2 基本操作\n|操作|描述|\n|:---:|:---:|\n|InitStack(&S)|初始化栈S，构造一个空栈|\n|DestroyStack(&S)|若栈存在，则销毁它|\n|Push(&S,x)|若栈S存在，插入新元素x到栈S中并成为栈顶元素|\n|Pop(&S,&x)|删除栈S中栈顶元素，并用x返回其值|\n|GetTop(S,&x)|返回栈S中栈顶元素，不修改栈顶指针|\n|StackEmpty(S)|若栈为空，返回true，否则返回false|\n\n- （常考：给你一个出栈序列，问你能不能通过入栈操作得到这个出栈序列）共有卡特兰数种出栈序列：$C_n=\\frac{1}{n+1}\\binom{2n}{n}$\n\n## 3.3 顺序栈\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/2.png)\n![数据结构](/img/datastruct/3_stack/stack/2.png)\n\n- 顺序栈的实现\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXSIZE 10\ntypedef struct{\n    int data[MAXSIZE];\n    int top;\n} SqStack;\n\n//初始化\nvoid InitStack(SqStack *S){\n    S->top=-1;\n}\n\n//判空\nint StackEmpty(SqStack S){\n    if(S.top==-1)\n        return 1;\n    else\n        return 0;\n}\n\n//入栈\nint Push(SqStack *S, int x){\n    if(S->top==MAXSIZE-1)\n        return 0;\n    S->top++;\n    S->data[S->top]=x;\n    return 1;\n}\n\n//出栈\nint Pop(SqStack *S, int *x){\n    if(S->top==-1)\n        return 0;\n    *x=S->data[S->top];\n    S->top--;\n    return 1;\n}\n\n//取栈顶元素\nint GetTop(SqStack S, int *x){\n    if(S.top==-1)\n        return 0;\n    *x=S.data[S.top];\n    return 1;\n}\n```\n\n- 共享栈\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/3.png)\n![数据结构](/img/datastruct/3_stack/stack/3.png)\n\n## 3.4 链栈\n![](../../../../themes/yilia/source/img/datastruct/3_stack/stack/4.png)\n![数据结构](/img/datastruct/3_stack/stack/4.png)\n- 链栈的实现\n```c\n\n```","slug":"datastruct/3_stack/1_stack","published":1,"updated":"2023-10-23T13:20:15.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr2000xwovw2s77cdjp","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/1.png\"><br><img src=\"/img/datastruct/3_stack/stack/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-1-定义\"><a href=\"#3-1-定义\" class=\"headerlink\" title=\"3.1 定义\"></a>3.1 定义</h2><ul>\n<li>栈是限定仅在表尾进行插入和删除操作的线性表</li>\n</ul>\n<h2 id=\"3-2-基本操作\"><a href=\"#3-2-基本操作\" class=\"headerlink\" title=\"3.2 基本操作\"></a>3.2 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">InitStack(&amp;S)</td>\n<td align=\"center\">初始化栈S，构造一个空栈</td>\n</tr>\n<tr>\n<td align=\"center\">DestroyStack(&amp;S)</td>\n<td align=\"center\">若栈存在，则销毁它</td>\n</tr>\n<tr>\n<td align=\"center\">Push(&amp;S,x)</td>\n<td align=\"center\">若栈S存在，插入新元素x到栈S中并成为栈顶元素</td>\n</tr>\n<tr>\n<td align=\"center\">Pop(&amp;S,&amp;x)</td>\n<td align=\"center\">删除栈S中栈顶元素，并用x返回其值</td>\n</tr>\n<tr>\n<td align=\"center\">GetTop(S,&amp;x)</td>\n<td align=\"center\">返回栈S中栈顶元素，不修改栈顶指针</td>\n</tr>\n<tr>\n<td align=\"center\">StackEmpty(S)</td>\n<td align=\"center\">若栈为空，返回true，否则返回false</td>\n</tr>\n</tbody></table>\n<ul>\n<li>（常考：给你一个出栈序列，问你能不能通过入栈操作得到这个出栈序列）共有卡特兰数种出栈序列：$C_n&#x3D;\\frac{1}{n+1}\\binom{2n}{n}$</li>\n</ul>\n<h2 id=\"3-3-顺序栈\"><a href=\"#3-3-顺序栈\" class=\"headerlink\" title=\"3.3 顺序栈\"></a>3.3 顺序栈</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/2.png\"><br><img src=\"/img/datastruct/3_stack/stack/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>顺序栈的实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack *S)</span>&#123;</span><br><span class=\"line\">    S-&gt;top=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack S)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack *S, <span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==MAXSIZE<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    S-&gt;top++;</span><br><span class=\"line\">    S-&gt;data[S-&gt;top]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack *S, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S-&gt;data[S-&gt;top];</span><br><span class=\"line\">    S-&gt;top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取栈顶元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>共享栈<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/3.png\"><br><img src=\"/img/datastruct/3_stack/stack/3.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n<h2 id=\"3-4-链栈\"><a href=\"#3-4-链栈\" class=\"headerlink\" title=\"3.4 链栈\"></a>3.4 链栈</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/4.png\"><br><img src=\"/img/datastruct/3_stack/stack/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>链栈的实现<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/1.png\"><br><img src=\"/img/datastruct/3_stack/stack/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-1-定义\"><a href=\"#3-1-定义\" class=\"headerlink\" title=\"3.1 定义\"></a>3.1 定义</h2><ul>\n<li>栈是限定仅在表尾进行插入和删除操作的线性表</li>\n</ul>\n<h2 id=\"3-2-基本操作\"><a href=\"#3-2-基本操作\" class=\"headerlink\" title=\"3.2 基本操作\"></a>3.2 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">InitStack(&amp;S)</td>\n<td align=\"center\">初始化栈S，构造一个空栈</td>\n</tr>\n<tr>\n<td align=\"center\">DestroyStack(&amp;S)</td>\n<td align=\"center\">若栈存在，则销毁它</td>\n</tr>\n<tr>\n<td align=\"center\">Push(&amp;S,x)</td>\n<td align=\"center\">若栈S存在，插入新元素x到栈S中并成为栈顶元素</td>\n</tr>\n<tr>\n<td align=\"center\">Pop(&amp;S,&amp;x)</td>\n<td align=\"center\">删除栈S中栈顶元素，并用x返回其值</td>\n</tr>\n<tr>\n<td align=\"center\">GetTop(S,&amp;x)</td>\n<td align=\"center\">返回栈S中栈顶元素，不修改栈顶指针</td>\n</tr>\n<tr>\n<td align=\"center\">StackEmpty(S)</td>\n<td align=\"center\">若栈为空，返回true，否则返回false</td>\n</tr>\n</tbody></table>\n<ul>\n<li>（常考：给你一个出栈序列，问你能不能通过入栈操作得到这个出栈序列）共有卡特兰数种出栈序列：$C_n&#x3D;\\frac{1}{n+1}\\binom{2n}{n}$</li>\n</ul>\n<h2 id=\"3-3-顺序栈\"><a href=\"#3-3-顺序栈\" class=\"headerlink\" title=\"3.3 顺序栈\"></a>3.3 顺序栈</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/2.png\"><br><img src=\"/img/datastruct/3_stack/stack/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>顺序栈的实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack *S)</span>&#123;</span><br><span class=\"line\">    S-&gt;top=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack S)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack *S, <span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==MAXSIZE<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    S-&gt;top++;</span><br><span class=\"line\">    S-&gt;data[S-&gt;top]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack *S, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S-&gt;data[S-&gt;top];</span><br><span class=\"line\">    S-&gt;top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取栈顶元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>共享栈<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/3.png\"><br><img src=\"/img/datastruct/3_stack/stack/3.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n<h2 id=\"3-4-链栈\"><a href=\"#3-4-链栈\" class=\"headerlink\" title=\"3.4 链栈\"></a>3.4 链栈</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/stack/4.png\"><br><img src=\"/img/datastruct/3_stack/stack/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>链栈的实现<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"3.2 队列","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/1.png)\n![数据结构](/img/datastruct/3_stack/queue/1.png)\n\n\n## 3.2.1 定义\n- 队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表\n\n## 3.2.2 基本操作\n|操作|描述|\n|:---:|:---:|\n|InitQueue(&Q)|初始化队列Q，构造一个空队列|\n|DestroyQueue(&Q)|若队列Q存在，则销毁它|\n|EnQueue(&Q,x)|若队列Q存在，插入新元素x到队列Q中并成为队尾元素|\n|DeQueue(&Q,&x)|删除队列Q中队头元素，并用x返回其值|\n|GetHead(Q,&x)|返回队列Q中队头元素，不修改队头指针|\n|QueueEmpty(Q)|若队列为空，返回true，否则返回false|\n\n## 3.2.3 顺序队列\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/2.png)\n![数据结构](/img/datastruct/3_stack/queue/2.png)\n\n- 顺序队列的实现\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXSIZE 10\ntypedef struct{\n    int data[MAXSIZE];\n    int front,rear;\n} SqQueue;\n\n//初始化\nvoid InitQueue(SqQueue *Q){\n    int i;\n    for(i=0;i<MAXSIZE;i++)\n        Q->data[i]=0;\n}\n\n//判空\nint QueueEmpty(SqQueue Q){\n    if(Q.front==Q.rear)\n        return 1;\n    else\n        return 0;\n}\n\n//入队\nint EnQueue(SqQueue *Q, int x){\n    if((Q->rear+1)%MAXSIZE==Q->front)\n        return 0;\n    Q->data[Q->rear]=x;\n    Q->rear=(Q->rear+1)%MAXSIZE;\n    return 1;\n}\n\n//出队\nint DeQueue(SqQueue *Q, int *x){\n    if(Q->front==Q->rear)\n        return 0;\n    *x=Q->data[Q->front];\n    Q->front=(Q->front+1)%MAXSIZE;\n    return 1;\n}\n\n```\n-  循环队列\n    - 入队：\n    \n            Q.data[Q.rear]=x\n            Q.rear=(Q.rear+1)%MaxSize\n\n    - 出队：\n\n            x=Q.data[Q.front]\n            Q.front=(Q.front+1)%MaxSize \n\n\n    - 元素个数：\n            (rear+MaxSize-front)%MaxSize\n\n||队满|队空|\n|:---:|:---:|:---:|\n|1|(Q.rear+1)%MaxSize==Q.front|Q.rear==Q.front\n|2|size==MaxSize|size=0\n(删除成功时flag=0,插入成功时flag=1)|front==rear && flag==1|front==rear && flag==0\n\n## 3.2.4 链式队列\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/3.png)\n![数据结构](/img/datastruct/3_stack/queue/3.png)\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef struct LinkNode\n{\n    int data;\n    struct LinkNode *next;\n}LinkNode;\n\ntypedef struct\n{\n    LinkNode *front,*rear;\n}LinkQueue;\n\n//初始化\nvoid InitQueue(LinkQueue *Q){\n    Q->front=Q->rear=(LinkNode*)malloc(sizeof(LinkNode));\n    Q->front->next=NULL;\n}\n\n//判空\nint QueueEmpty(LinkQueue Q){\n    if(Q.front==Q.rear)\n        return 1;\n    else\n        return 0;\n}\n\n//入队\nint EnQueue(LinkQueue *Q, int x){\n    LinkNode *s=(LinkNode*)malloc(sizeof(LinkNode));\n    s->data=x;\n    s->next=NULL;\n    Q->rear->next=s;\n    Q->rear=s;\n    return 1;\n}\n\n//出队\nint DeQueue(LinkQueue *Q, int *x){\n    if(Q->front==Q->rear)\n        return 0;\n    LinkNode *p=Q->front->next;\n    *x=p->data;\n    Q->front->next=p->next;\n    if(Q->rear==p)\n        Q->rear=Q->front;\n    free(p);\n    return 1;\n}\n```\n\n- 双端队列\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/4.png)\n![数据结构](/img/datastruct/3_stack/queue/4.png)\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/5.png)\n![数据结构](/img/datastruct/3_stack/queue/5.png)","source":"_posts/datastruct/3_stack/2_queue.md","raw":"---\ntitle: 3.2 队列\ndate: 2023-08-07 00:00:00\ntags: [数据结构,队列]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/1.png)\n![数据结构](/img/datastruct/3_stack/queue/1.png)\n\n\n## 3.2.1 定义\n- 队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表\n\n## 3.2.2 基本操作\n|操作|描述|\n|:---:|:---:|\n|InitQueue(&Q)|初始化队列Q，构造一个空队列|\n|DestroyQueue(&Q)|若队列Q存在，则销毁它|\n|EnQueue(&Q,x)|若队列Q存在，插入新元素x到队列Q中并成为队尾元素|\n|DeQueue(&Q,&x)|删除队列Q中队头元素，并用x返回其值|\n|GetHead(Q,&x)|返回队列Q中队头元素，不修改队头指针|\n|QueueEmpty(Q)|若队列为空，返回true，否则返回false|\n\n## 3.2.3 顺序队列\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/2.png)\n![数据结构](/img/datastruct/3_stack/queue/2.png)\n\n- 顺序队列的实现\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#define MAXSIZE 10\ntypedef struct{\n    int data[MAXSIZE];\n    int front,rear;\n} SqQueue;\n\n//初始化\nvoid InitQueue(SqQueue *Q){\n    int i;\n    for(i=0;i<MAXSIZE;i++)\n        Q->data[i]=0;\n}\n\n//判空\nint QueueEmpty(SqQueue Q){\n    if(Q.front==Q.rear)\n        return 1;\n    else\n        return 0;\n}\n\n//入队\nint EnQueue(SqQueue *Q, int x){\n    if((Q->rear+1)%MAXSIZE==Q->front)\n        return 0;\n    Q->data[Q->rear]=x;\n    Q->rear=(Q->rear+1)%MAXSIZE;\n    return 1;\n}\n\n//出队\nint DeQueue(SqQueue *Q, int *x){\n    if(Q->front==Q->rear)\n        return 0;\n    *x=Q->data[Q->front];\n    Q->front=(Q->front+1)%MAXSIZE;\n    return 1;\n}\n\n```\n-  循环队列\n    - 入队：\n    \n            Q.data[Q.rear]=x\n            Q.rear=(Q.rear+1)%MaxSize\n\n    - 出队：\n\n            x=Q.data[Q.front]\n            Q.front=(Q.front+1)%MaxSize \n\n\n    - 元素个数：\n            (rear+MaxSize-front)%MaxSize\n\n||队满|队空|\n|:---:|:---:|:---:|\n|1|(Q.rear+1)%MaxSize==Q.front|Q.rear==Q.front\n|2|size==MaxSize|size=0\n(删除成功时flag=0,插入成功时flag=1)|front==rear && flag==1|front==rear && flag==0\n\n## 3.2.4 链式队列\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/3.png)\n![数据结构](/img/datastruct/3_stack/queue/3.png)\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\ntypedef struct LinkNode\n{\n    int data;\n    struct LinkNode *next;\n}LinkNode;\n\ntypedef struct\n{\n    LinkNode *front,*rear;\n}LinkQueue;\n\n//初始化\nvoid InitQueue(LinkQueue *Q){\n    Q->front=Q->rear=(LinkNode*)malloc(sizeof(LinkNode));\n    Q->front->next=NULL;\n}\n\n//判空\nint QueueEmpty(LinkQueue Q){\n    if(Q.front==Q.rear)\n        return 1;\n    else\n        return 0;\n}\n\n//入队\nint EnQueue(LinkQueue *Q, int x){\n    LinkNode *s=(LinkNode*)malloc(sizeof(LinkNode));\n    s->data=x;\n    s->next=NULL;\n    Q->rear->next=s;\n    Q->rear=s;\n    return 1;\n}\n\n//出队\nint DeQueue(LinkQueue *Q, int *x){\n    if(Q->front==Q->rear)\n        return 0;\n    LinkNode *p=Q->front->next;\n    *x=p->data;\n    Q->front->next=p->next;\n    if(Q->rear==p)\n        Q->rear=Q->front;\n    free(p);\n    return 1;\n}\n```\n\n- 双端队列\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/4.png)\n![数据结构](/img/datastruct/3_stack/queue/4.png)\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/queue/5.png)\n![数据结构](/img/datastruct/3_stack/queue/5.png)","slug":"datastruct/3_stack/2_queue","published":1,"updated":"2023-10-23T12:08:20.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr30011wovw2w7z7nud","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/1.png\"><br><img src=\"/img/datastruct/3_stack/queue/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-2-1-定义\"><a href=\"#3-2-1-定义\" class=\"headerlink\" title=\"3.2.1 定义\"></a>3.2.1 定义</h2><ul>\n<li>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表</li>\n</ul>\n<h2 id=\"3-2-2-基本操作\"><a href=\"#3-2-2-基本操作\" class=\"headerlink\" title=\"3.2.2 基本操作\"></a>3.2.2 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">InitQueue(&amp;Q)</td>\n<td align=\"center\">初始化队列Q，构造一个空队列</td>\n</tr>\n<tr>\n<td align=\"center\">DestroyQueue(&amp;Q)</td>\n<td align=\"center\">若队列Q存在，则销毁它</td>\n</tr>\n<tr>\n<td align=\"center\">EnQueue(&amp;Q,x)</td>\n<td align=\"center\">若队列Q存在，插入新元素x到队列Q中并成为队尾元素</td>\n</tr>\n<tr>\n<td align=\"center\">DeQueue(&amp;Q,&amp;x)</td>\n<td align=\"center\">删除队列Q中队头元素，并用x返回其值</td>\n</tr>\n<tr>\n<td align=\"center\">GetHead(Q,&amp;x)</td>\n<td align=\"center\">返回队列Q中队头元素，不修改队头指针</td>\n</tr>\n<tr>\n<td align=\"center\">QueueEmpty(Q)</td>\n<td align=\"center\">若队列为空，返回true，否则返回false</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-3-顺序队列\"><a href=\"#3-2-3-顺序队列\" class=\"headerlink\" title=\"3.2.3 顺序队列\"></a>3.2.3 顺序队列</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/2.png\"><br><img src=\"/img/datastruct/3_stack/queue/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li>顺序队列的实现<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> front,rear;</span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue *Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;MAXSIZE;i++)</span><br><span class=\"line\">        Q-&gt;data[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">QueueEmpty</span><span class=\"params\">(SqQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front==Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue *Q, <span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((Q-&gt;rear+<span class=\"number\">1</span>)%MAXSIZE==Q-&gt;front)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    Q-&gt;data[Q-&gt;rear]=x;</span><br><span class=\"line\">    Q-&gt;rear=(Q-&gt;rear+<span class=\"number\">1</span>)%MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue *Q, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q-&gt;front==Q-&gt;rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=Q-&gt;data[Q-&gt;front];</span><br><span class=\"line\">    Q-&gt;front=(Q-&gt;front+<span class=\"number\">1</span>)%MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>循环队列<ul>\n<li><p>入队：</p>\n<pre><code>  Q.data[Q.rear]=x\n  Q.rear=(Q.rear+1)%MaxSize\n</code></pre>\n</li>\n<li><p>出队：</p>\n<pre><code>  x=Q.data[Q.front]\n  Q.front=(Q.front+1)%MaxSize \n</code></pre>\n</li>\n<li><p>元素个数：<br>  (rear+MaxSize-front)%MaxSize</p>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">队满</th>\n<th align=\"center\">队空</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">(Q.rear+1)%MaxSize&#x3D;&#x3D;Q.front</td>\n<td align=\"center\">Q.rear&#x3D;&#x3D;Q.front</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">size&#x3D;&#x3D;MaxSize</td>\n<td align=\"center\">size&#x3D;0</td>\n</tr>\n<tr>\n<td align=\"center\">(删除成功时flag&#x3D;0,插入成功时flag&#x3D;1)</td>\n<td align=\"center\">front&#x3D;&#x3D;rear &amp;&amp; flag&#x3D;&#x3D;1</td>\n<td align=\"center\">front&#x3D;&#x3D;rear &amp;&amp; flag&#x3D;&#x3D;0</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-4-链式队列\"><a href=\"#3-2-4-链式队列\" class=\"headerlink\" title=\"3.2.4 链式队列\"></a>3.2.4 链式队列</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/3.png\"><br><img src=\"/img/datastruct/3_stack/queue/3.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue *Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;front=Q-&gt;rear=(LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q-&gt;front-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">QueueEmpty</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front==Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue *Q, <span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    LinkNode *s=(LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    s-&gt;data=x;</span><br><span class=\"line\">    s-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Q-&gt;rear-&gt;next=s;</span><br><span class=\"line\">    Q-&gt;rear=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue *Q, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q-&gt;front==Q-&gt;rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LinkNode *p=Q-&gt;front-&gt;next;</span><br><span class=\"line\">    *x=p-&gt;data;</span><br><span class=\"line\">    Q-&gt;front-&gt;next=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q-&gt;rear==p)</span><br><span class=\"line\">        Q-&gt;rear=Q-&gt;front;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>双端队列<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/4.png\"><br><img src=\"/img/datastruct/3_stack/queue/4.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/5.png\"><br><img src=\"/img/datastruct/3_stack/queue/5.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/1.png\"><br><img src=\"/img/datastruct/3_stack/queue/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-2-1-定义\"><a href=\"#3-2-1-定义\" class=\"headerlink\" title=\"3.2.1 定义\"></a>3.2.1 定义</h2><ul>\n<li>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表</li>\n</ul>\n<h2 id=\"3-2-2-基本操作\"><a href=\"#3-2-2-基本操作\" class=\"headerlink\" title=\"3.2.2 基本操作\"></a>3.2.2 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">InitQueue(&amp;Q)</td>\n<td align=\"center\">初始化队列Q，构造一个空队列</td>\n</tr>\n<tr>\n<td align=\"center\">DestroyQueue(&amp;Q)</td>\n<td align=\"center\">若队列Q存在，则销毁它</td>\n</tr>\n<tr>\n<td align=\"center\">EnQueue(&amp;Q,x)</td>\n<td align=\"center\">若队列Q存在，插入新元素x到队列Q中并成为队尾元素</td>\n</tr>\n<tr>\n<td align=\"center\">DeQueue(&amp;Q,&amp;x)</td>\n<td align=\"center\">删除队列Q中队头元素，并用x返回其值</td>\n</tr>\n<tr>\n<td align=\"center\">GetHead(Q,&amp;x)</td>\n<td align=\"center\">返回队列Q中队头元素，不修改队头指针</td>\n</tr>\n<tr>\n<td align=\"center\">QueueEmpty(Q)</td>\n<td align=\"center\">若队列为空，返回true，否则返回false</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-3-顺序队列\"><a href=\"#3-2-3-顺序队列\" class=\"headerlink\" title=\"3.2.3 顺序队列\"></a>3.2.3 顺序队列</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/2.png\"><br><img src=\"/img/datastruct/3_stack/queue/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li>顺序队列的实现<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> front,rear;</span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue *Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;MAXSIZE;i++)</span><br><span class=\"line\">        Q-&gt;data[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">QueueEmpty</span><span class=\"params\">(SqQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front==Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue *Q, <span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((Q-&gt;rear+<span class=\"number\">1</span>)%MAXSIZE==Q-&gt;front)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    Q-&gt;data[Q-&gt;rear]=x;</span><br><span class=\"line\">    Q-&gt;rear=(Q-&gt;rear+<span class=\"number\">1</span>)%MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue *Q, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q-&gt;front==Q-&gt;rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=Q-&gt;data[Q-&gt;front];</span><br><span class=\"line\">    Q-&gt;front=(Q-&gt;front+<span class=\"number\">1</span>)%MAXSIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>循环队列<ul>\n<li><p>入队：</p>\n<pre><code>  Q.data[Q.rear]=x\n  Q.rear=(Q.rear+1)%MaxSize\n</code></pre>\n</li>\n<li><p>出队：</p>\n<pre><code>  x=Q.data[Q.front]\n  Q.front=(Q.front+1)%MaxSize \n</code></pre>\n</li>\n<li><p>元素个数：<br>  (rear+MaxSize-front)%MaxSize</p>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">队满</th>\n<th align=\"center\">队空</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">(Q.rear+1)%MaxSize&#x3D;&#x3D;Q.front</td>\n<td align=\"center\">Q.rear&#x3D;&#x3D;Q.front</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">size&#x3D;&#x3D;MaxSize</td>\n<td align=\"center\">size&#x3D;0</td>\n</tr>\n<tr>\n<td align=\"center\">(删除成功时flag&#x3D;0,插入成功时flag&#x3D;1)</td>\n<td align=\"center\">front&#x3D;&#x3D;rear &amp;&amp; flag&#x3D;&#x3D;1</td>\n<td align=\"center\">front&#x3D;&#x3D;rear &amp;&amp; flag&#x3D;&#x3D;0</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-2-4-链式队列\"><a href=\"#3-2-4-链式队列\" class=\"headerlink\" title=\"3.2.4 链式队列\"></a>3.2.4 链式队列</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/3.png\"><br><img src=\"/img/datastruct/3_stack/queue/3.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue *Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;front=Q-&gt;rear=(LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q-&gt;front-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">QueueEmpty</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.front==Q.rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue *Q, <span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    LinkNode *s=(LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    s-&gt;data=x;</span><br><span class=\"line\">    s-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Q-&gt;rear-&gt;next=s;</span><br><span class=\"line\">    Q-&gt;rear=s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue *Q, <span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q-&gt;front==Q-&gt;rear)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LinkNode *p=Q-&gt;front-&gt;next;</span><br><span class=\"line\">    *x=p-&gt;data;</span><br><span class=\"line\">    Q-&gt;front-&gt;next=p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q-&gt;rear==p)</span><br><span class=\"line\">        Q-&gt;rear=Q-&gt;front;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>双端队列<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/4.png\"><br><img src=\"/img/datastruct/3_stack/queue/4.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/queue/5.png\"><br><img src=\"/img/datastruct/3_stack/queue/5.png\" alt=\"数据结构\"></p>"},{"title":"3.3 栈与队列的应用","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n## 3.3.1 括号匹配问题\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/1.png)\n![数据结构](/img/datastruct/3_stack/exam/1.png)\n\n```c\n#include<stdio.h>\n#define MAXSIZE 10\ntypedef struct{\n    char data[MAXSIZE];\n    int top;\n} SqStack;\n\n//初始化\nvoid InitStack(SqStack *S){\n    S->top=-1;\n}\n\n//判空\nint StackEmpty(SqStack S){\n    if(S.top==-1)\n        return 1;\n    else\n        return 0;\n}\n\n//入栈\nint Push(SqStack *S, char x){\n    if(S->top==MAXSIZE-1)\n        return 0;\n    S->top++;\n    S->data[S->top]=x;\n    return 1;\n}\n\n//出栈\nint Pop(SqStack *S, char *x){\n    if(S->top==-1)\n        return 0;\n    *x=S->data[S->top];\n    S->top--;\n    return 1;\n}\n\n//取栈顶元素\nint GetTop(SqStack S, char *x){\n    if(S.top==-1)\n        return 0;\n    *x=S.data[S.top];\n    return 1;\n}\n\nint main(){\n    //1. 括号匹配\n    char str1[100] = \"((())){[]}\"; //合法\n    char str2[100] = \"((()){[]})\"; //合法\n    char str3[100] = \"((()){[]}\"; //不合法\n    printf(\"%d\",match(str1));\n    printf(\"%d\",match(str2));\n    printf(\"%d\",match(str3));\n}\n\nint match(char str[]){\n    SqStack stack;\n    InitStack(&stack);\n    int i=0;\n    char x;\n    for(;str[i]!='\\0';i++){\n        switch (str[i])\n        {\n        case '(':\n        case '[':\n        case '{':\n            Push(&stack, str[i]);\n            break;\n        case ')':\n            if(!Pop(&stack, &x) || x!='(')\n                return 0;\n            break;\n        case ']':\n            if(!Pop(&stack, &x) || x!='[')\n                return 0;\n            break;\n        case '}':\n            if(!Pop(&stack, &x) || x!='{')\n                return 0;\n            break;\n        default:\n            break;\n        }\n    }\n    if(!StackEmpty(stack))\n        return 0;\n    return 1;\n}\n```\n\n## 3.3.2 表达式求值\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/2.png)\n![数据结构](/img/datastruct/3_stack/exam/2.png)\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/6.png)\n![数据结构](/img/datastruct/3_stack/exam/6.png)\n- 中缀->后缀\n    - 手算\n\n            1）确定各个运算符的运算顺序\n            2）选择下一个运算符(左右符)\n            3）还有符号则返回2）\n\n    - 代码\n        ![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/4.png)\n        ![数据结构](/img/datastruct/3_stack/exam/4.png)\n\n- 中缀表达式的计算\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/5.png)\n![数据结构](/img/datastruct/3_stack/exam/5.png)\n\n\n- 用栈实现后缀表达式的计算\n\n        1）从左往右扫描下一个元素，直到处理完所有元素\n        2）若扫描到操作数则入栈，返回1）\n        3）若扫描到运算符，弹出两个栈顶，执行运算后入栈(先出栈的是右操作数)\n\n- 中缀->前缀\n\n        1）确定各个运算符的运算顺序\n        2）选择下一个运算符(符左右)\n        3）还有符号则返回2）\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/3.png)\n![数据结构](/img/datastruct/3_stack/exam/3.png)","source":"_posts/datastruct/3_stack/3_exam.md","raw":"---\ntitle: 3.3 栈与队列的应用\ndate: 2023-08-07 00:00:00\ntags: [数据结构,栈,队列]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n## 3.3.1 括号匹配问题\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/1.png)\n![数据结构](/img/datastruct/3_stack/exam/1.png)\n\n```c\n#include<stdio.h>\n#define MAXSIZE 10\ntypedef struct{\n    char data[MAXSIZE];\n    int top;\n} SqStack;\n\n//初始化\nvoid InitStack(SqStack *S){\n    S->top=-1;\n}\n\n//判空\nint StackEmpty(SqStack S){\n    if(S.top==-1)\n        return 1;\n    else\n        return 0;\n}\n\n//入栈\nint Push(SqStack *S, char x){\n    if(S->top==MAXSIZE-1)\n        return 0;\n    S->top++;\n    S->data[S->top]=x;\n    return 1;\n}\n\n//出栈\nint Pop(SqStack *S, char *x){\n    if(S->top==-1)\n        return 0;\n    *x=S->data[S->top];\n    S->top--;\n    return 1;\n}\n\n//取栈顶元素\nint GetTop(SqStack S, char *x){\n    if(S.top==-1)\n        return 0;\n    *x=S.data[S.top];\n    return 1;\n}\n\nint main(){\n    //1. 括号匹配\n    char str1[100] = \"((())){[]}\"; //合法\n    char str2[100] = \"((()){[]})\"; //合法\n    char str3[100] = \"((()){[]}\"; //不合法\n    printf(\"%d\",match(str1));\n    printf(\"%d\",match(str2));\n    printf(\"%d\",match(str3));\n}\n\nint match(char str[]){\n    SqStack stack;\n    InitStack(&stack);\n    int i=0;\n    char x;\n    for(;str[i]!='\\0';i++){\n        switch (str[i])\n        {\n        case '(':\n        case '[':\n        case '{':\n            Push(&stack, str[i]);\n            break;\n        case ')':\n            if(!Pop(&stack, &x) || x!='(')\n                return 0;\n            break;\n        case ']':\n            if(!Pop(&stack, &x) || x!='[')\n                return 0;\n            break;\n        case '}':\n            if(!Pop(&stack, &x) || x!='{')\n                return 0;\n            break;\n        default:\n            break;\n        }\n    }\n    if(!StackEmpty(stack))\n        return 0;\n    return 1;\n}\n```\n\n## 3.3.2 表达式求值\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/2.png)\n![数据结构](/img/datastruct/3_stack/exam/2.png)\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/6.png)\n![数据结构](/img/datastruct/3_stack/exam/6.png)\n- 中缀->后缀\n    - 手算\n\n            1）确定各个运算符的运算顺序\n            2）选择下一个运算符(左右符)\n            3）还有符号则返回2）\n\n    - 代码\n        ![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/4.png)\n        ![数据结构](/img/datastruct/3_stack/exam/4.png)\n\n- 中缀表达式的计算\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/5.png)\n![数据结构](/img/datastruct/3_stack/exam/5.png)\n\n\n- 用栈实现后缀表达式的计算\n\n        1）从左往右扫描下一个元素，直到处理完所有元素\n        2）若扫描到操作数则入栈，返回1）\n        3）若扫描到运算符，弹出两个栈顶，执行运算后入栈(先出栈的是右操作数)\n\n- 中缀->前缀\n\n        1）确定各个运算符的运算顺序\n        2）选择下一个运算符(符左右)\n        3）还有符号则返回2）\n![](../../../../themes/yilia/source/img/datastruct/3_stack/exam/3.png)\n![数据结构](/img/datastruct/3_stack/exam/3.png)","slug":"datastruct/3_stack/3_exam","published":1,"updated":"2023-10-23T12:08:38.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr30013wovwa94o2lky","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h2 id=\"3-3-1-括号匹配问题\"><a href=\"#3-3-1-括号匹配问题\" class=\"headerlink\" title=\"3.3.1 括号匹配问题\"></a>3.3.1 括号匹配问题</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/1.png\"><br><img src=\"/img/datastruct/3_stack/exam/1.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack *S)</span>&#123;</span><br><span class=\"line\">    S-&gt;top=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack S)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack *S, <span class=\"type\">char</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==MAXSIZE<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    S-&gt;top++;</span><br><span class=\"line\">    S-&gt;data[S-&gt;top]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack *S, <span class=\"type\">char</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S-&gt;data[S-&gt;top];</span><br><span class=\"line\">    S-&gt;top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取栈顶元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S, <span class=\"type\">char</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 括号匹配</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str1[<span class=\"number\">100</span>] = <span class=\"string\">&quot;((()))&#123;[]&#125;&quot;</span>; <span class=\"comment\">//合法</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str2[<span class=\"number\">100</span>] = <span class=\"string\">&quot;((())&#123;[]&#125;)&quot;</span>; <span class=\"comment\">//合法</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str3[<span class=\"number\">100</span>] = <span class=\"string\">&quot;((())&#123;[]&#125;&quot;</span>; <span class=\"comment\">//不合法</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,match(str1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,match(str2));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,match(str3));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">match</span><span class=\"params\">(<span class=\"type\">char</span> str[])</span>&#123;</span><br><span class=\"line\">    SqStack <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">    InitStack(&amp;<span class=\"built_in\">stack</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;str[i]!=<span class=\"string\">&#x27;\\0&#x27;</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (str[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#123;&#x27;</span>:</span><br><span class=\"line\">            Push(&amp;<span class=\"built_in\">stack</span>, str[i]);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pop(&amp;<span class=\"built_in\">stack</span>, &amp;x) || x!=<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pop(&amp;<span class=\"built_in\">stack</span>, &amp;x) || x!=<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#125;&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pop(&amp;<span class=\"built_in\">stack</span>, &amp;x) || x!=<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!StackEmpty(<span class=\"built_in\">stack</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-2-表达式求值\"><a href=\"#3-3-2-表达式求值\" class=\"headerlink\" title=\"3.3.2 表达式求值\"></a>3.3.2 表达式求值</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/2.png\"><br><img src=\"/img/datastruct/3_stack/exam/2.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/6.png\"><br><img src=\"/img/datastruct/3_stack/exam/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>中缀-&gt;后缀</p>\n<ul>\n<li><p>手算</p>\n<pre><code>  1）确定各个运算符的运算顺序\n  2）选择下一个运算符(左右符)\n  3）还有符号则返回2）\n</code></pre>\n</li>\n<li><p>代码<br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/4.png\"><br>  <img src=\"/img/datastruct/3_stack/exam/4.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n</li>\n<li><p>中缀表达式的计算<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/5.png\"><br><img src=\"/img/datastruct/3_stack/exam/5.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>用栈实现后缀表达式的计算</p>\n<pre><code>  1）从左往右扫描下一个元素，直到处理完所有元素\n  2）若扫描到操作数则入栈，返回1）\n  3）若扫描到运算符，弹出两个栈顶，执行运算后入栈(先出栈的是右操作数)\n</code></pre>\n</li>\n<li><p>中缀-&gt;前缀</p>\n<pre><code>  1）确定各个运算符的运算顺序\n  2）选择下一个运算符(符左右)\n  3）还有符号则返回2）\n</code></pre>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/3.png\"><br><img src=\"/img/datastruct/3_stack/exam/3.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h2 id=\"3-3-1-括号匹配问题\"><a href=\"#3-3-1-括号匹配问题\" class=\"headerlink\" title=\"3.3.1 括号匹配问题\"></a>3.3.1 括号匹配问题</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/1.png\"><br><img src=\"/img/datastruct/3_stack/exam/1.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack *S)</span>&#123;</span><br><span class=\"line\">    S-&gt;top=<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack S)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack *S, <span class=\"type\">char</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==MAXSIZE<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    S-&gt;top++;</span><br><span class=\"line\">    S-&gt;data[S-&gt;top]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack *S, <span class=\"type\">char</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S-&gt;data[S-&gt;top];</span><br><span class=\"line\">    S-&gt;top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取栈顶元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S, <span class=\"type\">char</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x=S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 括号匹配</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str1[<span class=\"number\">100</span>] = <span class=\"string\">&quot;((()))&#123;[]&#125;&quot;</span>; <span class=\"comment\">//合法</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str2[<span class=\"number\">100</span>] = <span class=\"string\">&quot;((())&#123;[]&#125;)&quot;</span>; <span class=\"comment\">//合法</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str3[<span class=\"number\">100</span>] = <span class=\"string\">&quot;((())&#123;[]&#125;&quot;</span>; <span class=\"comment\">//不合法</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,match(str1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,match(str2));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,match(str3));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">match</span><span class=\"params\">(<span class=\"type\">char</span> str[])</span>&#123;</span><br><span class=\"line\">    SqStack <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">    InitStack(&amp;<span class=\"built_in\">stack</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;str[i]!=<span class=\"string\">&#x27;\\0&#x27;</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (str[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;[&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#123;&#x27;</span>:</span><br><span class=\"line\">            Push(&amp;<span class=\"built_in\">stack</span>, str[i]);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pop(&amp;<span class=\"built_in\">stack</span>, &amp;x) || x!=<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;]&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pop(&amp;<span class=\"built_in\">stack</span>, &amp;x) || x!=<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;&#125;&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!Pop(&amp;<span class=\"built_in\">stack</span>, &amp;x) || x!=<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!StackEmpty(<span class=\"built_in\">stack</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-2-表达式求值\"><a href=\"#3-3-2-表达式求值\" class=\"headerlink\" title=\"3.3.2 表达式求值\"></a>3.3.2 表达式求值</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/2.png\"><br><img src=\"/img/datastruct/3_stack/exam/2.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/6.png\"><br><img src=\"/img/datastruct/3_stack/exam/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>中缀-&gt;后缀</p>\n<ul>\n<li><p>手算</p>\n<pre><code>  1）确定各个运算符的运算顺序\n  2）选择下一个运算符(左右符)\n  3）还有符号则返回2）\n</code></pre>\n</li>\n<li><p>代码<br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/4.png\"><br>  <img src=\"/img/datastruct/3_stack/exam/4.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n</li>\n<li><p>中缀表达式的计算<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/5.png\"><br><img src=\"/img/datastruct/3_stack/exam/5.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>用栈实现后缀表达式的计算</p>\n<pre><code>  1）从左往右扫描下一个元素，直到处理完所有元素\n  2）若扫描到操作数则入栈，返回1）\n  3）若扫描到运算符，弹出两个栈顶，执行运算后入栈(先出栈的是右操作数)\n</code></pre>\n</li>\n<li><p>中缀-&gt;前缀</p>\n<pre><code>  1）确定各个运算符的运算顺序\n  2）选择下一个运算符(符左右)\n  3）还有符号则返回2）\n</code></pre>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/exam/3.png\"><br><img src=\"/img/datastruct/3_stack/exam/3.png\" alt=\"数据结构\"></p>"},{"title":"3.4 矩阵压缩","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/1.png)\n![数据结构](/img/datastruct/3_stack/matrix/1.png)\n\n## 3.4.1 对称矩阵\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/2.png)\n![数据结构](/img/datastruct/3_stack/matrix/2.png)\n- 存主对角线+下三角\n\n    $$a_{k}=a_{ij}=a_{ji} (i>=j)$$\n\n    - 列优先\n\n        $$k=\\frac{i(i-1)}{2}+j-1$$\n    - 行优先\n\n        $$k=\\frac{j(j-1)}{2}+i-1$$\n\n## 3.4.2 三角矩阵\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/3.png)\n![数据结构](/img/datastruct/3_stack/matrix/3.png)\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/4.png)\n![数据结构](/img/datastruct/3_stack/matrix/4.png)\n- 存主对角线+下三角/上三角+c\n\n    $$a_{k}=a_{ij} (i>=j)$$\n\n- 下三角，行优先\n\n    $$k=\\left\\{\\begin{array}{l}{\\frac{i(i-1)}{2}+j-1} & {i \\geq j} \\\\ {\\frac{n(n-1)}{2}} & {i<j}\\end{array}\\right.$$\n\n- 上三角，行优先\n    \n    $$k=\\left\\{\\begin{array}{l}{\\frac{(i-1)(2n-i+2)}{2}+j-i} & {i \\leq j} \\\\ {\\frac{n(n-1)}{2}} & {i>j}\\end{array}\\right.$$\n\n## 3.4.3 三对角矩阵\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/5.png)\n![数据结构](/img/datastruct/3_stack/matrix/5.png)\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/6.png)\n![数据结构](/img/datastruct/3_stack/matrix/6.png)\n- $$k=2i+j-3$$\n\n## 3.4.4 稀疏矩阵\n- 顺序存储\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/7.png)\n![数据结构](/img/datastruct/3_stack/matrix/7.png)\n\n- 链式存储\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/8.png)\n![数据结构](/img/datastruct/3_stack/matrix/8.png)\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/9.png)\n![数据结构](/img/datastruct/3_stack/matrix/9.png)","source":"_posts/datastruct/3_stack/4_matrix.md","raw":"---\ntitle: 3.4 矩阵压缩\ndate: 2023-08-07 00:00:00\ntags: [数据结构]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/1.png)\n![数据结构](/img/datastruct/3_stack/matrix/1.png)\n\n## 3.4.1 对称矩阵\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/2.png)\n![数据结构](/img/datastruct/3_stack/matrix/2.png)\n- 存主对角线+下三角\n\n    $$a_{k}=a_{ij}=a_{ji} (i>=j)$$\n\n    - 列优先\n\n        $$k=\\frac{i(i-1)}{2}+j-1$$\n    - 行优先\n\n        $$k=\\frac{j(j-1)}{2}+i-1$$\n\n## 3.4.2 三角矩阵\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/3.png)\n![数据结构](/img/datastruct/3_stack/matrix/3.png)\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/4.png)\n![数据结构](/img/datastruct/3_stack/matrix/4.png)\n- 存主对角线+下三角/上三角+c\n\n    $$a_{k}=a_{ij} (i>=j)$$\n\n- 下三角，行优先\n\n    $$k=\\left\\{\\begin{array}{l}{\\frac{i(i-1)}{2}+j-1} & {i \\geq j} \\\\ {\\frac{n(n-1)}{2}} & {i<j}\\end{array}\\right.$$\n\n- 上三角，行优先\n    \n    $$k=\\left\\{\\begin{array}{l}{\\frac{(i-1)(2n-i+2)}{2}+j-i} & {i \\leq j} \\\\ {\\frac{n(n-1)}{2}} & {i>j}\\end{array}\\right.$$\n\n## 3.4.3 三对角矩阵\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/5.png)\n![数据结构](/img/datastruct/3_stack/matrix/5.png)\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/6.png)\n![数据结构](/img/datastruct/3_stack/matrix/6.png)\n- $$k=2i+j-3$$\n\n## 3.4.4 稀疏矩阵\n- 顺序存储\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/7.png)\n![数据结构](/img/datastruct/3_stack/matrix/7.png)\n\n- 链式存储\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/8.png)\n![数据结构](/img/datastruct/3_stack/matrix/8.png)\n\n![](../../../../themes/yilia/source/img/datastruct/3_stack/matrix/9.png)\n![数据结构](/img/datastruct/3_stack/matrix/9.png)","slug":"datastruct/3_stack/4_matrix","published":1,"updated":"2023-10-23T12:09:13.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr40017wovw4j9uh2vp","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/1.png\"><br><img src=\"/img/datastruct/3_stack/matrix/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-4-1-对称矩阵\"><a href=\"#3-4-1-对称矩阵\" class=\"headerlink\" title=\"3.4.1 对称矩阵\"></a>3.4.1 对称矩阵</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/2.png\"><br><img src=\"/img/datastruct/3_stack/matrix/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>存主对角线+下三角</p>\n<p>  $$a_{k}&#x3D;a_{ij}&#x3D;a_{ji} (i&gt;&#x3D;j)$$</p>\n<ul>\n<li><p>列优先</p>\n<p>  $$k&#x3D;\\frac{i(i-1)}{2}+j-1$$</p>\n</li>\n<li><p>行优先</p>\n<p>  $$k&#x3D;\\frac{j(j-1)}{2}+i-1$$</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-4-2-三角矩阵\"><a href=\"#3-4-2-三角矩阵\" class=\"headerlink\" title=\"3.4.2 三角矩阵\"></a>3.4.2 三角矩阵</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/3.png\"><br><img src=\"/img/datastruct/3_stack/matrix/3.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/4.png\"><br><img src=\"/img/datastruct/3_stack/matrix/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>存主对角线+下三角&#x2F;上三角+c</p>\n<p>  $$a_{k}&#x3D;a_{ij} (i&gt;&#x3D;j)$$</p>\n</li>\n<li><p>下三角，行优先</p>\n<p>  $$k&#x3D;\\left{\\begin{array}{l}{\\frac{i(i-1)}{2}+j-1} &amp; {i \\geq j} \\ {\\frac{n(n-1)}{2}} &amp; {i&lt;j}\\end{array}\\right.$$</p>\n</li>\n<li><p>上三角，行优先</p>\n<p>  $$k&#x3D;\\left{\\begin{array}{l}{\\frac{(i-1)(2n-i+2)}{2}+j-i} &amp; {i \\leq j} \\ {\\frac{n(n-1)}{2}} &amp; {i&gt;j}\\end{array}\\right.$$</p>\n</li>\n</ul>\n<h2 id=\"3-4-3-三对角矩阵\"><a href=\"#3-4-3-三对角矩阵\" class=\"headerlink\" title=\"3.4.3 三对角矩阵\"></a>3.4.3 三对角矩阵</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/5.png\"><br><img src=\"/img/datastruct/3_stack/matrix/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/6.png\"><br><img src=\"/img/datastruct/3_stack/matrix/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li>$$k&#x3D;2i+j-3$$</li>\n</ul>\n<h2 id=\"3-4-4-稀疏矩阵\"><a href=\"#3-4-4-稀疏矩阵\" class=\"headerlink\" title=\"3.4.4 稀疏矩阵\"></a>3.4.4 稀疏矩阵</h2><ul>\n<li><p>顺序存储<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/7.png\"><br><img src=\"/img/datastruct/3_stack/matrix/7.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>链式存储<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/8.png\"><br><img src=\"/img/datastruct/3_stack/matrix/8.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/9.png\"><br><img src=\"/img/datastruct/3_stack/matrix/9.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/1.png\"><br><img src=\"/img/datastruct/3_stack/matrix/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"3-4-1-对称矩阵\"><a href=\"#3-4-1-对称矩阵\" class=\"headerlink\" title=\"3.4.1 对称矩阵\"></a>3.4.1 对称矩阵</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/2.png\"><br><img src=\"/img/datastruct/3_stack/matrix/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>存主对角线+下三角</p>\n<p>  $$a_{k}&#x3D;a_{ij}&#x3D;a_{ji} (i&gt;&#x3D;j)$$</p>\n<ul>\n<li><p>列优先</p>\n<p>  $$k&#x3D;\\frac{i(i-1)}{2}+j-1$$</p>\n</li>\n<li><p>行优先</p>\n<p>  $$k&#x3D;\\frac{j(j-1)}{2}+i-1$$</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-4-2-三角矩阵\"><a href=\"#3-4-2-三角矩阵\" class=\"headerlink\" title=\"3.4.2 三角矩阵\"></a>3.4.2 三角矩阵</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/3.png\"><br><img src=\"/img/datastruct/3_stack/matrix/3.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/4.png\"><br><img src=\"/img/datastruct/3_stack/matrix/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>存主对角线+下三角&#x2F;上三角+c</p>\n<p>  $$a_{k}&#x3D;a_{ij} (i&gt;&#x3D;j)$$</p>\n</li>\n<li><p>下三角，行优先</p>\n<p>  $$k&#x3D;\\left{\\begin{array}{l}{\\frac{i(i-1)}{2}+j-1} &amp; {i \\geq j} \\ {\\frac{n(n-1)}{2}} &amp; {i&lt;j}\\end{array}\\right.$$</p>\n</li>\n<li><p>上三角，行优先</p>\n<p>  $$k&#x3D;\\left{\\begin{array}{l}{\\frac{(i-1)(2n-i+2)}{2}+j-i} &amp; {i \\leq j} \\ {\\frac{n(n-1)}{2}} &amp; {i&gt;j}\\end{array}\\right.$$</p>\n</li>\n</ul>\n<h2 id=\"3-4-3-三对角矩阵\"><a href=\"#3-4-3-三对角矩阵\" class=\"headerlink\" title=\"3.4.3 三对角矩阵\"></a>3.4.3 三对角矩阵</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/5.png\"><br><img src=\"/img/datastruct/3_stack/matrix/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/6.png\"><br><img src=\"/img/datastruct/3_stack/matrix/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li>$$k&#x3D;2i+j-3$$</li>\n</ul>\n<h2 id=\"3-4-4-稀疏矩阵\"><a href=\"#3-4-4-稀疏矩阵\" class=\"headerlink\" title=\"3.4.4 稀疏矩阵\"></a>3.4.4 稀疏矩阵</h2><ul>\n<li><p>顺序存储<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/7.png\"><br><img src=\"/img/datastruct/3_stack/matrix/7.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>链式存储<br><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/8.png\"><br><img src=\"/img/datastruct/3_stack/matrix/8.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/3_stack/matrix/9.png\"><br><img src=\"/img/datastruct/3_stack/matrix/9.png\" alt=\"数据结构\"></p>"},{"title":"5.1 树","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png)\n![数据结构](/img/datastruct/5_tree/tree/1.png)\n<!--more-->\n\n## 5.1.1 一些性质\n![](../../../../themes/yilia/source/img/datastruct/5_tree/tree/3.png)\n![数据结构](/img/datastruct/5_tree/tree/3.png)\n- 根在第0层\n- 节点数=总度数+1\n- 结点的度：结点拥有的子树的个数\n- m叉树中可以没有m个子树，但是不能超过m个子树\n- 度为m的树，第i层最多有$$m^{i-1}$$个结点\n- 高度为h的m叉树，最多有$$\\frac{m^h-1}{m-1}$$个结点\n- 高度为h的m叉树，最少有h个结点\n- 高度为h，度为m的树，最多有$$\\frac{m^{h+1}-1}{m-1}$$个结点，最少有h+m-1个结点\n- n个结点的m叉树的最小高度为：$$\\lceil log_m(n(m-1)+1)\\rceil$$\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png)\n![数据结构](/img/datastruct/5_tree/tree/1.png)","source":"_posts/datastruct/5_tree/1_tree.md","raw":"---\ntitle: 5.1 树\ndate: 2023-08-07 00:00:00\ntags: [数据结构,树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png)\n![数据结构](/img/datastruct/5_tree/tree/1.png)\n<!--more-->\n\n## 5.1.1 一些性质\n![](../../../../themes/yilia/source/img/datastruct/5_tree/tree/3.png)\n![数据结构](/img/datastruct/5_tree/tree/3.png)\n- 根在第0层\n- 节点数=总度数+1\n- 结点的度：结点拥有的子树的个数\n- m叉树中可以没有m个子树，但是不能超过m个子树\n- 度为m的树，第i层最多有$$m^{i-1}$$个结点\n- 高度为h的m叉树，最多有$$\\frac{m^h-1}{m-1}$$个结点\n- 高度为h的m叉树，最少有h个结点\n- 高度为h，度为m的树，最多有$$\\frac{m^{h+1}-1}{m-1}$$个结点，最少有h+m-1个结点\n- n个结点的m叉树的最小高度为：$$\\lceil log_m(n(m-1)+1)\\rceil$$\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png)\n![数据结构](/img/datastruct/5_tree/tree/1.png)","slug":"datastruct/5_tree/1_tree","published":1,"updated":"2023-10-23T12:15:55.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr40018wovw7k8m8k6c","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png\"><br><img src=\"/img/datastruct/5_tree/tree/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h2 id=\"5-1-1-一些性质\"><a href=\"#5-1-1-一些性质\" class=\"headerlink\" title=\"5.1.1 一些性质\"></a>5.1.1 一些性质</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/tree/3.png\"><br><img src=\"/img/datastruct/5_tree/tree/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>根在第0层</li>\n<li>节点数&#x3D;总度数+1</li>\n<li>结点的度：结点拥有的子树的个数</li>\n<li>m叉树中可以没有m个子树，但是不能超过m个子树</li>\n<li>度为m的树，第i层最多有$$m^{i-1}$$个结点</li>\n<li>高度为h的m叉树，最多有$$\\frac{m^h-1}{m-1}$$个结点</li>\n<li>高度为h的m叉树，最少有h个结点</li>\n<li>高度为h，度为m的树，最多有$$\\frac{m^{h+1}-1}{m-1}$$个结点，最少有h+m-1个结点</li>\n<li>n个结点的m叉树的最小高度为：$$\\lceil log_m(n(m-1)+1)\\rceil$$</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png\"><br><img src=\"/img/datastruct/5_tree/tree/1.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png\"><br><img src=\"/img/datastruct/5_tree/tree/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h2 id=\"5-1-1-一些性质\"><a href=\"#5-1-1-一些性质\" class=\"headerlink\" title=\"5.1.1 一些性质\"></a>5.1.1 一些性质</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/tree/3.png\"><br><img src=\"/img/datastruct/5_tree/tree/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>根在第0层</li>\n<li>节点数&#x3D;总度数+1</li>\n<li>结点的度：结点拥有的子树的个数</li>\n<li>m叉树中可以没有m个子树，但是不能超过m个子树</li>\n<li>度为m的树，第i层最多有$$m^{i-1}$$个结点</li>\n<li>高度为h的m叉树，最多有$$\\frac{m^h-1}{m-1}$$个结点</li>\n<li>高度为h的m叉树，最少有h个结点</li>\n<li>高度为h，度为m的树，最多有$$\\frac{m^{h+1}-1}{m-1}$$个结点，最少有h+m-1个结点</li>\n<li>n个结点的m叉树的最小高度为：$$\\lceil log_m(n(m-1)+1)\\rceil$$</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/tree/1.png\"><br><img src=\"/img/datastruct/5_tree/tree/1.png\" alt=\"数据结构\"></p>"},{"title":"4. 串","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n### \n\n## 4.1 定义\n![](../../../../themes/yilia/source/img/datastruct/4_string/1.png)\n![数据结构](/img/datastruct/4_string/1.png)\n- 一种特殊的线性表\n\n## 4.2 串的存储结构\n![](../../../../themes/yilia/source/img/datastruct/4_string/2.png)\n![数据结构](/img/datastruct/4_string/2.png)\n\n- 顺序存储\n![](../../../../themes/yilia/source/img/datastruct/4_string/3.png)\n![数据结构](/img/datastruct/4_string/3.png)\n```c\n#define MAXLEN 255\ntypedef struct{\n    char ch[MAXLEN]; //静态数组\n    int length;\n} SString;\n\ntypedef struct{\n    char *ch; //动态数组\n    int length;\n} HString;\n```\n\n- 链式存储\n\n![](../../../../themes/yilia/source/img/datastruct/4_string/5.png)\n![数据结构](/img/datastruct/4_string/5.png)\n```c\n//2. 链式存储\ntypedef struct StringNode{\n    char ch; //1：1\n    struct StringNode *next;\n} StringNode, *String;\n\ntypedef struct StringNode{\n    char ch[4]; //1：4\n    struct StringNode *next;\n} StringNode, *String;\n```\n\n![](../../../../themes/yilia/source/img/datastruct/4_string/4.png)\n![数据结构](/img/datastruct/4_string/4.png)\n\n## 4.3 基本操作\n\n|函数名|功能|时间复杂度|\n|:---|:---|:---|\n|StrAssign(SString &T, char *chars)|生成一个其值等于chars的串T|O(n)|\n|StrCopy(SString &T, SString S)|由串S复制得串T|O(n)|\n|StrEmpty(SString S)|若S为空串，则返回true，否则返回false|O(1)|\n|StrLength(SString S)|返回串S的元素个数，即串的长度|O(1)|\n|ClearString(SString &S)|将串S清为空串|O(1)|\n|DestroyString(SString &S)|串S存在，则销毁它|O(1)|\n|Concat(SString &T, SString S1, SString S2)|用T返回由S1和S2联接而成的新串|O(n)|\n\n```c\n//求子串\nint SubString(SString *Sub, SString S, int pos, int len){\n    //1. 参数合法性判断\n    if(pos<1 || pos>S.length || len<0 || len>S.length-pos+1)\n        return 0;\n    //2. 子串赋值\n    for(int i=pos; i<pos+len; i++)\n        Sub->ch[i-pos+1]=S.ch[i];\n    Sub->length=len;\n    return 1;\n}\n\n//比较\nint StrCompare(SString S, SString T){\n    for(int i=1; i<=S.length && i<=T.length; i++){\n        if(S.ch[i]!=T.ch[i])\n            return S.ch[i]-T.ch[i];\n    }\n    return S.length-T.length;\n}\n\n//定位\nint Index(SString S, SString T){\n    int i=1, n=S.length, m=T.length;\n    SString sub;\n    while(i<=n-m+1){\n        SubString(&sub, S, i, m);\n        if(StrCompare(sub, T)!=0)\n            ++i;\n        else\n            return i;\n    }\n    return 0;\n}\n```\n\n## 4.4 模式匹配\n![](../../../../themes/yilia/source/img/datastruct/4_string/6.png)\n![数据结构](/img/datastruct/4_string/6.png)\n\n### 4.4.1 朴素模式匹配算法\n\n```c\n//朴素模式匹配算法\nint Index(SString S, SString T){\n    int i=1, n=S.length, m=T.length;\n    while(i<=n-m+1){\n        int j=1;\n        while(j<=m){\n            if(S.ch[i+j-1]==T.ch[j])\n                ++j;\n            else\n                break;\n        }\n        if(j>m)\n            return i;\n        else\n            ++i;\n    }\n    return 0;\n}\n//定位算法中，子串的长度是固定的，而模式匹配算法中，子串的长度是可变的\n```\n### 4.4.2 KMP模式匹配算法\n![](../../../../themes/yilia/source/img/datastruct/4_string/7.png)\n![数据结构](/img/datastruct/4_string/7.png)\n![](../../../../themes/yilia/source/img/datastruct/4_string/8.png)\n![数据结构](/img/datastruct/4_string/8.png)\n\n- 1）根据模式求next数组\n![](../../../../themes/yilia/source/img/datastruct/4_string/9.png)\n![数据结构](/img/datastruct/4_string/9.png)\n![](../../../../themes/yilia/source/img/datastruct/4_string/11.png)\n![数据结构](/img/datastruct/4_string/11.png)\n\n![](../../../../themes/yilia/source/img/datastruct/4_string/22.png)\n![数据结构](/img/datastruct/4_string/22.png)\n\n- 算法优化\n![](../../../../themes/yilia/source/img/datastruct/4_string/33.png)\n![数据结构](/img/datastruct/4_string/33.png)\n\nnext[3]=1 , next[3]与next[1]相等，所以转到next[1]后也会失配，所以next[3]可以改为next[1]=0\n\n```c\n//KMP算法\n//求next\nvoid get_next(SString T, int next[]){\n    //1. 初始化\n    int i=1, j=0;\n    next[1]=0;\n    while(i<T.length){\n        if(j==0 || T.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n            next[i]=j;\n        }\n        else\n            j=next[j];\n    }\n}\n\n//求nextval\nvoid get_nextval(SString T, int nextval[]){\n    //1. 初始化\n    int i=1, j=0;\n    nextval[1]=0;\n    while(i<T.length){\n        if(j==0 || T.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n            if(T.ch[i]!=T.ch[j])\n                nextval[i]=j;\n            else\n                nextval[i]=nextval[j];\n        }\n        else\n            j=nextval[j];\n    }\n}\n\n\nint Index_KMP(SString S, SString T, int next[]){\n    int i=1, j=1;\n    while(i<=S.length && j<=T.length){\n        if(j==0 || S.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n        }\n        else\n            j=next[j];//i不回溯\n    }\n    if(j>T.length)\n        return i-T.length;\n    else\n        return 0;\n}\n```","source":"_posts/datastruct/4_string/1_string.md","raw":"---\ntitle: 4. 串\ndate: 2023-08-07 00:00:00\ntags: [数据结构,串]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n### \n\n## 4.1 定义\n![](../../../../themes/yilia/source/img/datastruct/4_string/1.png)\n![数据结构](/img/datastruct/4_string/1.png)\n- 一种特殊的线性表\n\n## 4.2 串的存储结构\n![](../../../../themes/yilia/source/img/datastruct/4_string/2.png)\n![数据结构](/img/datastruct/4_string/2.png)\n\n- 顺序存储\n![](../../../../themes/yilia/source/img/datastruct/4_string/3.png)\n![数据结构](/img/datastruct/4_string/3.png)\n```c\n#define MAXLEN 255\ntypedef struct{\n    char ch[MAXLEN]; //静态数组\n    int length;\n} SString;\n\ntypedef struct{\n    char *ch; //动态数组\n    int length;\n} HString;\n```\n\n- 链式存储\n\n![](../../../../themes/yilia/source/img/datastruct/4_string/5.png)\n![数据结构](/img/datastruct/4_string/5.png)\n```c\n//2. 链式存储\ntypedef struct StringNode{\n    char ch; //1：1\n    struct StringNode *next;\n} StringNode, *String;\n\ntypedef struct StringNode{\n    char ch[4]; //1：4\n    struct StringNode *next;\n} StringNode, *String;\n```\n\n![](../../../../themes/yilia/source/img/datastruct/4_string/4.png)\n![数据结构](/img/datastruct/4_string/4.png)\n\n## 4.3 基本操作\n\n|函数名|功能|时间复杂度|\n|:---|:---|:---|\n|StrAssign(SString &T, char *chars)|生成一个其值等于chars的串T|O(n)|\n|StrCopy(SString &T, SString S)|由串S复制得串T|O(n)|\n|StrEmpty(SString S)|若S为空串，则返回true，否则返回false|O(1)|\n|StrLength(SString S)|返回串S的元素个数，即串的长度|O(1)|\n|ClearString(SString &S)|将串S清为空串|O(1)|\n|DestroyString(SString &S)|串S存在，则销毁它|O(1)|\n|Concat(SString &T, SString S1, SString S2)|用T返回由S1和S2联接而成的新串|O(n)|\n\n```c\n//求子串\nint SubString(SString *Sub, SString S, int pos, int len){\n    //1. 参数合法性判断\n    if(pos<1 || pos>S.length || len<0 || len>S.length-pos+1)\n        return 0;\n    //2. 子串赋值\n    for(int i=pos; i<pos+len; i++)\n        Sub->ch[i-pos+1]=S.ch[i];\n    Sub->length=len;\n    return 1;\n}\n\n//比较\nint StrCompare(SString S, SString T){\n    for(int i=1; i<=S.length && i<=T.length; i++){\n        if(S.ch[i]!=T.ch[i])\n            return S.ch[i]-T.ch[i];\n    }\n    return S.length-T.length;\n}\n\n//定位\nint Index(SString S, SString T){\n    int i=1, n=S.length, m=T.length;\n    SString sub;\n    while(i<=n-m+1){\n        SubString(&sub, S, i, m);\n        if(StrCompare(sub, T)!=0)\n            ++i;\n        else\n            return i;\n    }\n    return 0;\n}\n```\n\n## 4.4 模式匹配\n![](../../../../themes/yilia/source/img/datastruct/4_string/6.png)\n![数据结构](/img/datastruct/4_string/6.png)\n\n### 4.4.1 朴素模式匹配算法\n\n```c\n//朴素模式匹配算法\nint Index(SString S, SString T){\n    int i=1, n=S.length, m=T.length;\n    while(i<=n-m+1){\n        int j=1;\n        while(j<=m){\n            if(S.ch[i+j-1]==T.ch[j])\n                ++j;\n            else\n                break;\n        }\n        if(j>m)\n            return i;\n        else\n            ++i;\n    }\n    return 0;\n}\n//定位算法中，子串的长度是固定的，而模式匹配算法中，子串的长度是可变的\n```\n### 4.4.2 KMP模式匹配算法\n![](../../../../themes/yilia/source/img/datastruct/4_string/7.png)\n![数据结构](/img/datastruct/4_string/7.png)\n![](../../../../themes/yilia/source/img/datastruct/4_string/8.png)\n![数据结构](/img/datastruct/4_string/8.png)\n\n- 1）根据模式求next数组\n![](../../../../themes/yilia/source/img/datastruct/4_string/9.png)\n![数据结构](/img/datastruct/4_string/9.png)\n![](../../../../themes/yilia/source/img/datastruct/4_string/11.png)\n![数据结构](/img/datastruct/4_string/11.png)\n\n![](../../../../themes/yilia/source/img/datastruct/4_string/22.png)\n![数据结构](/img/datastruct/4_string/22.png)\n\n- 算法优化\n![](../../../../themes/yilia/source/img/datastruct/4_string/33.png)\n![数据结构](/img/datastruct/4_string/33.png)\n\nnext[3]=1 , next[3]与next[1]相等，所以转到next[1]后也会失配，所以next[3]可以改为next[1]=0\n\n```c\n//KMP算法\n//求next\nvoid get_next(SString T, int next[]){\n    //1. 初始化\n    int i=1, j=0;\n    next[1]=0;\n    while(i<T.length){\n        if(j==0 || T.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n            next[i]=j;\n        }\n        else\n            j=next[j];\n    }\n}\n\n//求nextval\nvoid get_nextval(SString T, int nextval[]){\n    //1. 初始化\n    int i=1, j=0;\n    nextval[1]=0;\n    while(i<T.length){\n        if(j==0 || T.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n            if(T.ch[i]!=T.ch[j])\n                nextval[i]=j;\n            else\n                nextval[i]=nextval[j];\n        }\n        else\n            j=nextval[j];\n    }\n}\n\n\nint Index_KMP(SString S, SString T, int next[]){\n    int i=1, j=1;\n    while(i<=S.length && j<=T.length){\n        if(j==0 || S.ch[i]==T.ch[j]){\n            ++i;\n            ++j;\n        }\n        else\n            j=next[j];//i不回溯\n    }\n    if(j>T.length)\n        return i-T.length;\n    else\n        return 0;\n}\n```","slug":"datastruct/4_string/1_string","published":1,"updated":"2023-10-23T12:15:39.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr5001cwovwefk24cbg","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"4-1-定义\"><a href=\"#4-1-定义\" class=\"headerlink\" title=\"4.1 定义\"></a>4.1 定义</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/1.png\"><br><img src=\"/img/datastruct/4_string/1.png\" alt=\"数据结构\"></p>\n<ul>\n<li>一种特殊的线性表</li>\n</ul>\n<h2 id=\"4-2-串的存储结构\"><a href=\"#4-2-串的存储结构\" class=\"headerlink\" title=\"4.2 串的存储结构\"></a>4.2 串的存储结构</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/2.png\"><br><img src=\"/img/datastruct/4_string/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>顺序存储<br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/3.png\"><br><img src=\"/img/datastruct/4_string/3.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 255</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch[MAXLEN]; <span class=\"comment\">//静态数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *ch; <span class=\"comment\">//动态数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; HString;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>链式存储</p>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/5.png\"><br><img src=\"/img/datastruct/4_string/5.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2. 链式存储</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch; <span class=\"comment\">//1：1</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; StringNode, *String;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch[<span class=\"number\">4</span>]; <span class=\"comment\">//1：4</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; StringNode, *String;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/4.png\"><br><img src=\"/img/datastruct/4_string/4.png\" alt=\"数据结构\"></p>\n<h2 id=\"4-3-基本操作\"><a href=\"#4-3-基本操作\" class=\"headerlink\" title=\"4.3 基本操作\"></a>4.3 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">功能</th>\n<th align=\"left\">时间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">StrAssign(SString &amp;T, char *chars)</td>\n<td align=\"left\">生成一个其值等于chars的串T</td>\n<td align=\"left\">O(n)</td>\n</tr>\n<tr>\n<td align=\"left\">StrCopy(SString &amp;T, SString S)</td>\n<td align=\"left\">由串S复制得串T</td>\n<td align=\"left\">O(n)</td>\n</tr>\n<tr>\n<td align=\"left\">StrEmpty(SString S)</td>\n<td align=\"left\">若S为空串，则返回true，否则返回false</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">StrLength(SString S)</td>\n<td align=\"left\">返回串S的元素个数，即串的长度</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">ClearString(SString &amp;S)</td>\n<td align=\"left\">将串S清为空串</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">DestroyString(SString &amp;S)</td>\n<td align=\"left\">串S存在，则销毁它</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">Concat(SString &amp;T, SString S1, SString S2)</td>\n<td align=\"left\">用T返回由S1和S2联接而成的新串</td>\n<td align=\"left\">O(n)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求子串</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">SubString</span><span class=\"params\">(SString *Sub, SString S, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 参数合法性判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">1</span> || pos&gt;S.length || len&lt;<span class=\"number\">0</span> || len&gt;S.length-pos+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//2. 子串赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=pos; i&lt;pos+len; i++)</span><br><span class=\"line\">        Sub-&gt;ch[i-pos+<span class=\"number\">1</span>]=S.ch[i];</span><br><span class=\"line\">    Sub-&gt;length=len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StrCompare</span><span class=\"params\">(SString S, SString T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=S.length &amp;&amp; i&lt;=T.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.ch[i]!=T.ch[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> S.ch[i]-T.ch[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S.length-T.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定位</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Index</span><span class=\"params\">(SString S, SString T)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, n=S.length, m=T.length;</span><br><span class=\"line\">    SString sub;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n-m+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        SubString(&amp;sub, S, i, m);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StrCompare(sub, T)!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-4-模式匹配\"><a href=\"#4-4-模式匹配\" class=\"headerlink\" title=\"4.4 模式匹配\"></a>4.4 模式匹配</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/6.png\"><br><img src=\"/img/datastruct/4_string/6.png\" alt=\"数据结构\"></p>\n<h3 id=\"4-4-1-朴素模式匹配算法\"><a href=\"#4-4-1-朴素模式匹配算法\" class=\"headerlink\" title=\"4.4.1 朴素模式匹配算法\"></a>4.4.1 朴素模式匹配算法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//朴素模式匹配算法</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Index</span><span class=\"params\">(SString S, SString T)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, n=S.length, m=T.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n-m+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;=m)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(S.ch[i+j<span class=\"number\">-1</span>]==T.ch[j])</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j&gt;m)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定位算法中，子串的长度是固定的，而模式匹配算法中，子串的长度是可变的</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-2-KMP模式匹配算法\"><a href=\"#4-4-2-KMP模式匹配算法\" class=\"headerlink\" title=\"4.4.2 KMP模式匹配算法\"></a>4.4.2 KMP模式匹配算法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/7.png\"><br><img src=\"/img/datastruct/4_string/7.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/8.png\"><br><img src=\"/img/datastruct/4_string/8.png\" alt=\"数据结构\"></p>\n<ul>\n<li>1）根据模式求next数组<br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/9.png\"><br><img src=\"/img/datastruct/4_string/9.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/11.png\"><br><img src=\"/img/datastruct/4_string/11.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/22.png\"><br><img src=\"/img/datastruct/4_string/22.png\" alt=\"数据结构\"></p>\n<ul>\n<li>算法优化<br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/33.png\"><br><img src=\"/img/datastruct/4_string/33.png\" alt=\"数据结构\"></li>\n</ul>\n<p>next[3]&#x3D;1 , next[3]与next[1]相等，所以转到next[1]后也会失配，所以next[3]可以改为next[1]&#x3D;0</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//KMP算法</span></span><br><span class=\"line\"><span class=\"comment\">//求next</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_next</span><span class=\"params\">(SString T, <span class=\"type\">int</span> next[])</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    next[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || T.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            next[i]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            j=next[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求nextval</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_nextval</span><span class=\"params\">(SString T, <span class=\"type\">int</span> nextval[])</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    nextval[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || T.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T.ch[i]!=T.ch[j])</span><br><span class=\"line\">                nextval[i]=j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                nextval[i]=nextval[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            j=nextval[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Index_KMP</span><span class=\"params\">(SString S, SString T, <span class=\"type\">int</span> next[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=S.length &amp;&amp; j&lt;=T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || S.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            j=next[j];<span class=\"comment\">//i不回溯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;T.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i-T.length;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"4-1-定义\"><a href=\"#4-1-定义\" class=\"headerlink\" title=\"4.1 定义\"></a>4.1 定义</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/1.png\"><br><img src=\"/img/datastruct/4_string/1.png\" alt=\"数据结构\"></p>\n<ul>\n<li>一种特殊的线性表</li>\n</ul>\n<h2 id=\"4-2-串的存储结构\"><a href=\"#4-2-串的存储结构\" class=\"headerlink\" title=\"4.2 串的存储结构\"></a>4.2 串的存储结构</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/2.png\"><br><img src=\"/img/datastruct/4_string/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>顺序存储<br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/3.png\"><br><img src=\"/img/datastruct/4_string/3.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXLEN 255</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch[MAXLEN]; <span class=\"comment\">//静态数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *ch; <span class=\"comment\">//动态数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; HString;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>链式存储</p>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/5.png\"><br><img src=\"/img/datastruct/4_string/5.png\" alt=\"数据结构\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2. 链式存储</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch; <span class=\"comment\">//1：1</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; StringNode, *String;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> ch[<span class=\"number\">4</span>]; <span class=\"comment\">//1：4</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StringNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; StringNode, *String;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/4.png\"><br><img src=\"/img/datastruct/4_string/4.png\" alt=\"数据结构\"></p>\n<h2 id=\"4-3-基本操作\"><a href=\"#4-3-基本操作\" class=\"headerlink\" title=\"4.3 基本操作\"></a>4.3 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">功能</th>\n<th align=\"left\">时间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">StrAssign(SString &amp;T, char *chars)</td>\n<td align=\"left\">生成一个其值等于chars的串T</td>\n<td align=\"left\">O(n)</td>\n</tr>\n<tr>\n<td align=\"left\">StrCopy(SString &amp;T, SString S)</td>\n<td align=\"left\">由串S复制得串T</td>\n<td align=\"left\">O(n)</td>\n</tr>\n<tr>\n<td align=\"left\">StrEmpty(SString S)</td>\n<td align=\"left\">若S为空串，则返回true，否则返回false</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">StrLength(SString S)</td>\n<td align=\"left\">返回串S的元素个数，即串的长度</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">ClearString(SString &amp;S)</td>\n<td align=\"left\">将串S清为空串</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">DestroyString(SString &amp;S)</td>\n<td align=\"left\">串S存在，则销毁它</td>\n<td align=\"left\">O(1)</td>\n</tr>\n<tr>\n<td align=\"left\">Concat(SString &amp;T, SString S1, SString S2)</td>\n<td align=\"left\">用T返回由S1和S2联接而成的新串</td>\n<td align=\"left\">O(n)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求子串</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">SubString</span><span class=\"params\">(SString *Sub, SString S, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 参数合法性判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pos&lt;<span class=\"number\">1</span> || pos&gt;S.length || len&lt;<span class=\"number\">0</span> || len&gt;S.length-pos+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//2. 子串赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=pos; i&lt;pos+len; i++)</span><br><span class=\"line\">        Sub-&gt;ch[i-pos+<span class=\"number\">1</span>]=S.ch[i];</span><br><span class=\"line\">    Sub-&gt;length=len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StrCompare</span><span class=\"params\">(SString S, SString T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=S.length &amp;&amp; i&lt;=T.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.ch[i]!=T.ch[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> S.ch[i]-T.ch[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> S.length-T.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定位</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Index</span><span class=\"params\">(SString S, SString T)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, n=S.length, m=T.length;</span><br><span class=\"line\">    SString sub;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n-m+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        SubString(&amp;sub, S, i, m);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StrCompare(sub, T)!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-4-模式匹配\"><a href=\"#4-4-模式匹配\" class=\"headerlink\" title=\"4.4 模式匹配\"></a>4.4 模式匹配</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/6.png\"><br><img src=\"/img/datastruct/4_string/6.png\" alt=\"数据结构\"></p>\n<h3 id=\"4-4-1-朴素模式匹配算法\"><a href=\"#4-4-1-朴素模式匹配算法\" class=\"headerlink\" title=\"4.4.1 朴素模式匹配算法\"></a>4.4.1 朴素模式匹配算法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//朴素模式匹配算法</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Index</span><span class=\"params\">(SString S, SString T)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, n=S.length, m=T.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n-m+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;=m)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(S.ch[i+j<span class=\"number\">-1</span>]==T.ch[j])</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j&gt;m)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定位算法中，子串的长度是固定的，而模式匹配算法中，子串的长度是可变的</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-2-KMP模式匹配算法\"><a href=\"#4-4-2-KMP模式匹配算法\" class=\"headerlink\" title=\"4.4.2 KMP模式匹配算法\"></a>4.4.2 KMP模式匹配算法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/7.png\"><br><img src=\"/img/datastruct/4_string/7.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/8.png\"><br><img src=\"/img/datastruct/4_string/8.png\" alt=\"数据结构\"></p>\n<ul>\n<li>1）根据模式求next数组<br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/9.png\"><br><img src=\"/img/datastruct/4_string/9.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/11.png\"><br><img src=\"/img/datastruct/4_string/11.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/22.png\"><br><img src=\"/img/datastruct/4_string/22.png\" alt=\"数据结构\"></p>\n<ul>\n<li>算法优化<br><img src=\"/../../../../themes/yilia/source/img/datastruct/4_string/33.png\"><br><img src=\"/img/datastruct/4_string/33.png\" alt=\"数据结构\"></li>\n</ul>\n<p>next[3]&#x3D;1 , next[3]与next[1]相等，所以转到next[1]后也会失配，所以next[3]可以改为next[1]&#x3D;0</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//KMP算法</span></span><br><span class=\"line\"><span class=\"comment\">//求next</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_next</span><span class=\"params\">(SString T, <span class=\"type\">int</span> next[])</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    next[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || T.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            next[i]=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            j=next[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求nextval</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_nextval</span><span class=\"params\">(SString T, <span class=\"type\">int</span> nextval[])</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 初始化</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    nextval[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || T.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T.ch[i]!=T.ch[j])</span><br><span class=\"line\">                nextval[i]=j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                nextval[i]=nextval[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            j=nextval[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Index_KMP</span><span class=\"params\">(SString S, SString T, <span class=\"type\">int</span> next[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>, j=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=S.length &amp;&amp; j&lt;=T.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j==<span class=\"number\">0</span> || S.ch[i]==T.ch[j])&#123;</span><br><span class=\"line\">            ++i;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            j=next[j];<span class=\"comment\">//i不回溯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&gt;T.length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i-T.length;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"5.2 二叉树","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/1.png)\n![数据结构](/img/datastruct/5_tree/bintree/1.png)\n<!--more-->\n- 二叉树是有序树，有左右之分\n- 二叉树有五种基本形态：空二叉树、只有根结点、只有左子树、只有右子树、左右子树都有\n\n### 5.2.1 特殊二叉树\n|名称|说明|特点|\n|:---:|:---:|:---:|\n|满二叉树|所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上|![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/2.png)|\n|完全二叉树|叶子结点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树|![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/3.png)|\n|二叉排序树|空树 / 左子树上所有结点的值均小于它的根结点的值；右子树上所有结点的值均大于它的根结点的值；左右子树也分别为二叉排序树||\n|平衡二叉树|空树 / 左子树和右子树的深度之差的绝对值不超过1，且它的左子树和右子树都是一棵平衡二叉树||\n\n### 5.2.2 一些性质\n- 叶子结点比度为2的结点多1个\n- 第i层最多有2<sup>i-1</sup>个结点\n- 高度为h的二叉树至多有2<sup>h</sup>-1个结点\n- 有n个结点的完全二叉树高度为$$\\lceil log_2(n+1)\\rceil 或 \\lfloor log_2n\\rfloor+1$$\n- 若完全二叉树有2k个结点，n<sub>0</sub>=k,n<sub>1</sub>=1,n<sub>2</sub>=k-1\n\n- 若完全二叉树有2k-1个结点，n<sub>0</sub>=k,n<sub>1</sub>=0,n<sub>2</sub>=k-1\n\n### 5.2.3 存储结构\n- 顺序存储\n```c\n#define MaxSize 100\ntypedef struct{\n    int value;\n    int isEmpty;\n}TreeNode;\n\nTreeNode t[MaxSize];\n```\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/4.png)\n![数据结构](/img/datastruct/5_tree/bintree/4.png)\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/5.png)\n![数据结构](/img/datastruct/5_tree/bintree/5.png)\n\n- 链式存储\n  \n```c\ntypedef struct BiTnode{\n    int data;\n    struct BiTnode *lchild, *rchild;\n}BiTNode,BiTree;\n```\n- n个结点的二叉链表共有n+1个空链域\n\n### 5.2.4 遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/9.png)\n![数据结构](/img/datastruct/5_tree/bintree/9.png)\n\n- 先序遍历\n```c\n//先序遍历\nvoid PreOrder(BiTree T){\n    if(T){\n        visit(T);//操作\n        PreOrder(T->lchild);\n        PreOrder(T->rchild);\n    }\n}\n```\n- 中序遍历\n```c\n//中序遍历\nvoid InOrder(BiTree T){\n    if(T){\n        InOrder(T->lchild);\n        visit(T);//操作\n        InOrder(T->rchild);\n    }\n}\n```\n- 后序遍历\n```c\n//后序遍历\nvoid PostOrder(BiTree T){\n    if(T){\n        PostOrder(T->lchild);\n        PostOrder(T->rchild);\n        vist(T);//操作\n    }\n}\n```\n\n- 求树的深度\n```c\n//求树的深度\nint treeDepth(BiTree T){\n    if(!T)\n        return 0;\n    else{\n        int l=treeDepth(T->lchild);\n        int r=treeDepth(T->rchild);\n        return (l>r)?(l+1):(r+1);\n    }\n}\n```\n\n- 层次遍历\n```c\n//层次遍历\nvoid LevelOrder(BiTree T){\n    BiTree p;\n    BiTree q[MaxSize];\n    int front=0, rear=0;\n    if(T){\n        rear=(rear+1)%MaxSize;\n        q[rear]=T;\n        while(front!=rear){\n            front=(front+1)%MaxSize;\n            p=q[front];\n            visit(p);\n            if(p->lchild){\n                rear=(rear+1)%MaxSize;\n                q[rear]=p->lchild;\n            }\n            if(p->rchild){\n                rear=(rear+1)%MaxSize;\n                q[rear]=p->rchild;\n            }\n        }\n    }\n}\n```\n\n### 5.2.5 练习\n- 求遍历序列\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/6.png)\n![数据结构](/img/datastruct/5_tree/bintree/6.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/7.png)\n![数据结构](/img/datastruct/5_tree/bintree/7.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/8.png)\n![数据结构](/img/datastruct/5_tree/bintree/8.png)\n\n- 根据序列求树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/10.png)\n![数据结构](/img/datastruct/5_tree/bintree/10.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/11.png)\n![数据结构](/img/datastruct/5_tree/bintree/11.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/12.png)\n![数据结构](/img/datastruct/5_tree/bintree/12.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/13.png)\n![数据结构](/img/datastruct/5_tree/bintree/13.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/14.png)\n![数据结构](/img/datastruct/5_tree/bintree/14.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/15.png)\n![数据结构](/img/datastruct/5_tree/bintree/15.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/16.png)\n![数据结构](/img/datastruct/5_tree/bintree/16.png)\n\n### 5.2.6 线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/17.png)\n![数据结构](/img/datastruct/5_tree/bintree/17.png)\n- 存储结构\n```c\n//线索二叉树\ntypedef struct ThreadNode{\n    int data;\n    struct ThreadNode *lchild, *rchild;\n    int ltag, rtag;//左右线索标志\n}ThreadNode, *ThreadTree;\n```\n- 中序线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/18.png)\n![数据结构](/img/datastruct/5_tree/bintree/18.png)\n- 先序线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/19.png)\n![数据结构](/img/datastruct/5_tree/bintree/19.png)\n- 后序线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/20.png)\n![数据结构](/img/datastruct/5_tree/bintree/20.png)\n- 线索化\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/21.png)\n![数据结构](/img/datastruct/5_tree/bintree/21.png)\n```c\n//土办法找到中序前驱\nBiTNode *p=NULL, *pre=NULL,*final=NULL;\nvoid findPre(BiTree T){\n    if(T){\n        findPre(T->lchild);\n        visit(T);\n        findPre(T->rchild);\n    }\n}\nvoid visit(BiTNode* q){\n    if(q==p)\n        final=pre;\n    else\n        pre=q;\n}\n```\n\n```c\n//中序线索化\nThreadNode *pre=NULL;\nvoid InThread(ThreadTree p){\n    if(p){\n        InThread(p->lchild);\n        if(!p->lchild){\n            p->lchild=pre;\n            p->ltag=1;\n        }\n        if(!pre->rchild){\n            pre->rchild=p;\n            pre->rtag=1;\n        }\n        pre=p;\n        InThread(p->rchild);\n    }\n}\n//先序线索化\nvoid PreThread(ThreadTree p){\n    if(p){\n        if(!p->lchild){\n            p->lchild=pre;\n            p->ltag=1;\n        }\n        if(!pre->rchild){\n            pre->rchild=p;\n            pre->rtag=1;\n        }\n        pre=p;\n        if(p->ltag==0)\n            PreThread(p->lchild);\n        PreThread(p->rchild);\n    }\n}\n//后序线索化\nvoid PostThread(ThreadTree p){\n    if(p){\n        if(!p->lchild){\n            p->lchild=pre;\n            p->ltag=1;\n        }\n        if(!pre->rchild){\n            pre->rchild=p;\n            pre->rtag=1;\n        }\n        pre=p;\n        PreThread(p->lchild);\n        PreThread(p->rchild);\n    }\n}\nvoid CreateInThread(ThreadTree T){\n    pre=NULL;\n    if(T){\n        InThread(T);\n        if(!pre->rchild){\n            pre->rtag=1;\n        }\n    }\n}\n```\n\n- 线索二叉树找前驱/后继\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/22.png)\n![数据结构](/img/datastruct/5_tree/bintree/22.png)\n    - 中序，后继\n\n        1）p->rtag==1，则next=p->rchild\n\n        2）p->rtag==0，则\n        ```c\n        //中序线索二叉树找后继\n        ThreadNode *Firstnode(ThreadNode *p){\n            while(p->ltag==0)\n                p=p->lchild;\n            return p;\n        }\n        ThreadNode *Nextnode(ThreadNode *p){\n            if(p->rtag==0)\n                return Firstnode(p->rchild);\n            else\n                return p->rchild;\n        }\n        ```\n    - 中序，前驱\n\n        1）p->ltag==1，则pre=p->lchild\n\n        2）p->ltag==0,pre=左子树的最右下\n\n        ```c\n        //中序线索二叉树找到前驱\n        ThreadNode *Lastnode(ThreadNode *p){\n            while(p->rtag==0)\n                p=p->rchild;\n            return p;\n        }\n        ThreadNode *Prenode(ThreadNode *p){\n            if(p->ltag==0)\n                return Lastnode(p->lchild);\n            else\n                return p->lchild;\n        }\n        //对中序线索二叉树逆向遍历\n        void InOrder(ThreadNode *T){\n            for(ThreadNode *p=Lastnode(T); p!=NULL; p=Prenode(p))\n                visit(p);\n        }\n        ```\n    - 先序，后继\n\n        1）p->rtag==1，则next=p->rchild\n\n        2）p->rtag==0，则next=左孩子（无则右孩子）\n\n    - 先序，前驱\n\n\n        1）p->ltag==1，则prep->lchild\n    \n        2）p->ltag==0\n    \n        - 若能找到p的父，p为左孩子，则pre=父\n    \n        - 若能找到p的父，p为右孩子，左兄弟空，则pre=父\n    \n        - 若能找到p的父，p为右孩子，左兄弟不空，则pre=左子树中最后一个被中序遍历的结点\n    \n    - 后序，前驱\n    \n        1）p->ltag==1，则pre=p->lchild\n    \n        2）p->ltag==0，则pre=右孩子（无则左孩子）\n    \n    - 后序，后继\n\n\n        1）p->rtag==1，则next->rchild\n    \n        2）p->rtag==0\n    \n        - 若能找到p的父，p为右孩子，则next=父\n    \n        - 若能找到p的父，p为左孩子，右兄弟空，则next=父\n    \n        - 若能找到p的父，p为左孩子，右兄弟不空，则next=右子树中第一个被后序遍历的结点\n\n\n\n","source":"_posts/datastruct/5_tree/2_bintree.md","raw":"---\ntitle: 5.2 二叉树\ndate: 2023-08-07 00:00:00\ntags: [数据结构,树,二叉树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/1.png)\n![数据结构](/img/datastruct/5_tree/bintree/1.png)\n<!--more-->\n- 二叉树是有序树，有左右之分\n- 二叉树有五种基本形态：空二叉树、只有根结点、只有左子树、只有右子树、左右子树都有\n\n### 5.2.1 特殊二叉树\n|名称|说明|特点|\n|:---:|:---:|:---:|\n|满二叉树|所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上|![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/2.png)|\n|完全二叉树|叶子结点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树|![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/3.png)|\n|二叉排序树|空树 / 左子树上所有结点的值均小于它的根结点的值；右子树上所有结点的值均大于它的根结点的值；左右子树也分别为二叉排序树||\n|平衡二叉树|空树 / 左子树和右子树的深度之差的绝对值不超过1，且它的左子树和右子树都是一棵平衡二叉树||\n\n### 5.2.2 一些性质\n- 叶子结点比度为2的结点多1个\n- 第i层最多有2<sup>i-1</sup>个结点\n- 高度为h的二叉树至多有2<sup>h</sup>-1个结点\n- 有n个结点的完全二叉树高度为$$\\lceil log_2(n+1)\\rceil 或 \\lfloor log_2n\\rfloor+1$$\n- 若完全二叉树有2k个结点，n<sub>0</sub>=k,n<sub>1</sub>=1,n<sub>2</sub>=k-1\n\n- 若完全二叉树有2k-1个结点，n<sub>0</sub>=k,n<sub>1</sub>=0,n<sub>2</sub>=k-1\n\n### 5.2.3 存储结构\n- 顺序存储\n```c\n#define MaxSize 100\ntypedef struct{\n    int value;\n    int isEmpty;\n}TreeNode;\n\nTreeNode t[MaxSize];\n```\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/4.png)\n![数据结构](/img/datastruct/5_tree/bintree/4.png)\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/5.png)\n![数据结构](/img/datastruct/5_tree/bintree/5.png)\n\n- 链式存储\n  \n```c\ntypedef struct BiTnode{\n    int data;\n    struct BiTnode *lchild, *rchild;\n}BiTNode,BiTree;\n```\n- n个结点的二叉链表共有n+1个空链域\n\n### 5.2.4 遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/9.png)\n![数据结构](/img/datastruct/5_tree/bintree/9.png)\n\n- 先序遍历\n```c\n//先序遍历\nvoid PreOrder(BiTree T){\n    if(T){\n        visit(T);//操作\n        PreOrder(T->lchild);\n        PreOrder(T->rchild);\n    }\n}\n```\n- 中序遍历\n```c\n//中序遍历\nvoid InOrder(BiTree T){\n    if(T){\n        InOrder(T->lchild);\n        visit(T);//操作\n        InOrder(T->rchild);\n    }\n}\n```\n- 后序遍历\n```c\n//后序遍历\nvoid PostOrder(BiTree T){\n    if(T){\n        PostOrder(T->lchild);\n        PostOrder(T->rchild);\n        vist(T);//操作\n    }\n}\n```\n\n- 求树的深度\n```c\n//求树的深度\nint treeDepth(BiTree T){\n    if(!T)\n        return 0;\n    else{\n        int l=treeDepth(T->lchild);\n        int r=treeDepth(T->rchild);\n        return (l>r)?(l+1):(r+1);\n    }\n}\n```\n\n- 层次遍历\n```c\n//层次遍历\nvoid LevelOrder(BiTree T){\n    BiTree p;\n    BiTree q[MaxSize];\n    int front=0, rear=0;\n    if(T){\n        rear=(rear+1)%MaxSize;\n        q[rear]=T;\n        while(front!=rear){\n            front=(front+1)%MaxSize;\n            p=q[front];\n            visit(p);\n            if(p->lchild){\n                rear=(rear+1)%MaxSize;\n                q[rear]=p->lchild;\n            }\n            if(p->rchild){\n                rear=(rear+1)%MaxSize;\n                q[rear]=p->rchild;\n            }\n        }\n    }\n}\n```\n\n### 5.2.5 练习\n- 求遍历序列\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/6.png)\n![数据结构](/img/datastruct/5_tree/bintree/6.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/7.png)\n![数据结构](/img/datastruct/5_tree/bintree/7.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/8.png)\n![数据结构](/img/datastruct/5_tree/bintree/8.png)\n\n- 根据序列求树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/10.png)\n![数据结构](/img/datastruct/5_tree/bintree/10.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/11.png)\n![数据结构](/img/datastruct/5_tree/bintree/11.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/12.png)\n![数据结构](/img/datastruct/5_tree/bintree/12.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/13.png)\n![数据结构](/img/datastruct/5_tree/bintree/13.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/14.png)\n![数据结构](/img/datastruct/5_tree/bintree/14.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/15.png)\n![数据结构](/img/datastruct/5_tree/bintree/15.png)\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/16.png)\n![数据结构](/img/datastruct/5_tree/bintree/16.png)\n\n### 5.2.6 线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/17.png)\n![数据结构](/img/datastruct/5_tree/bintree/17.png)\n- 存储结构\n```c\n//线索二叉树\ntypedef struct ThreadNode{\n    int data;\n    struct ThreadNode *lchild, *rchild;\n    int ltag, rtag;//左右线索标志\n}ThreadNode, *ThreadTree;\n```\n- 中序线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/18.png)\n![数据结构](/img/datastruct/5_tree/bintree/18.png)\n- 先序线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/19.png)\n![数据结构](/img/datastruct/5_tree/bintree/19.png)\n- 后序线索二叉树\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/20.png)\n![数据结构](/img/datastruct/5_tree/bintree/20.png)\n- 线索化\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/21.png)\n![数据结构](/img/datastruct/5_tree/bintree/21.png)\n```c\n//土办法找到中序前驱\nBiTNode *p=NULL, *pre=NULL,*final=NULL;\nvoid findPre(BiTree T){\n    if(T){\n        findPre(T->lchild);\n        visit(T);\n        findPre(T->rchild);\n    }\n}\nvoid visit(BiTNode* q){\n    if(q==p)\n        final=pre;\n    else\n        pre=q;\n}\n```\n\n```c\n//中序线索化\nThreadNode *pre=NULL;\nvoid InThread(ThreadTree p){\n    if(p){\n        InThread(p->lchild);\n        if(!p->lchild){\n            p->lchild=pre;\n            p->ltag=1;\n        }\n        if(!pre->rchild){\n            pre->rchild=p;\n            pre->rtag=1;\n        }\n        pre=p;\n        InThread(p->rchild);\n    }\n}\n//先序线索化\nvoid PreThread(ThreadTree p){\n    if(p){\n        if(!p->lchild){\n            p->lchild=pre;\n            p->ltag=1;\n        }\n        if(!pre->rchild){\n            pre->rchild=p;\n            pre->rtag=1;\n        }\n        pre=p;\n        if(p->ltag==0)\n            PreThread(p->lchild);\n        PreThread(p->rchild);\n    }\n}\n//后序线索化\nvoid PostThread(ThreadTree p){\n    if(p){\n        if(!p->lchild){\n            p->lchild=pre;\n            p->ltag=1;\n        }\n        if(!pre->rchild){\n            pre->rchild=p;\n            pre->rtag=1;\n        }\n        pre=p;\n        PreThread(p->lchild);\n        PreThread(p->rchild);\n    }\n}\nvoid CreateInThread(ThreadTree T){\n    pre=NULL;\n    if(T){\n        InThread(T);\n        if(!pre->rchild){\n            pre->rtag=1;\n        }\n    }\n}\n```\n\n- 线索二叉树找前驱/后继\n![](../../../../themes/yilia/source/img/datastruct/5_tree/bintree/22.png)\n![数据结构](/img/datastruct/5_tree/bintree/22.png)\n    - 中序，后继\n\n        1）p->rtag==1，则next=p->rchild\n\n        2）p->rtag==0，则\n        ```c\n        //中序线索二叉树找后继\n        ThreadNode *Firstnode(ThreadNode *p){\n            while(p->ltag==0)\n                p=p->lchild;\n            return p;\n        }\n        ThreadNode *Nextnode(ThreadNode *p){\n            if(p->rtag==0)\n                return Firstnode(p->rchild);\n            else\n                return p->rchild;\n        }\n        ```\n    - 中序，前驱\n\n        1）p->ltag==1，则pre=p->lchild\n\n        2）p->ltag==0,pre=左子树的最右下\n\n        ```c\n        //中序线索二叉树找到前驱\n        ThreadNode *Lastnode(ThreadNode *p){\n            while(p->rtag==0)\n                p=p->rchild;\n            return p;\n        }\n        ThreadNode *Prenode(ThreadNode *p){\n            if(p->ltag==0)\n                return Lastnode(p->lchild);\n            else\n                return p->lchild;\n        }\n        //对中序线索二叉树逆向遍历\n        void InOrder(ThreadNode *T){\n            for(ThreadNode *p=Lastnode(T); p!=NULL; p=Prenode(p))\n                visit(p);\n        }\n        ```\n    - 先序，后继\n\n        1）p->rtag==1，则next=p->rchild\n\n        2）p->rtag==0，则next=左孩子（无则右孩子）\n\n    - 先序，前驱\n\n\n        1）p->ltag==1，则prep->lchild\n    \n        2）p->ltag==0\n    \n        - 若能找到p的父，p为左孩子，则pre=父\n    \n        - 若能找到p的父，p为右孩子，左兄弟空，则pre=父\n    \n        - 若能找到p的父，p为右孩子，左兄弟不空，则pre=左子树中最后一个被中序遍历的结点\n    \n    - 后序，前驱\n    \n        1）p->ltag==1，则pre=p->lchild\n    \n        2）p->ltag==0，则pre=右孩子（无则左孩子）\n    \n    - 后序，后继\n\n\n        1）p->rtag==1，则next->rchild\n    \n        2）p->rtag==0\n    \n        - 若能找到p的父，p为右孩子，则next=父\n    \n        - 若能找到p的父，p为左孩子，右兄弟空，则next=父\n    \n        - 若能找到p的父，p为左孩子，右兄弟不空，则next=右子树中第一个被后序遍历的结点\n\n\n\n","slug":"datastruct/5_tree/2_bintree","published":1,"updated":"2023-10-23T12:16:20.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr6001dwovw2nushy1i","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/1.png\"><br><img src=\"/img/datastruct/5_tree/bintree/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<ul>\n<li>二叉树是有序树，有左右之分</li>\n<li>二叉树有五种基本形态：空二叉树、只有根结点、只有左子树、只有右子树、左右子树都有</li>\n</ul>\n<h3 id=\"5-2-1-特殊二叉树\"><a href=\"#5-2-1-特殊二叉树\" class=\"headerlink\" title=\"5.2.1 特殊二叉树\"></a>5.2.1 特殊二叉树</h3><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">满二叉树</td>\n<td align=\"center\">所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上</td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/2.png\"></td>\n</tr>\n<tr>\n<td align=\"center\">完全二叉树</td>\n<td align=\"center\">叶子结点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/3.png\"></td>\n</tr>\n<tr>\n<td align=\"center\">二叉排序树</td>\n<td align=\"center\">空树 &#x2F; 左子树上所有结点的值均小于它的根结点的值；右子树上所有结点的值均大于它的根结点的值；左右子树也分别为二叉排序树</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">平衡二叉树</td>\n<td align=\"center\">空树 &#x2F; 左子树和右子树的深度之差的绝对值不超过1，且它的左子树和右子树都是一棵平衡二叉树</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-2-2-一些性质\"><a href=\"#5-2-2-一些性质\" class=\"headerlink\" title=\"5.2.2 一些性质\"></a>5.2.2 一些性质</h3><ul>\n<li><p>叶子结点比度为2的结点多1个</p>\n</li>\n<li><p>第i层最多有2<sup>i-1</sup>个结点</p>\n</li>\n<li><p>高度为h的二叉树至多有2<sup>h</sup>-1个结点</p>\n</li>\n<li><p>有n个结点的完全二叉树高度为$$\\lceil log_2(n+1)\\rceil 或 \\lfloor log_2n\\rfloor+1$$</p>\n</li>\n<li><p>若完全二叉树有2k个结点，n<sub>0</sub>&#x3D;k,n<sub>1</sub>&#x3D;1,n<sub>2</sub>&#x3D;k-1</p>\n</li>\n<li><p>若完全二叉树有2k-1个结点，n<sub>0</sub>&#x3D;k,n<sub>1</sub>&#x3D;0,n<sub>2</sub>&#x3D;k-1</p>\n</li>\n</ul>\n<h3 id=\"5-2-3-存储结构\"><a href=\"#5-2-3-存储结构\" class=\"headerlink\" title=\"5.2.3 存储结构\"></a>5.2.3 存储结构</h3><ul>\n<li>顺序存储<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 100</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"type\">int</span> isEmpty;</span><br><span class=\"line\">&#125;TreeNode;</span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode t[MaxSize];</span><br></pre></td></tr></table></figure>\n<img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/4.png\"><br><img src=\"/img/datastruct/5_tree/bintree/4.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/5.png\"><br><img src=\"/img/datastruct/5_tree/bintree/5.png\" alt=\"数据结构\"></p>\n<ul>\n<li>链式存储</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTnode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTnode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span></span><br><span class=\"line\">&#125;BiTNode,BiTree;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>n个结点的二叉链表共有n+1个空链域</li>\n</ul>\n<h3 id=\"5-2-4-遍历\"><a href=\"#5-2-4-遍历\" class=\"headerlink\" title=\"5.2.4 遍历\"></a>5.2.4 遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/9.png\"><br><img src=\"/img/datastruct/5_tree/bintree/9.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>先序遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        visit(T);<span class=\"comment\">//操作</span></span><br><span class=\"line\">        PreOrder(T-&gt;lchild);</span><br><span class=\"line\">        PreOrder(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>中序遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        InOrder(T-&gt;lchild);</span><br><span class=\"line\">        visit(T);<span class=\"comment\">//操作</span></span><br><span class=\"line\">        InOrder(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>后序遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        PostOrder(T-&gt;lchild);</span><br><span class=\"line\">        PostOrder(T-&gt;rchild);</span><br><span class=\"line\">        vist(T);<span class=\"comment\">//操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求树的深度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求树的深度</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">treeDepth</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!T)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=treeDepth(T-&gt;lchild);</span><br><span class=\"line\">        <span class=\"type\">int</span> r=treeDepth(T-&gt;rchild);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (l&gt;r)?(l+<span class=\"number\">1</span>):(r+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>层次遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//层次遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LevelOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    BiTree p;</span><br><span class=\"line\">    BiTree q[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> front=<span class=\"number\">0</span>, rear=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        rear=(rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">        q[rear]=T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(front!=rear)&#123;</span><br><span class=\"line\">            front=(front+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">            p=q[front];</span><br><span class=\"line\">            visit(p);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;lchild)&#123;</span><br><span class=\"line\">                rear=(rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">                q[rear]=p-&gt;lchild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;rchild)&#123;</span><br><span class=\"line\">                rear=(rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">                q[rear]=p-&gt;rchild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-2-5-练习\"><a href=\"#5-2-5-练习\" class=\"headerlink\" title=\"5.2.5 练习\"></a>5.2.5 练习</h3><ul>\n<li><p>求遍历序列<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/6.png\"><br><img src=\"/img/datastruct/5_tree/bintree/6.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/7.png\"><br><img src=\"/img/datastruct/5_tree/bintree/7.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/8.png\"><br><img src=\"/img/datastruct/5_tree/bintree/8.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>根据序列求树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/10.png\"><br><img src=\"/img/datastruct/5_tree/bintree/10.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/11.png\"><br><img src=\"/img/datastruct/5_tree/bintree/11.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/12.png\"><br><img src=\"/img/datastruct/5_tree/bintree/12.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/13.png\"><br><img src=\"/img/datastruct/5_tree/bintree/13.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/14.png\"><br><img src=\"/img/datastruct/5_tree/bintree/14.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/15.png\"><br><img src=\"/img/datastruct/5_tree/bintree/15.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/16.png\"><br><img src=\"/img/datastruct/5_tree/bintree/16.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n<h3 id=\"5-2-6-线索二叉树\"><a href=\"#5-2-6-线索二叉树\" class=\"headerlink\" title=\"5.2.6 线索二叉树\"></a>5.2.6 线索二叉树</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/17.png\"><br><img src=\"/img/datastruct/5_tree/bintree/17.png\" alt=\"数据结构\"></p>\n<ul>\n<li>存储结构<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线索二叉树</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ThreadNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ThreadNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ltag, rtag;<span class=\"comment\">//左右线索标志</span></span><br><span class=\"line\">&#125;ThreadNode, *ThreadTree;</span><br></pre></td></tr></table></figure></li>\n<li>中序线索二叉树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/18.png\"><br><img src=\"/img/datastruct/5_tree/bintree/18.png\" alt=\"数据结构\"></li>\n<li>先序线索二叉树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/19.png\"><br><img src=\"/img/datastruct/5_tree/bintree/19.png\" alt=\"数据结构\"></li>\n<li>后序线索二叉树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/20.png\"><br><img src=\"/img/datastruct/5_tree/bintree/20.png\" alt=\"数据结构\"></li>\n<li>线索化<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/21.png\"><br><img src=\"/img/datastruct/5_tree/bintree/21.png\" alt=\"数据结构\"><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//土办法找到中序前驱</span></span><br><span class=\"line\">BiTNode *p=<span class=\"literal\">NULL</span>, *pre=<span class=\"literal\">NULL</span>,*final=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">findPre</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        findPre(T-&gt;lchild);</span><br><span class=\"line\">        visit(T);</span><br><span class=\"line\">        findPre(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(BiTNode* q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q==p)</span><br><span class=\"line\">        final=pre;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pre=q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序线索化</span></span><br><span class=\"line\">ThreadNode *pre=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InThread</span><span class=\"params\">(ThreadTree p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)&#123;</span><br><span class=\"line\">        InThread(p-&gt;lchild);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;lchild)&#123;</span><br><span class=\"line\">            p-&gt;lchild=pre;</span><br><span class=\"line\">            p-&gt;ltag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rchild=p;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre=p;</span><br><span class=\"line\">        InThread(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先序线索化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreThread</span><span class=\"params\">(ThreadTree p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;lchild)&#123;</span><br><span class=\"line\">            p-&gt;lchild=pre;</span><br><span class=\"line\">            p-&gt;ltag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rchild=p;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre=p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;ltag==<span class=\"number\">0</span>)</span><br><span class=\"line\">            PreThread(p-&gt;lchild);</span><br><span class=\"line\">        PreThread(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//后序线索化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostThread</span><span class=\"params\">(ThreadTree p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;lchild)&#123;</span><br><span class=\"line\">            p-&gt;lchild=pre;</span><br><span class=\"line\">            p-&gt;ltag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rchild=p;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre=p;</span><br><span class=\"line\">        PreThread(p-&gt;lchild);</span><br><span class=\"line\">        PreThread(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateInThread</span><span class=\"params\">(ThreadTree T)</span>&#123;</span><br><span class=\"line\">    pre=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        InThread(T);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>线索二叉树找前驱&#x2F;后继<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/22.png\"><br><img src=\"/img/datastruct/5_tree/bintree/22.png\" alt=\"数据结构\"><ul>\n<li><p>中序，后继</p>\n<p>  1）p-&gt;rtag&#x3D;&#x3D;1，则next&#x3D;p-&gt;rchild</p>\n<p>  2）p-&gt;rtag&#x3D;&#x3D;0，则</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序线索二叉树找后继</span></span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Firstnode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;ltag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        p=p-&gt;lchild;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Nextnode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;rtag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Firstnode(p-&gt;rchild);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>中序，前驱</p>\n<p>  1）p-&gt;ltag&#x3D;&#x3D;1，则pre&#x3D;p-&gt;lchild</p>\n<p>  2）p-&gt;ltag&#x3D;&#x3D;0,pre&#x3D;左子树的最右下</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序线索二叉树找到前驱</span></span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Lastnode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;rtag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        p=p-&gt;rchild;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Prenode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;ltag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Lastnode(p-&gt;lchild);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对中序线索二叉树逆向遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(ThreadNode *T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ThreadNode *p=Lastnode(T); p!=<span class=\"literal\">NULL</span>; p=Prenode(p))</span><br><span class=\"line\">        visit(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>先序，后继</p>\n<p>  1）p-&gt;rtag&#x3D;&#x3D;1，则next&#x3D;p-&gt;rchild</p>\n<p>  2）p-&gt;rtag&#x3D;&#x3D;0，则next&#x3D;左孩子（无则右孩子）</p>\n</li>\n<li><p>先序，前驱</p>\n<p>  1）p-&gt;ltag&#x3D;&#x3D;1，则prep-&gt;lchild</p>\n<p>  2）p-&gt;ltag&#x3D;&#x3D;0</p>\n<ul>\n<li><p>若能找到p的父，p为左孩子，则pre&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为右孩子，左兄弟空，则pre&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为右孩子，左兄弟不空，则pre&#x3D;左子树中最后一个被中序遍历的结点</p>\n</li>\n</ul>\n</li>\n<li><p>后序，前驱</p>\n<p>  1）p-&gt;ltag&#x3D;&#x3D;1，则pre&#x3D;p-&gt;lchild</p>\n<p>  2）p-&gt;ltag&#x3D;&#x3D;0，则pre&#x3D;右孩子（无则左孩子）</p>\n</li>\n<li><p>后序，后继</p>\n<p>  1）p-&gt;rtag&#x3D;&#x3D;1，则next-&gt;rchild</p>\n<p>  2）p-&gt;rtag&#x3D;&#x3D;0</p>\n<ul>\n<li><p>若能找到p的父，p为右孩子，则next&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为左孩子，右兄弟空，则next&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为左孩子，右兄弟不空，则next&#x3D;右子树中第一个被后序遍历的结点</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/1.png\"><br><img src=\"/img/datastruct/5_tree/bintree/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<ul>\n<li>二叉树是有序树，有左右之分</li>\n<li>二叉树有五种基本形态：空二叉树、只有根结点、只有左子树、只有右子树、左右子树都有</li>\n</ul>\n<h3 id=\"5-2-1-特殊二叉树\"><a href=\"#5-2-1-特殊二叉树\" class=\"headerlink\" title=\"5.2.1 特殊二叉树\"></a>5.2.1 特殊二叉树</h3><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">满二叉树</td>\n<td align=\"center\">所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上</td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/2.png\"></td>\n</tr>\n<tr>\n<td align=\"center\">完全二叉树</td>\n<td align=\"center\">叶子结点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</td>\n<td align=\"center\"><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/3.png\"></td>\n</tr>\n<tr>\n<td align=\"center\">二叉排序树</td>\n<td align=\"center\">空树 &#x2F; 左子树上所有结点的值均小于它的根结点的值；右子树上所有结点的值均大于它的根结点的值；左右子树也分别为二叉排序树</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">平衡二叉树</td>\n<td align=\"center\">空树 &#x2F; 左子树和右子树的深度之差的绝对值不超过1，且它的左子树和右子树都是一棵平衡二叉树</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-2-2-一些性质\"><a href=\"#5-2-2-一些性质\" class=\"headerlink\" title=\"5.2.2 一些性质\"></a>5.2.2 一些性质</h3><ul>\n<li><p>叶子结点比度为2的结点多1个</p>\n</li>\n<li><p>第i层最多有2<sup>i-1</sup>个结点</p>\n</li>\n<li><p>高度为h的二叉树至多有2<sup>h</sup>-1个结点</p>\n</li>\n<li><p>有n个结点的完全二叉树高度为$$\\lceil log_2(n+1)\\rceil 或 \\lfloor log_2n\\rfloor+1$$</p>\n</li>\n<li><p>若完全二叉树有2k个结点，n<sub>0</sub>&#x3D;k,n<sub>1</sub>&#x3D;1,n<sub>2</sub>&#x3D;k-1</p>\n</li>\n<li><p>若完全二叉树有2k-1个结点，n<sub>0</sub>&#x3D;k,n<sub>1</sub>&#x3D;0,n<sub>2</sub>&#x3D;k-1</p>\n</li>\n</ul>\n<h3 id=\"5-2-3-存储结构\"><a href=\"#5-2-3-存储结构\" class=\"headerlink\" title=\"5.2.3 存储结构\"></a>5.2.3 存储结构</h3><ul>\n<li>顺序存储<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 100</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"type\">int</span> isEmpty;</span><br><span class=\"line\">&#125;TreeNode;</span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode t[MaxSize];</span><br></pre></td></tr></table></figure>\n<img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/4.png\"><br><img src=\"/img/datastruct/5_tree/bintree/4.png\" alt=\"数据结构\"></li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/5.png\"><br><img src=\"/img/datastruct/5_tree/bintree/5.png\" alt=\"数据结构\"></p>\n<ul>\n<li>链式存储</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTnode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTnode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span></span><br><span class=\"line\">&#125;BiTNode,BiTree;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>n个结点的二叉链表共有n+1个空链域</li>\n</ul>\n<h3 id=\"5-2-4-遍历\"><a href=\"#5-2-4-遍历\" class=\"headerlink\" title=\"5.2.4 遍历\"></a>5.2.4 遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/9.png\"><br><img src=\"/img/datastruct/5_tree/bintree/9.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>先序遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        visit(T);<span class=\"comment\">//操作</span></span><br><span class=\"line\">        PreOrder(T-&gt;lchild);</span><br><span class=\"line\">        PreOrder(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>中序遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        InOrder(T-&gt;lchild);</span><br><span class=\"line\">        visit(T);<span class=\"comment\">//操作</span></span><br><span class=\"line\">        InOrder(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>后序遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后序遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        PostOrder(T-&gt;lchild);</span><br><span class=\"line\">        PostOrder(T-&gt;rchild);</span><br><span class=\"line\">        vist(T);<span class=\"comment\">//操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求树的深度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求树的深度</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">treeDepth</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!T)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=treeDepth(T-&gt;lchild);</span><br><span class=\"line\">        <span class=\"type\">int</span> r=treeDepth(T-&gt;rchild);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (l&gt;r)?(l+<span class=\"number\">1</span>):(r+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>层次遍历</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//层次遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LevelOrder</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    BiTree p;</span><br><span class=\"line\">    BiTree q[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> front=<span class=\"number\">0</span>, rear=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        rear=(rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">        q[rear]=T;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(front!=rear)&#123;</span><br><span class=\"line\">            front=(front+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">            p=q[front];</span><br><span class=\"line\">            visit(p);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;lchild)&#123;</span><br><span class=\"line\">                rear=(rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">                q[rear]=p-&gt;lchild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;rchild)&#123;</span><br><span class=\"line\">                rear=(rear+<span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">                q[rear]=p-&gt;rchild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-2-5-练习\"><a href=\"#5-2-5-练习\" class=\"headerlink\" title=\"5.2.5 练习\"></a>5.2.5 练习</h3><ul>\n<li><p>求遍历序列<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/6.png\"><br><img src=\"/img/datastruct/5_tree/bintree/6.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/7.png\"><br><img src=\"/img/datastruct/5_tree/bintree/7.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/8.png\"><br><img src=\"/img/datastruct/5_tree/bintree/8.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>根据序列求树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/10.png\"><br><img src=\"/img/datastruct/5_tree/bintree/10.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/11.png\"><br><img src=\"/img/datastruct/5_tree/bintree/11.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/12.png\"><br><img src=\"/img/datastruct/5_tree/bintree/12.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/13.png\"><br><img src=\"/img/datastruct/5_tree/bintree/13.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/14.png\"><br><img src=\"/img/datastruct/5_tree/bintree/14.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/15.png\"><br><img src=\"/img/datastruct/5_tree/bintree/15.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/16.png\"><br><img src=\"/img/datastruct/5_tree/bintree/16.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n<h3 id=\"5-2-6-线索二叉树\"><a href=\"#5-2-6-线索二叉树\" class=\"headerlink\" title=\"5.2.6 线索二叉树\"></a>5.2.6 线索二叉树</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/17.png\"><br><img src=\"/img/datastruct/5_tree/bintree/17.png\" alt=\"数据结构\"></p>\n<ul>\n<li>存储结构<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线索二叉树</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ThreadNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ThreadNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ltag, rtag;<span class=\"comment\">//左右线索标志</span></span><br><span class=\"line\">&#125;ThreadNode, *ThreadTree;</span><br></pre></td></tr></table></figure></li>\n<li>中序线索二叉树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/18.png\"><br><img src=\"/img/datastruct/5_tree/bintree/18.png\" alt=\"数据结构\"></li>\n<li>先序线索二叉树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/19.png\"><br><img src=\"/img/datastruct/5_tree/bintree/19.png\" alt=\"数据结构\"></li>\n<li>后序线索二叉树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/20.png\"><br><img src=\"/img/datastruct/5_tree/bintree/20.png\" alt=\"数据结构\"></li>\n<li>线索化<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/21.png\"><br><img src=\"/img/datastruct/5_tree/bintree/21.png\" alt=\"数据结构\"><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//土办法找到中序前驱</span></span><br><span class=\"line\">BiTNode *p=<span class=\"literal\">NULL</span>, *pre=<span class=\"literal\">NULL</span>,*final=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">findPre</span><span class=\"params\">(BiTree T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        findPre(T-&gt;lchild);</span><br><span class=\"line\">        visit(T);</span><br><span class=\"line\">        findPre(T-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(BiTNode* q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q==p)</span><br><span class=\"line\">        final=pre;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pre=q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序线索化</span></span><br><span class=\"line\">ThreadNode *pre=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InThread</span><span class=\"params\">(ThreadTree p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)&#123;</span><br><span class=\"line\">        InThread(p-&gt;lchild);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;lchild)&#123;</span><br><span class=\"line\">            p-&gt;lchild=pre;</span><br><span class=\"line\">            p-&gt;ltag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rchild=p;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre=p;</span><br><span class=\"line\">        InThread(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先序线索化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreThread</span><span class=\"params\">(ThreadTree p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;lchild)&#123;</span><br><span class=\"line\">            p-&gt;lchild=pre;</span><br><span class=\"line\">            p-&gt;ltag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rchild=p;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre=p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;ltag==<span class=\"number\">0</span>)</span><br><span class=\"line\">            PreThread(p-&gt;lchild);</span><br><span class=\"line\">        PreThread(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//后序线索化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostThread</span><span class=\"params\">(ThreadTree p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!p-&gt;lchild)&#123;</span><br><span class=\"line\">            p-&gt;lchild=pre;</span><br><span class=\"line\">            p-&gt;ltag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rchild=p;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre=p;</span><br><span class=\"line\">        PreThread(p-&gt;lchild);</span><br><span class=\"line\">        PreThread(p-&gt;rchild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateInThread</span><span class=\"params\">(ThreadTree T)</span>&#123;</span><br><span class=\"line\">    pre=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">        InThread(T);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!pre-&gt;rchild)&#123;</span><br><span class=\"line\">            pre-&gt;rtag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>线索二叉树找前驱&#x2F;后继<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/bintree/22.png\"><br><img src=\"/img/datastruct/5_tree/bintree/22.png\" alt=\"数据结构\"><ul>\n<li><p>中序，后继</p>\n<p>  1）p-&gt;rtag&#x3D;&#x3D;1，则next&#x3D;p-&gt;rchild</p>\n<p>  2）p-&gt;rtag&#x3D;&#x3D;0，则</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序线索二叉树找后继</span></span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Firstnode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;ltag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        p=p-&gt;lchild;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Nextnode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;rtag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Firstnode(p-&gt;rchild);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;rchild;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>中序，前驱</p>\n<p>  1）p-&gt;ltag&#x3D;&#x3D;1，则pre&#x3D;p-&gt;lchild</p>\n<p>  2）p-&gt;ltag&#x3D;&#x3D;0,pre&#x3D;左子树的最右下</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中序线索二叉树找到前驱</span></span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Lastnode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p-&gt;rtag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        p=p-&gt;rchild;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ThreadNode *<span class=\"title function_\">Prenode</span><span class=\"params\">(ThreadNode *p)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p-&gt;ltag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Lastnode(p-&gt;lchild);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;lchild;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对中序线索二叉树逆向遍历</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(ThreadNode *T)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ThreadNode *p=Lastnode(T); p!=<span class=\"literal\">NULL</span>; p=Prenode(p))</span><br><span class=\"line\">        visit(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>先序，后继</p>\n<p>  1）p-&gt;rtag&#x3D;&#x3D;1，则next&#x3D;p-&gt;rchild</p>\n<p>  2）p-&gt;rtag&#x3D;&#x3D;0，则next&#x3D;左孩子（无则右孩子）</p>\n</li>\n<li><p>先序，前驱</p>\n<p>  1）p-&gt;ltag&#x3D;&#x3D;1，则prep-&gt;lchild</p>\n<p>  2）p-&gt;ltag&#x3D;&#x3D;0</p>\n<ul>\n<li><p>若能找到p的父，p为左孩子，则pre&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为右孩子，左兄弟空，则pre&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为右孩子，左兄弟不空，则pre&#x3D;左子树中最后一个被中序遍历的结点</p>\n</li>\n</ul>\n</li>\n<li><p>后序，前驱</p>\n<p>  1）p-&gt;ltag&#x3D;&#x3D;1，则pre&#x3D;p-&gt;lchild</p>\n<p>  2）p-&gt;ltag&#x3D;&#x3D;0，则pre&#x3D;右孩子（无则左孩子）</p>\n</li>\n<li><p>后序，后继</p>\n<p>  1）p-&gt;rtag&#x3D;&#x3D;1，则next-&gt;rchild</p>\n<p>  2）p-&gt;rtag&#x3D;&#x3D;0</p>\n<ul>\n<li><p>若能找到p的父，p为右孩子，则next&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为左孩子，右兄弟空，则next&#x3D;父</p>\n</li>\n<li><p>若能找到p的父，p为左孩子，右兄弟不空，则next&#x3D;右子树中第一个被后序遍历的结点</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"6.1 图","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/1.png)\n![数据结构](/img/datastruct/6_graph/graph/1.png)\n\n\n## 6.1-1 定义\n- 由顶点的有穷非空集合和顶点之间边的集合组成\n- 通常表示为：G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。\n- 线性表可以空，树可以空，图不可以\n\n\n## 6.1-2 一些概念\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/2.png)\n![数据结构](/img/datastruct/6_graph/graph/2.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/3.png)\n![数据结构](/img/datastruct/6_graph/graph/3.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/4.png)\n![数据结构](/img/datastruct/6_graph/graph/4.png)\n- 生成子图要包含所有顶点\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/5.png)\n![数据结构](/img/datastruct/6_graph/graph/5.png)\n- 强连通分量：有向图中\n\n- 连通图的生成树：连通图的极小连通子图\n\n## 6.1-3 图的存储\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/6.png)\n![数据结构](/img/datastruct/6_graph/graph/6.png)\n### 6.1-3.1 邻接矩阵\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/7.png)\n![数据结构](/img/datastruct/6_graph/graph/7.png)\n- 出度：一行中非0元素的个数\n- 入度：一列中非0元素的个数\n- 空间复杂度：O(|v|<sup>2</sup>)\n- 无向图->对称->矩阵压缩\n- 设邻接矩阵A只含0、1，则A<sup>k</sup>中非零元素表示从i到j的长度为k的路径数\n\n### 6.1-3.2 邻接表\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/8.png)\n![数据结构](/img/datastruct/6_graph/graph/8.png)\n- 空间复杂度：O(|v|+|e|)\n\n### 6.1-3.3 十字链表（有向图）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/9.png)\n![数据结构](/img/datastruct/6_graph/graph/9.png)\n- 空间复杂度：O(|v|+|e|)\n- 如何找到指定顶点的所有出边：沿着绿色的箭头找\n- 如何找到指定顶点的所有入边：沿着橙色的箭头找\n\n### 6.1-3.4 邻接多重表（无向图）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/10.png)\n![数据结构](/img/datastruct/6_graph/graph/10.png)\n- 空间复杂度：O(|v|+|e|)\n- 删除边、顶点很方便\n\n\n## 6.1-4 基本操作\n|函数|功能|\n|:---|:---|\n|Adjacent(G,x,y)|判断是否有从x到y的边，无向图只需判断一次|\n|Neighbors(G,x)|返回与x邻接的顶点|\n|InsertVertex(G,x)|插入顶点|\n|DeleteVertex(G,x)|删除顶点|\n|AddEdge(G,x,y)|插入边|\n|RemoveEdge(G,x,y)|删除边|\n|FirstNeighbor(G,x)|返回x的第一个邻接点|\n|NextNeighbor(G,x,y)|返回x相对于y的下一个邻接点|\n|Get_edge_value(G,x,y)|返回边(x,y)的权值|\n|Set_edge_value(G,x,y,v)|设置边(x,y)的权值为v|\n\n|有向图|无向图|\n|:---|:---|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/11.png)![数据结构](/img/datastruct/6_graph/graph/11.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/12.png)![数据结构](/img/datastruct/6_graph/graph/12.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/13.png)![数据结构](/img/datastruct/6_graph/graph/13.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/14.png)![数据结构](/img/datastruct/6_graph/graph/14.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png)![数据结构](/img/datastruct/6_graph/graph/15.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png)![数据结构](/img/datastruct/6_graph/graph/15.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/16.png)![数据结构](/img/datastruct/6_graph/graph/16.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/17.png)![数据结构](/img/datastruct/6_graph/graph/17.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png)![数据结构](/img/datastruct/6_graph/graph/18.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png)![数据结构](/img/datastruct/6_graph/graph/18.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png)![数据结构](/img/datastruct/6_graph/graph/19.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png)![数据结构](/img/datastruct/6_graph/graph/19.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png)![数据结构](/img/datastruct/6_graph/graph/20.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png)![数据结构](/img/datastruct/6_graph/graph/20.png)|\n\n### 6.1-4.1 图的遍历\n- 广度优先遍历（BFS）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/21.png)\n![数据结构](/img/datastruct/6_graph/graph/21.png)\n\n    - 找到所有与v相邻的顶点：FirstNeighbor(G,v)，NextNeighbor(G,v,w)\n    - 标记哪个顶点已经访问过：visited[]\n    - 用队列保存已经访问过的顶点\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/22.png)\n![数据结构](/img/datastruct/6_graph/graph/22.png)\n    - 如果图是非连通的，需要对每个连通分量进行BFS\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/23.png)\n![数据结构](/img/datastruct/6_graph/graph/23.png)\n    - 广度优先生成树\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/24.png)\n![数据结构](/img/datastruct/6_graph/graph/24.png)\n    - 广度优先生成森林\n- 深度优先遍历（DFS）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/25.png)\n![数据结构](/img/datastruct/6_graph/graph/25.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/26.png)\n![数据结构](/img/datastruct/6_graph/graph/26.png)\n    - 深度优先生成树\n    - 深度优先生成森林\n","source":"_posts/datastruct/6_graph/1_graph.md","raw":"---\ntitle: 6.1 图\ndate: 2023-08-07 00:00:00\ntags: [数据结构,图]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/1.png)\n![数据结构](/img/datastruct/6_graph/graph/1.png)\n\n\n## 6.1-1 定义\n- 由顶点的有穷非空集合和顶点之间边的集合组成\n- 通常表示为：G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。\n- 线性表可以空，树可以空，图不可以\n\n\n## 6.1-2 一些概念\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/2.png)\n![数据结构](/img/datastruct/6_graph/graph/2.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/3.png)\n![数据结构](/img/datastruct/6_graph/graph/3.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/4.png)\n![数据结构](/img/datastruct/6_graph/graph/4.png)\n- 生成子图要包含所有顶点\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/5.png)\n![数据结构](/img/datastruct/6_graph/graph/5.png)\n- 强连通分量：有向图中\n\n- 连通图的生成树：连通图的极小连通子图\n\n## 6.1-3 图的存储\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/6.png)\n![数据结构](/img/datastruct/6_graph/graph/6.png)\n### 6.1-3.1 邻接矩阵\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/7.png)\n![数据结构](/img/datastruct/6_graph/graph/7.png)\n- 出度：一行中非0元素的个数\n- 入度：一列中非0元素的个数\n- 空间复杂度：O(|v|<sup>2</sup>)\n- 无向图->对称->矩阵压缩\n- 设邻接矩阵A只含0、1，则A<sup>k</sup>中非零元素表示从i到j的长度为k的路径数\n\n### 6.1-3.2 邻接表\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/8.png)\n![数据结构](/img/datastruct/6_graph/graph/8.png)\n- 空间复杂度：O(|v|+|e|)\n\n### 6.1-3.3 十字链表（有向图）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/9.png)\n![数据结构](/img/datastruct/6_graph/graph/9.png)\n- 空间复杂度：O(|v|+|e|)\n- 如何找到指定顶点的所有出边：沿着绿色的箭头找\n- 如何找到指定顶点的所有入边：沿着橙色的箭头找\n\n### 6.1-3.4 邻接多重表（无向图）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/10.png)\n![数据结构](/img/datastruct/6_graph/graph/10.png)\n- 空间复杂度：O(|v|+|e|)\n- 删除边、顶点很方便\n\n\n## 6.1-4 基本操作\n|函数|功能|\n|:---|:---|\n|Adjacent(G,x,y)|判断是否有从x到y的边，无向图只需判断一次|\n|Neighbors(G,x)|返回与x邻接的顶点|\n|InsertVertex(G,x)|插入顶点|\n|DeleteVertex(G,x)|删除顶点|\n|AddEdge(G,x,y)|插入边|\n|RemoveEdge(G,x,y)|删除边|\n|FirstNeighbor(G,x)|返回x的第一个邻接点|\n|NextNeighbor(G,x,y)|返回x相对于y的下一个邻接点|\n|Get_edge_value(G,x,y)|返回边(x,y)的权值|\n|Set_edge_value(G,x,y,v)|设置边(x,y)的权值为v|\n\n|有向图|无向图|\n|:---|:---|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/11.png)![数据结构](/img/datastruct/6_graph/graph/11.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/12.png)![数据结构](/img/datastruct/6_graph/graph/12.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/13.png)![数据结构](/img/datastruct/6_graph/graph/13.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/14.png)![数据结构](/img/datastruct/6_graph/graph/14.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png)![数据结构](/img/datastruct/6_graph/graph/15.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png)![数据结构](/img/datastruct/6_graph/graph/15.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/16.png)![数据结构](/img/datastruct/6_graph/graph/16.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/17.png)![数据结构](/img/datastruct/6_graph/graph/17.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png)![数据结构](/img/datastruct/6_graph/graph/18.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png)![数据结构](/img/datastruct/6_graph/graph/18.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png)![数据结构](/img/datastruct/6_graph/graph/19.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png)![数据结构](/img/datastruct/6_graph/graph/19.png)|\n|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png)![数据结构](/img/datastruct/6_graph/graph/20.png)|![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png)![数据结构](/img/datastruct/6_graph/graph/20.png)|\n\n### 6.1-4.1 图的遍历\n- 广度优先遍历（BFS）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/21.png)\n![数据结构](/img/datastruct/6_graph/graph/21.png)\n\n    - 找到所有与v相邻的顶点：FirstNeighbor(G,v)，NextNeighbor(G,v,w)\n    - 标记哪个顶点已经访问过：visited[]\n    - 用队列保存已经访问过的顶点\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/22.png)\n![数据结构](/img/datastruct/6_graph/graph/22.png)\n    - 如果图是非连通的，需要对每个连通分量进行BFS\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/23.png)\n![数据结构](/img/datastruct/6_graph/graph/23.png)\n    - 广度优先生成树\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/24.png)\n![数据结构](/img/datastruct/6_graph/graph/24.png)\n    - 广度优先生成森林\n- 深度优先遍历（DFS）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/25.png)\n![数据结构](/img/datastruct/6_graph/graph/25.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/graph/26.png)\n![数据结构](/img/datastruct/6_graph/graph/26.png)\n    - 深度优先生成树\n    - 深度优先生成森林\n","slug":"datastruct/6_graph/1_graph","published":1,"updated":"2023-10-23T12:26:47.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr7001hwovwapzffpyh","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/1.png\"><br><img src=\"/img/datastruct/6_graph/graph/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"6-1-1-定义\"><a href=\"#6-1-1-定义\" class=\"headerlink\" title=\"6.1-1 定义\"></a>6.1-1 定义</h2><ul>\n<li>由顶点的有穷非空集合和顶点之间边的集合组成</li>\n<li>通常表示为：G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</li>\n<li>线性表可以空，树可以空，图不可以</li>\n</ul>\n<h2 id=\"6-1-2-一些概念\"><a href=\"#6-1-2-一些概念\" class=\"headerlink\" title=\"6.1-2 一些概念\"></a>6.1-2 一些概念</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/2.png\"><br><img src=\"/img/datastruct/6_graph/graph/2.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/3.png\"><br><img src=\"/img/datastruct/6_graph/graph/3.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/4.png\"><br><img src=\"/img/datastruct/6_graph/graph/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>生成子图要包含所有顶点<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/5.png\"><br><img src=\"/img/datastruct/6_graph/graph/5.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>强连通分量：有向图中</p>\n</li>\n<li><p>连通图的生成树：连通图的极小连通子图</p>\n</li>\n</ul>\n<h2 id=\"6-1-3-图的存储\"><a href=\"#6-1-3-图的存储\" class=\"headerlink\" title=\"6.1-3 图的存储\"></a>6.1-3 图的存储</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/6.png\"><br><img src=\"/img/datastruct/6_graph/graph/6.png\" alt=\"数据结构\"></p>\n<h3 id=\"6-1-3-1-邻接矩阵\"><a href=\"#6-1-3-1-邻接矩阵\" class=\"headerlink\" title=\"6.1-3.1 邻接矩阵\"></a>6.1-3.1 邻接矩阵</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/7.png\"><br><img src=\"/img/datastruct/6_graph/graph/7.png\" alt=\"数据结构\"></p>\n<ul>\n<li>出度：一行中非0元素的个数</li>\n<li>入度：一列中非0元素的个数</li>\n<li>空间复杂度：O(|v|<sup>2</sup>)</li>\n<li>无向图-&gt;对称-&gt;矩阵压缩</li>\n<li>设邻接矩阵A只含0、1，则A<sup>k</sup>中非零元素表示从i到j的长度为k的路径数</li>\n</ul>\n<h3 id=\"6-1-3-2-邻接表\"><a href=\"#6-1-3-2-邻接表\" class=\"headerlink\" title=\"6.1-3.2 邻接表\"></a>6.1-3.2 邻接表</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/8.png\"><br><img src=\"/img/datastruct/6_graph/graph/8.png\" alt=\"数据结构\"></p>\n<ul>\n<li>空间复杂度：O(|v|+|e|)</li>\n</ul>\n<h3 id=\"6-1-3-3-十字链表（有向图）\"><a href=\"#6-1-3-3-十字链表（有向图）\" class=\"headerlink\" title=\"6.1-3.3 十字链表（有向图）\"></a>6.1-3.3 十字链表（有向图）</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/9.png\"><br><img src=\"/img/datastruct/6_graph/graph/9.png\" alt=\"数据结构\"></p>\n<ul>\n<li>空间复杂度：O(|v|+|e|)</li>\n<li>如何找到指定顶点的所有出边：沿着绿色的箭头找</li>\n<li>如何找到指定顶点的所有入边：沿着橙色的箭头找</li>\n</ul>\n<h3 id=\"6-1-3-4-邻接多重表（无向图）\"><a href=\"#6-1-3-4-邻接多重表（无向图）\" class=\"headerlink\" title=\"6.1-3.4 邻接多重表（无向图）\"></a>6.1-3.4 邻接多重表（无向图）</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/10.png\"><br><img src=\"/img/datastruct/6_graph/graph/10.png\" alt=\"数据结构\"></p>\n<ul>\n<li>空间复杂度：O(|v|+|e|)</li>\n<li>删除边、顶点很方便</li>\n</ul>\n<h2 id=\"6-1-4-基本操作\"><a href=\"#6-1-4-基本操作\" class=\"headerlink\" title=\"6.1-4 基本操作\"></a>6.1-4 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Adjacent(G,x,y)</td>\n<td align=\"left\">判断是否有从x到y的边，无向图只需判断一次</td>\n</tr>\n<tr>\n<td align=\"left\">Neighbors(G,x)</td>\n<td align=\"left\">返回与x邻接的顶点</td>\n</tr>\n<tr>\n<td align=\"left\">InsertVertex(G,x)</td>\n<td align=\"left\">插入顶点</td>\n</tr>\n<tr>\n<td align=\"left\">DeleteVertex(G,x)</td>\n<td align=\"left\">删除顶点</td>\n</tr>\n<tr>\n<td align=\"left\">AddEdge(G,x,y)</td>\n<td align=\"left\">插入边</td>\n</tr>\n<tr>\n<td align=\"left\">RemoveEdge(G,x,y)</td>\n<td align=\"left\">删除边</td>\n</tr>\n<tr>\n<td align=\"left\">FirstNeighbor(G,x)</td>\n<td align=\"left\">返回x的第一个邻接点</td>\n</tr>\n<tr>\n<td align=\"left\">NextNeighbor(G,x,y)</td>\n<td align=\"left\">返回x相对于y的下一个邻接点</td>\n</tr>\n<tr>\n<td align=\"left\">Get_edge_value(G,x,y)</td>\n<td align=\"left\">返回边(x,y)的权值</td>\n</tr>\n<tr>\n<td align=\"left\">Set_edge_value(G,x,y,v)</td>\n<td align=\"left\">设置边(x,y)的权值为v</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">有向图</th>\n<th align=\"left\">无向图</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/11.png\"><img src=\"/img/datastruct/6_graph/graph/11.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/12.png\"><img src=\"/img/datastruct/6_graph/graph/12.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/13.png\"><img src=\"/img/datastruct/6_graph/graph/13.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/14.png\"><img src=\"/img/datastruct/6_graph/graph/14.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png\"><img src=\"/img/datastruct/6_graph/graph/15.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png\"><img src=\"/img/datastruct/6_graph/graph/15.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/16.png\"><img src=\"/img/datastruct/6_graph/graph/16.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/17.png\"><img src=\"/img/datastruct/6_graph/graph/17.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png\"><img src=\"/img/datastruct/6_graph/graph/18.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png\"><img src=\"/img/datastruct/6_graph/graph/18.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png\"><img src=\"/img/datastruct/6_graph/graph/19.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png\"><img src=\"/img/datastruct/6_graph/graph/19.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png\"><img src=\"/img/datastruct/6_graph/graph/20.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png\"><img src=\"/img/datastruct/6_graph/graph/20.png\" alt=\"数据结构\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"6-1-4-1-图的遍历\"><a href=\"#6-1-4-1-图的遍历\" class=\"headerlink\" title=\"6.1-4.1 图的遍历\"></a>6.1-4.1 图的遍历</h3><ul>\n<li><p>广度优先遍历（BFS）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/21.png\"><br><img src=\"/img/datastruct/6_graph/graph/21.png\" alt=\"数据结构\"></p>\n<ul>\n<li>找到所有与v相邻的顶点：FirstNeighbor(G,v)，NextNeighbor(G,v,w)</li>\n<li>标记哪个顶点已经访问过：visited[]</li>\n<li>用队列保存已经访问过的顶点</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/22.png\"><br><img src=\"/img/datastruct/6_graph/graph/22.png\" alt=\"数据结构\"><br>    - 如果图是非连通的，需要对每个连通分量进行BFS<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/23.png\"><br><img src=\"/img/datastruct/6_graph/graph/23.png\" alt=\"数据结构\"><br>    - 广度优先生成树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/24.png\"><br><img src=\"/img/datastruct/6_graph/graph/24.png\" alt=\"数据结构\"><br>    - 广度优先生成森林</p>\n<ul>\n<li>深度优先遍历（DFS）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/25.png\"><br><img src=\"/img/datastruct/6_graph/graph/25.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/26.png\"><br><img src=\"/img/datastruct/6_graph/graph/26.png\" alt=\"数据结构\"><ul>\n<li>深度优先生成树</li>\n<li>深度优先生成森林</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/1.png\"><br><img src=\"/img/datastruct/6_graph/graph/1.png\" alt=\"数据结构\"></p>\n<h2 id=\"6-1-1-定义\"><a href=\"#6-1-1-定义\" class=\"headerlink\" title=\"6.1-1 定义\"></a>6.1-1 定义</h2><ul>\n<li>由顶点的有穷非空集合和顶点之间边的集合组成</li>\n<li>通常表示为：G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</li>\n<li>线性表可以空，树可以空，图不可以</li>\n</ul>\n<h2 id=\"6-1-2-一些概念\"><a href=\"#6-1-2-一些概念\" class=\"headerlink\" title=\"6.1-2 一些概念\"></a>6.1-2 一些概念</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/2.png\"><br><img src=\"/img/datastruct/6_graph/graph/2.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/3.png\"><br><img src=\"/img/datastruct/6_graph/graph/3.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/4.png\"><br><img src=\"/img/datastruct/6_graph/graph/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li><p>生成子图要包含所有顶点<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/5.png\"><br><img src=\"/img/datastruct/6_graph/graph/5.png\" alt=\"数据结构\"></p>\n</li>\n<li><p>强连通分量：有向图中</p>\n</li>\n<li><p>连通图的生成树：连通图的极小连通子图</p>\n</li>\n</ul>\n<h2 id=\"6-1-3-图的存储\"><a href=\"#6-1-3-图的存储\" class=\"headerlink\" title=\"6.1-3 图的存储\"></a>6.1-3 图的存储</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/6.png\"><br><img src=\"/img/datastruct/6_graph/graph/6.png\" alt=\"数据结构\"></p>\n<h3 id=\"6-1-3-1-邻接矩阵\"><a href=\"#6-1-3-1-邻接矩阵\" class=\"headerlink\" title=\"6.1-3.1 邻接矩阵\"></a>6.1-3.1 邻接矩阵</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/7.png\"><br><img src=\"/img/datastruct/6_graph/graph/7.png\" alt=\"数据结构\"></p>\n<ul>\n<li>出度：一行中非0元素的个数</li>\n<li>入度：一列中非0元素的个数</li>\n<li>空间复杂度：O(|v|<sup>2</sup>)</li>\n<li>无向图-&gt;对称-&gt;矩阵压缩</li>\n<li>设邻接矩阵A只含0、1，则A<sup>k</sup>中非零元素表示从i到j的长度为k的路径数</li>\n</ul>\n<h3 id=\"6-1-3-2-邻接表\"><a href=\"#6-1-3-2-邻接表\" class=\"headerlink\" title=\"6.1-3.2 邻接表\"></a>6.1-3.2 邻接表</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/8.png\"><br><img src=\"/img/datastruct/6_graph/graph/8.png\" alt=\"数据结构\"></p>\n<ul>\n<li>空间复杂度：O(|v|+|e|)</li>\n</ul>\n<h3 id=\"6-1-3-3-十字链表（有向图）\"><a href=\"#6-1-3-3-十字链表（有向图）\" class=\"headerlink\" title=\"6.1-3.3 十字链表（有向图）\"></a>6.1-3.3 十字链表（有向图）</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/9.png\"><br><img src=\"/img/datastruct/6_graph/graph/9.png\" alt=\"数据结构\"></p>\n<ul>\n<li>空间复杂度：O(|v|+|e|)</li>\n<li>如何找到指定顶点的所有出边：沿着绿色的箭头找</li>\n<li>如何找到指定顶点的所有入边：沿着橙色的箭头找</li>\n</ul>\n<h3 id=\"6-1-3-4-邻接多重表（无向图）\"><a href=\"#6-1-3-4-邻接多重表（无向图）\" class=\"headerlink\" title=\"6.1-3.4 邻接多重表（无向图）\"></a>6.1-3.4 邻接多重表（无向图）</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/10.png\"><br><img src=\"/img/datastruct/6_graph/graph/10.png\" alt=\"数据结构\"></p>\n<ul>\n<li>空间复杂度：O(|v|+|e|)</li>\n<li>删除边、顶点很方便</li>\n</ul>\n<h2 id=\"6-1-4-基本操作\"><a href=\"#6-1-4-基本操作\" class=\"headerlink\" title=\"6.1-4 基本操作\"></a>6.1-4 基本操作</h2><table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Adjacent(G,x,y)</td>\n<td align=\"left\">判断是否有从x到y的边，无向图只需判断一次</td>\n</tr>\n<tr>\n<td align=\"left\">Neighbors(G,x)</td>\n<td align=\"left\">返回与x邻接的顶点</td>\n</tr>\n<tr>\n<td align=\"left\">InsertVertex(G,x)</td>\n<td align=\"left\">插入顶点</td>\n</tr>\n<tr>\n<td align=\"left\">DeleteVertex(G,x)</td>\n<td align=\"left\">删除顶点</td>\n</tr>\n<tr>\n<td align=\"left\">AddEdge(G,x,y)</td>\n<td align=\"left\">插入边</td>\n</tr>\n<tr>\n<td align=\"left\">RemoveEdge(G,x,y)</td>\n<td align=\"left\">删除边</td>\n</tr>\n<tr>\n<td align=\"left\">FirstNeighbor(G,x)</td>\n<td align=\"left\">返回x的第一个邻接点</td>\n</tr>\n<tr>\n<td align=\"left\">NextNeighbor(G,x,y)</td>\n<td align=\"left\">返回x相对于y的下一个邻接点</td>\n</tr>\n<tr>\n<td align=\"left\">Get_edge_value(G,x,y)</td>\n<td align=\"left\">返回边(x,y)的权值</td>\n</tr>\n<tr>\n<td align=\"left\">Set_edge_value(G,x,y,v)</td>\n<td align=\"left\">设置边(x,y)的权值为v</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">有向图</th>\n<th align=\"left\">无向图</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/11.png\"><img src=\"/img/datastruct/6_graph/graph/11.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/12.png\"><img src=\"/img/datastruct/6_graph/graph/12.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/13.png\"><img src=\"/img/datastruct/6_graph/graph/13.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/14.png\"><img src=\"/img/datastruct/6_graph/graph/14.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png\"><img src=\"/img/datastruct/6_graph/graph/15.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/15.png\"><img src=\"/img/datastruct/6_graph/graph/15.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/16.png\"><img src=\"/img/datastruct/6_graph/graph/16.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/17.png\"><img src=\"/img/datastruct/6_graph/graph/17.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png\"><img src=\"/img/datastruct/6_graph/graph/18.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/18.png\"><img src=\"/img/datastruct/6_graph/graph/18.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png\"><img src=\"/img/datastruct/6_graph/graph/19.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/19.png\"><img src=\"/img/datastruct/6_graph/graph/19.png\" alt=\"数据结构\"></td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png\"><img src=\"/img/datastruct/6_graph/graph/20.png\" alt=\"数据结构\"></td>\n<td align=\"left\"><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/20.png\"><img src=\"/img/datastruct/6_graph/graph/20.png\" alt=\"数据结构\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"6-1-4-1-图的遍历\"><a href=\"#6-1-4-1-图的遍历\" class=\"headerlink\" title=\"6.1-4.1 图的遍历\"></a>6.1-4.1 图的遍历</h3><ul>\n<li><p>广度优先遍历（BFS）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/21.png\"><br><img src=\"/img/datastruct/6_graph/graph/21.png\" alt=\"数据结构\"></p>\n<ul>\n<li>找到所有与v相邻的顶点：FirstNeighbor(G,v)，NextNeighbor(G,v,w)</li>\n<li>标记哪个顶点已经访问过：visited[]</li>\n<li>用队列保存已经访问过的顶点</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/22.png\"><br><img src=\"/img/datastruct/6_graph/graph/22.png\" alt=\"数据结构\"><br>    - 如果图是非连通的，需要对每个连通分量进行BFS<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/23.png\"><br><img src=\"/img/datastruct/6_graph/graph/23.png\" alt=\"数据结构\"><br>    - 广度优先生成树<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/24.png\"><br><img src=\"/img/datastruct/6_graph/graph/24.png\" alt=\"数据结构\"><br>    - 广度优先生成森林</p>\n<ul>\n<li>深度优先遍历（DFS）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/25.png\"><br><img src=\"/img/datastruct/6_graph/graph/25.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/graph/26.png\"><br><img src=\"/img/datastruct/6_graph/graph/26.png\" alt=\"数据结构\"><ul>\n<li>深度优先生成树</li>\n<li>深度优先生成森林</li>\n</ul>\n</li>\n</ul>"},{"title":"5.3 树的存储结构","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/1.png)\n![数据结构](/img/datastruct/5_tree/treesave/1.png)\n<!--more-->\n\n### 5.3.1 双亲表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/2.png)\n![数据结构](/img/datastruct/5_tree/treesave/2.png)\n- 查双亲方便\n- 空数据导致遍历慢\n- 查孩子只能从头遍历\n\n### 5.3.2 孩子表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/3.png)\n![数据结构](/img/datastruct/5_tree/treesave/3.png)\n\n### 5.3.3 孩子兄弟表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/4.png)\n![数据结构](/img/datastruct/5_tree/treesave/4.png)\n\n## 5.3.4 树、森林的遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/5.png)\n![数据结构](/img/datastruct/5_tree/treesave/5.png)\n\n### 5.3.5 树的先根遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/6.png)\n![数据结构](/img/datastruct/5_tree/treesave/6.png)\n\n### 5.3.6 树的后根遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/7.png)\n![数据结构](/img/datastruct/5_tree/treesave/7.png)\n\n### 5.3.7 树的层次遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/8.png)\n![数据结构](/img/datastruct/5_tree/treesave/8.png)\n\n|树|森林|二叉树\n|:---|:---|:---|\n|先根遍历|先根遍历|先序遍历|\n|后根遍历|中序遍历|中序遍历|","source":"_posts/datastruct/5_tree/3_treesave.md","raw":"---\ntitle: 5.3 树的存储结构\ndate: 2023-08-07 00:00:00\ntags: [数据结构,树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/1.png)\n![数据结构](/img/datastruct/5_tree/treesave/1.png)\n<!--more-->\n\n### 5.3.1 双亲表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/2.png)\n![数据结构](/img/datastruct/5_tree/treesave/2.png)\n- 查双亲方便\n- 空数据导致遍历慢\n- 查孩子只能从头遍历\n\n### 5.3.2 孩子表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/3.png)\n![数据结构](/img/datastruct/5_tree/treesave/3.png)\n\n### 5.3.3 孩子兄弟表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/4.png)\n![数据结构](/img/datastruct/5_tree/treesave/4.png)\n\n## 5.3.4 树、森林的遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/5.png)\n![数据结构](/img/datastruct/5_tree/treesave/5.png)\n\n### 5.3.5 树的先根遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/6.png)\n![数据结构](/img/datastruct/5_tree/treesave/6.png)\n\n### 5.3.6 树的后根遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/7.png)\n![数据结构](/img/datastruct/5_tree/treesave/7.png)\n\n### 5.3.7 树的层次遍历\n![](../../../../themes/yilia/source/img/datastruct/5_tree/treesave/8.png)\n![数据结构](/img/datastruct/5_tree/treesave/8.png)\n\n|树|森林|二叉树\n|:---|:---|:---|\n|先根遍历|先根遍历|先序遍历|\n|后根遍历|中序遍历|中序遍历|","slug":"datastruct/5_tree/3_treesave","published":1,"updated":"2023-10-23T12:20:08.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr7001jwovwd5is6vqi","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/1.png\"><br><img src=\"/img/datastruct/5_tree/treesave/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"5-3-1-双亲表示法\"><a href=\"#5-3-1-双亲表示法\" class=\"headerlink\" title=\"5.3.1 双亲表示法\"></a>5.3.1 双亲表示法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/2.png\"><br><img src=\"/img/datastruct/5_tree/treesave/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li>查双亲方便</li>\n<li>空数据导致遍历慢</li>\n<li>查孩子只能从头遍历</li>\n</ul>\n<h3 id=\"5-3-2-孩子表示法\"><a href=\"#5-3-2-孩子表示法\" class=\"headerlink\" title=\"5.3.2 孩子表示法\"></a>5.3.2 孩子表示法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/3.png\"><br><img src=\"/img/datastruct/5_tree/treesave/3.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-3-孩子兄弟表示法\"><a href=\"#5-3-3-孩子兄弟表示法\" class=\"headerlink\" title=\"5.3.3 孩子兄弟表示法\"></a>5.3.3 孩子兄弟表示法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/4.png\"><br><img src=\"/img/datastruct/5_tree/treesave/4.png\" alt=\"数据结构\"></p>\n<h2 id=\"5-3-4-树、森林的遍历\"><a href=\"#5-3-4-树、森林的遍历\" class=\"headerlink\" title=\"5.3.4 树、森林的遍历\"></a>5.3.4 树、森林的遍历</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/5.png\"><br><img src=\"/img/datastruct/5_tree/treesave/5.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-5-树的先根遍历\"><a href=\"#5-3-5-树的先根遍历\" class=\"headerlink\" title=\"5.3.5 树的先根遍历\"></a>5.3.5 树的先根遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/6.png\"><br><img src=\"/img/datastruct/5_tree/treesave/6.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-6-树的后根遍历\"><a href=\"#5-3-6-树的后根遍历\" class=\"headerlink\" title=\"5.3.6 树的后根遍历\"></a>5.3.6 树的后根遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/7.png\"><br><img src=\"/img/datastruct/5_tree/treesave/7.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-7-树的层次遍历\"><a href=\"#5-3-7-树的层次遍历\" class=\"headerlink\" title=\"5.3.7 树的层次遍历\"></a>5.3.7 树的层次遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/8.png\"><br><img src=\"/img/datastruct/5_tree/treesave/8.png\" alt=\"数据结构\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">树</th>\n<th align=\"left\">森林</th>\n<th align=\"left\">二叉树</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">先根遍历</td>\n<td align=\"left\">先根遍历</td>\n<td align=\"left\">先序遍历</td>\n</tr>\n<tr>\n<td align=\"left\">后根遍历</td>\n<td align=\"left\">中序遍历</td>\n<td align=\"left\">中序遍历</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/1.png\"><br><img src=\"/img/datastruct/5_tree/treesave/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"5-3-1-双亲表示法\"><a href=\"#5-3-1-双亲表示法\" class=\"headerlink\" title=\"5.3.1 双亲表示法\"></a>5.3.1 双亲表示法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/2.png\"><br><img src=\"/img/datastruct/5_tree/treesave/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li>查双亲方便</li>\n<li>空数据导致遍历慢</li>\n<li>查孩子只能从头遍历</li>\n</ul>\n<h3 id=\"5-3-2-孩子表示法\"><a href=\"#5-3-2-孩子表示法\" class=\"headerlink\" title=\"5.3.2 孩子表示法\"></a>5.3.2 孩子表示法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/3.png\"><br><img src=\"/img/datastruct/5_tree/treesave/3.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-3-孩子兄弟表示法\"><a href=\"#5-3-3-孩子兄弟表示法\" class=\"headerlink\" title=\"5.3.3 孩子兄弟表示法\"></a>5.3.3 孩子兄弟表示法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/4.png\"><br><img src=\"/img/datastruct/5_tree/treesave/4.png\" alt=\"数据结构\"></p>\n<h2 id=\"5-3-4-树、森林的遍历\"><a href=\"#5-3-4-树、森林的遍历\" class=\"headerlink\" title=\"5.3.4 树、森林的遍历\"></a>5.3.4 树、森林的遍历</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/5.png\"><br><img src=\"/img/datastruct/5_tree/treesave/5.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-5-树的先根遍历\"><a href=\"#5-3-5-树的先根遍历\" class=\"headerlink\" title=\"5.3.5 树的先根遍历\"></a>5.3.5 树的先根遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/6.png\"><br><img src=\"/img/datastruct/5_tree/treesave/6.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-6-树的后根遍历\"><a href=\"#5-3-6-树的后根遍历\" class=\"headerlink\" title=\"5.3.6 树的后根遍历\"></a>5.3.6 树的后根遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/7.png\"><br><img src=\"/img/datastruct/5_tree/treesave/7.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-3-7-树的层次遍历\"><a href=\"#5-3-7-树的层次遍历\" class=\"headerlink\" title=\"5.3.7 树的层次遍历\"></a>5.3.7 树的层次遍历</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/treesave/8.png\"><br><img src=\"/img/datastruct/5_tree/treesave/8.png\" alt=\"数据结构\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">树</th>\n<th align=\"left\">森林</th>\n<th align=\"left\">二叉树</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">先根遍历</td>\n<td align=\"left\">先根遍历</td>\n<td align=\"left\">先序遍历</td>\n</tr>\n<tr>\n<td align=\"left\">后根遍历</td>\n<td align=\"left\">中序遍历</td>\n<td align=\"left\">中序遍历</td>\n</tr>\n</tbody></table>"},{"title":"5.4 哈夫曼树","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/1.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/1.png)\n<!--more-->\n\n### 5.4.1 带权路径长度\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/2.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/2.png)\n\n### 5.4.2 定义\n- n个带权叶子结点构成的带权路径最小的二叉树，也称为最优二叉树\n\n### 5.4.3 构造算法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/3.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/3.png)\n\n### 5.4.4 哈夫曼编码\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/4.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/4.png)\n\n- 前缀码","source":"_posts/datastruct/5_tree/4_Hafmantree.md","raw":"---\ntitle: 5.4 哈夫曼树\ndate: 2023-08-07 00:00:00\ntags: [数据结构,树,哈夫曼树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/1.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/1.png)\n<!--more-->\n\n### 5.4.1 带权路径长度\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/2.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/2.png)\n\n### 5.4.2 定义\n- n个带权叶子结点构成的带权路径最小的二叉树，也称为最优二叉树\n\n### 5.4.3 构造算法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/3.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/3.png)\n\n### 5.4.4 哈夫曼编码\n![](../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/4.png)\n![数据结构](/img/datastruct/5_tree/hafmantree/4.png)\n\n- 前缀码","slug":"datastruct/5_tree/4_Hafmantree","published":1,"updated":"2023-10-23T12:21:19.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr8001owovw6ai2b1cs","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/1.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"5-4-1-带权路径长度\"><a href=\"#5-4-1-带权路径长度\" class=\"headerlink\" title=\"5.4.1 带权路径长度\"></a>5.4.1 带权路径长度</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/2.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/2.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-4-2-定义\"><a href=\"#5-4-2-定义\" class=\"headerlink\" title=\"5.4.2 定义\"></a>5.4.2 定义</h3><ul>\n<li>n个带权叶子结点构成的带权路径最小的二叉树，也称为最优二叉树</li>\n</ul>\n<h3 id=\"5-4-3-构造算法\"><a href=\"#5-4-3-构造算法\" class=\"headerlink\" title=\"5.4.3 构造算法\"></a>5.4.3 构造算法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/3.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/3.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-4-4-哈夫曼编码\"><a href=\"#5-4-4-哈夫曼编码\" class=\"headerlink\" title=\"5.4.4 哈夫曼编码\"></a>5.4.4 哈夫曼编码</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/4.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>前缀码</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/1.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"5-4-1-带权路径长度\"><a href=\"#5-4-1-带权路径长度\" class=\"headerlink\" title=\"5.4.1 带权路径长度\"></a>5.4.1 带权路径长度</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/2.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/2.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-4-2-定义\"><a href=\"#5-4-2-定义\" class=\"headerlink\" title=\"5.4.2 定义\"></a>5.4.2 定义</h3><ul>\n<li>n个带权叶子结点构成的带权路径最小的二叉树，也称为最优二叉树</li>\n</ul>\n<h3 id=\"5-4-3-构造算法\"><a href=\"#5-4-3-构造算法\" class=\"headerlink\" title=\"5.4.3 构造算法\"></a>5.4.3 构造算法</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/3.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/3.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-4-4-哈夫曼编码\"><a href=\"#5-4-4-哈夫曼编码\" class=\"headerlink\" title=\"5.4.4 哈夫曼编码\"></a>5.4.4 哈夫曼编码</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/hafmantree/4.png\"><br><img src=\"/img/datastruct/5_tree/hafmantree/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>前缀码</li>\n</ul>"},{"title":"5.5 并查集","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/set/1.png)\n![数据结构](/img/datastruct/5_tree/set/1.png)\n### 5.5.1 存储结构\n\n- 双亲表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/set/2.png)\n![数据结构](/img/datastruct/5_tree/set/2.png)\n\n\n### 5.5.2 操作\n![](../../../../themes/yilia/source/img/datastruct/5_tree/set/3.png)\n![数据结构](/img/datastruct/5_tree/set/3.png)\n- 时间复杂度\n\n|操作|最坏时间复杂度|\n|:---|:---|\n|Find(x)|O(n)|\n|Union(x,y)|O(1)|\n- 优化union操作\n    ![](../../../../themes/yilia/source/img/datastruct/5_tree/set/4.png)\n    ![数据结构](/img/datastruct/5_tree/set/4.png)\n\n    - 树高不超过$$\\lfloor log_2n \\rfloor+1$$\n    - find时间复杂度为$$O( log_2n)$$\n- 优化find操作\n\n    ![](../../../../themes/yilia/source/img/datastruct/5_tree/set/5.png)\n    ![数据结构](/img/datastruct/5_tree/set/5.png)\n\n    - 每次查找时，将路径上的结点都放到根下面\n\n\n​        ","source":"_posts/datastruct/5_tree/5_set.md","raw":"---\ntitle: 5.5 并查集\ndate: 2023-08-07 00:00:00\ntags: [数据结构,并查集]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/5_tree/set/1.png)\n![数据结构](/img/datastruct/5_tree/set/1.png)\n### 5.5.1 存储结构\n\n- 双亲表示法\n![](../../../../themes/yilia/source/img/datastruct/5_tree/set/2.png)\n![数据结构](/img/datastruct/5_tree/set/2.png)\n\n\n### 5.5.2 操作\n![](../../../../themes/yilia/source/img/datastruct/5_tree/set/3.png)\n![数据结构](/img/datastruct/5_tree/set/3.png)\n- 时间复杂度\n\n|操作|最坏时间复杂度|\n|:---|:---|\n|Find(x)|O(n)|\n|Union(x,y)|O(1)|\n- 优化union操作\n    ![](../../../../themes/yilia/source/img/datastruct/5_tree/set/4.png)\n    ![数据结构](/img/datastruct/5_tree/set/4.png)\n\n    - 树高不超过$$\\lfloor log_2n \\rfloor+1$$\n    - find时间复杂度为$$O( log_2n)$$\n- 优化find操作\n\n    ![](../../../../themes/yilia/source/img/datastruct/5_tree/set/5.png)\n    ![数据结构](/img/datastruct/5_tree/set/5.png)\n\n    - 每次查找时，将路径上的结点都放到根下面\n\n\n​        ","slug":"datastruct/5_tree/5_set","published":1,"updated":"2023-10-23T12:23:20.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr9001qwovw3m5a1rka","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/1.png\"><br><img src=\"/img/datastruct/5_tree/set/1.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-5-1-存储结构\"><a href=\"#5-5-1-存储结构\" class=\"headerlink\" title=\"5.5.1 存储结构\"></a>5.5.1 存储结构</h3><ul>\n<li>双亲表示法<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/2.png\"><br><img src=\"/img/datastruct/5_tree/set/2.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"5-5-2-操作\"><a href=\"#5-5-2-操作\" class=\"headerlink\" title=\"5.5.2 操作\"></a>5.5.2 操作</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/3.png\"><br><img src=\"/img/datastruct/5_tree/set/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>时间复杂度</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">最坏时间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Find(x)</td>\n<td align=\"left\">O(n)</td>\n</tr>\n<tr>\n<td align=\"left\">Union(x,y)</td>\n<td align=\"left\">O(1)</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>优化union操作<br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/4.png\"><br>  <img src=\"/img/datastruct/5_tree/set/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>树高不超过$$\\lfloor log_2n \\rfloor+1$$</li>\n<li>find时间复杂度为$$O( log_2n)$$</li>\n</ul>\n</li>\n<li><p>优化find操作</p>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/5.png\"><br>  <img src=\"/img/datastruct/5_tree/set/5.png\" alt=\"数据结构\"></p>\n<ul>\n<li>每次查找时，将路径上的结点都放到根下面</li>\n</ul>\n</li>\n</ul>\n<p>​        </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/1.png\"><br><img src=\"/img/datastruct/5_tree/set/1.png\" alt=\"数据结构\"></p>\n<h3 id=\"5-5-1-存储结构\"><a href=\"#5-5-1-存储结构\" class=\"headerlink\" title=\"5.5.1 存储结构\"></a>5.5.1 存储结构</h3><ul>\n<li>双亲表示法<br><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/2.png\"><br><img src=\"/img/datastruct/5_tree/set/2.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"5-5-2-操作\"><a href=\"#5-5-2-操作\" class=\"headerlink\" title=\"5.5.2 操作\"></a>5.5.2 操作</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/3.png\"><br><img src=\"/img/datastruct/5_tree/set/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>时间复杂度</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">最坏时间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Find(x)</td>\n<td align=\"left\">O(n)</td>\n</tr>\n<tr>\n<td align=\"left\">Union(x,y)</td>\n<td align=\"left\">O(1)</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>优化union操作<br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/4.png\"><br>  <img src=\"/img/datastruct/5_tree/set/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>树高不超过$$\\lfloor log_2n \\rfloor+1$$</li>\n<li>find时间复杂度为$$O( log_2n)$$</li>\n</ul>\n</li>\n<li><p>优化find操作</p>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/5_tree/set/5.png\"><br>  <img src=\"/img/datastruct/5_tree/set/5.png\" alt=\"数据结构\"></p>\n<ul>\n<li>每次查找时，将路径上的结点都放到根下面</li>\n</ul>\n</li>\n</ul>\n<p>​        </p>"},{"title":"6.2 最小生成树","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/1.png)\n![数据结构](/img/datastruct/6_graph/generatetree/1.png)\n\n\n### 6.2-1 定义\n- T是连通网的生成树，T中所有边的代价之和称为生成树的代价，代价最小的生成树称为最小生成树\n- 最小生成树不唯一\n- 生成树的边数=顶点数-1\n- 只有连通网才有最小生成树\n\n### 6.2-2 Prim算法\n- 从某个顶点出发，选择代价最小的边，然后再选择与之相连的代价最小的边，直到所有顶点都被选中（看顶点）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/2.png)\n![数据结构](/img/datastruct/6_graph/generatetree/2.png)\n    - 过程\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/4.png)\n![数据结构](/img/datastruct/6_graph/generatetree/4.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/5.png)\n![数据结构](/img/datastruct/6_graph/generatetree/5.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/6.png)\n![数据结构](/img/datastruct/6_graph/generatetree/6.png)\n\n### 6.2-3 Kruskal算法\n- 从代价最小的边开始，依次选择代价更小的边，直到所有顶点都被选中（看边）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/3.png)\n![数据结构](/img/datastruct/6_graph/generatetree/3.png)\n    - 过程\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/10.png)\n![数据结构](/img/datastruct/6_graph/generatetree/10.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/7.png)\n![数据结构](/img/datastruct/6_graph/generatetree/7.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/8.png)\n![数据结构](/img/datastruct/6_graph/generatetree/8.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/9.png)\n![数据结构](/img/datastruct/6_graph/generatetree/9.png)\n","source":"_posts/datastruct/6_graph/2_generatetree.md","raw":"---\ntitle: 6.2 最小生成树\ndate: 2023-08-07 00:00:00\ntags: [数据结构,图,最小生成树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/1.png)\n![数据结构](/img/datastruct/6_graph/generatetree/1.png)\n\n\n### 6.2-1 定义\n- T是连通网的生成树，T中所有边的代价之和称为生成树的代价，代价最小的生成树称为最小生成树\n- 最小生成树不唯一\n- 生成树的边数=顶点数-1\n- 只有连通网才有最小生成树\n\n### 6.2-2 Prim算法\n- 从某个顶点出发，选择代价最小的边，然后再选择与之相连的代价最小的边，直到所有顶点都被选中（看顶点）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/2.png)\n![数据结构](/img/datastruct/6_graph/generatetree/2.png)\n    - 过程\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/4.png)\n![数据结构](/img/datastruct/6_graph/generatetree/4.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/5.png)\n![数据结构](/img/datastruct/6_graph/generatetree/5.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/6.png)\n![数据结构](/img/datastruct/6_graph/generatetree/6.png)\n\n### 6.2-3 Kruskal算法\n- 从代价最小的边开始，依次选择代价更小的边，直到所有顶点都被选中（看边）\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/3.png)\n![数据结构](/img/datastruct/6_graph/generatetree/3.png)\n    - 过程\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/10.png)\n![数据结构](/img/datastruct/6_graph/generatetree/10.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/7.png)\n![数据结构](/img/datastruct/6_graph/generatetree/7.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/8.png)\n![数据结构](/img/datastruct/6_graph/generatetree/8.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/9.png)\n![数据结构](/img/datastruct/6_graph/generatetree/9.png)\n","slug":"datastruct/6_graph/2_generatetree","published":1,"updated":"2023-10-23T12:30:35.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclr9001uwovw6tay19y9","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/1.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/1.png\" alt=\"数据结构\"></p>\n<h3 id=\"6-2-1-定义\"><a href=\"#6-2-1-定义\" class=\"headerlink\" title=\"6.2-1 定义\"></a>6.2-1 定义</h3><ul>\n<li>T是连通网的生成树，T中所有边的代价之和称为生成树的代价，代价最小的生成树称为最小生成树</li>\n<li>最小生成树不唯一</li>\n<li>生成树的边数&#x3D;顶点数-1</li>\n<li>只有连通网才有最小生成树</li>\n</ul>\n<h3 id=\"6-2-2-Prim算法\"><a href=\"#6-2-2-Prim算法\" class=\"headerlink\" title=\"6.2-2 Prim算法\"></a>6.2-2 Prim算法</h3><ul>\n<li>从某个顶点出发，选择代价最小的边，然后再选择与之相连的代价最小的边，直到所有顶点都被选中（看顶点）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/2.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/2.png\" alt=\"数据结构\"><ul>\n<li>过程<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/4.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/4.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/5.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/6.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/6.png\" alt=\"数据结构\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-3-Kruskal算法\"><a href=\"#6-2-3-Kruskal算法\" class=\"headerlink\" title=\"6.2-3 Kruskal算法\"></a>6.2-3 Kruskal算法</h3><ul>\n<li>从代价最小的边开始，依次选择代价更小的边，直到所有顶点都被选中（看边）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/3.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/3.png\" alt=\"数据结构\"><ul>\n<li>过程<br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/10.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/10.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/7.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/7.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/8.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/8.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/9.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/9.png\" alt=\"数据结构\"></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/1.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/1.png\" alt=\"数据结构\"></p>\n<h3 id=\"6-2-1-定义\"><a href=\"#6-2-1-定义\" class=\"headerlink\" title=\"6.2-1 定义\"></a>6.2-1 定义</h3><ul>\n<li>T是连通网的生成树，T中所有边的代价之和称为生成树的代价，代价最小的生成树称为最小生成树</li>\n<li>最小生成树不唯一</li>\n<li>生成树的边数&#x3D;顶点数-1</li>\n<li>只有连通网才有最小生成树</li>\n</ul>\n<h3 id=\"6-2-2-Prim算法\"><a href=\"#6-2-2-Prim算法\" class=\"headerlink\" title=\"6.2-2 Prim算法\"></a>6.2-2 Prim算法</h3><ul>\n<li>从某个顶点出发，选择代价最小的边，然后再选择与之相连的代价最小的边，直到所有顶点都被选中（看顶点）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/2.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/2.png\" alt=\"数据结构\"><ul>\n<li>过程<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/4.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/4.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/5.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/6.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/6.png\" alt=\"数据结构\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-3-Kruskal算法\"><a href=\"#6-2-3-Kruskal算法\" class=\"headerlink\" title=\"6.2-3 Kruskal算法\"></a>6.2-3 Kruskal算法</h3><ul>\n<li>从代价最小的边开始，依次选择代价更小的边，直到所有顶点都被选中（看边）<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/3.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/3.png\" alt=\"数据结构\"><ul>\n<li>过程<br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/10.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/10.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/7.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/7.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/8.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/8.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/generatetree/9.png\"><br><img src=\"/img/datastruct/6_graph/generatetree/9.png\" alt=\"数据结构\"></li>\n</ul>\n</li>\n</ul>"},{"title":"6.4 有向无环图","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n### \n\n<!--more-->\n### 6.4-1 DAG描述表达式\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/1.png)\n![数据结构](/img/datastruct/6_graph/DAG/1.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/2.png)\n![数据结构](/img/datastruct/6_graph/DAG/2.png)\n### 6.4-2 拓扑排序\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/3.png)\n![数据结构](/img/datastruct/6_graph/DAG/3.png)\n- AOV网（Activity On Vertex Network）：顶点表示活动，弧表示活动之间的优先关系\n- 实现：\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/4.png)\n![数据结构](/img/datastruct/6_graph/DAG/4.png)\n- 时间复杂度：\n    - 邻接表：O(|V|+|E|)\n    - 邻接矩阵：O(|V|<sup>2</sup>)\n- 逆拓扑排序\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/5.png)\n![数据结构](/img/datastruct/6_graph/DAG/5.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/6.png)\n![数据结构](/img/datastruct/6_graph/DAG/6.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/7.png)\n![数据结构](/img/datastruct/6_graph/DAG/7.png)\n\n### 6.4-3 关键路径\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/8.png)\n![数据结构](/img/datastruct/6_graph/DAG/8.png)\n- AOE网（Activity On Edge Network）：弧表示活动，顶点表示事件\n    - 只有某顶点代表的时间发生后，该顶点出发的弧上的活动才能开始\n    - 只有在进入某顶点的所有弧上的活动都完成后，该顶点代表的事件才能发生\n- 关键路径：从源点到汇点的最长路径\n- 关键活动：关键路径上的活动\n- 事件V<sub>k</sub>的最早发生时间ve(k)：决定了所有从V<sub>k</sub>出发的活动的最早开始时间\n- 活动a<sub>i</sub>的最早开始时间e(i)：决定了该活动弧的起点所表示的事件的最早发生时间\n- 事件V<sub>k</sub>的最迟发生时间vl(k)：在不推迟整个工程完成时间的前提下，该事件必须发生的最迟时间\n- 活动a<sub>i</sub>的最迟开始时间l(i)：该活动弧的终点所表示的事件的最迟发生时间与该活动所需的时间之差\n- 求关键路径\n    - 1）正大\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/9.png)\n![数据结构](/img/datastruct/6_graph/DAG/9.png)\n    - 2）反小\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/10.png)\n![数据结构](/img/datastruct/6_graph/DAG/10.png)\n    - 3）=起点\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/11.png)\n![数据结构](/img/datastruct/6_graph/DAG/11.png)\n    - 4）=终点-\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/12.png)\n![数据结构](/img/datastruct/6_graph/DAG/12.png)\n    - 5）相减\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/13.png)\n![数据结构](/img/datastruct/6_graph/DAG/13.png)\n","source":"_posts/datastruct/6_graph/4_DAG.md","raw":"---\ntitle: 6.4 有向无环图\ndate: 2023-08-07 00:00:00\ntags: [数据结构,图]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n### \n\n<!--more-->\n### 6.4-1 DAG描述表达式\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/1.png)\n![数据结构](/img/datastruct/6_graph/DAG/1.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/2.png)\n![数据结构](/img/datastruct/6_graph/DAG/2.png)\n### 6.4-2 拓扑排序\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/3.png)\n![数据结构](/img/datastruct/6_graph/DAG/3.png)\n- AOV网（Activity On Vertex Network）：顶点表示活动，弧表示活动之间的优先关系\n- 实现：\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/4.png)\n![数据结构](/img/datastruct/6_graph/DAG/4.png)\n- 时间复杂度：\n    - 邻接表：O(|V|+|E|)\n    - 邻接矩阵：O(|V|<sup>2</sup>)\n- 逆拓扑排序\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/5.png)\n![数据结构](/img/datastruct/6_graph/DAG/5.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/6.png)\n![数据结构](/img/datastruct/6_graph/DAG/6.png)\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/7.png)\n![数据结构](/img/datastruct/6_graph/DAG/7.png)\n\n### 6.4-3 关键路径\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/8.png)\n![数据结构](/img/datastruct/6_graph/DAG/8.png)\n- AOE网（Activity On Edge Network）：弧表示活动，顶点表示事件\n    - 只有某顶点代表的时间发生后，该顶点出发的弧上的活动才能开始\n    - 只有在进入某顶点的所有弧上的活动都完成后，该顶点代表的事件才能发生\n- 关键路径：从源点到汇点的最长路径\n- 关键活动：关键路径上的活动\n- 事件V<sub>k</sub>的最早发生时间ve(k)：决定了所有从V<sub>k</sub>出发的活动的最早开始时间\n- 活动a<sub>i</sub>的最早开始时间e(i)：决定了该活动弧的起点所表示的事件的最早发生时间\n- 事件V<sub>k</sub>的最迟发生时间vl(k)：在不推迟整个工程完成时间的前提下，该事件必须发生的最迟时间\n- 活动a<sub>i</sub>的最迟开始时间l(i)：该活动弧的终点所表示的事件的最迟发生时间与该活动所需的时间之差\n- 求关键路径\n    - 1）正大\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/9.png)\n![数据结构](/img/datastruct/6_graph/DAG/9.png)\n    - 2）反小\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/10.png)\n![数据结构](/img/datastruct/6_graph/DAG/10.png)\n    - 3）=起点\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/11.png)\n![数据结构](/img/datastruct/6_graph/DAG/11.png)\n    - 4）=终点-\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/12.png)\n![数据结构](/img/datastruct/6_graph/DAG/12.png)\n    - 5）相减\n![](../../../../themes/yilia/source/img/datastruct/6_graph/DAG/13.png)\n![数据结构](/img/datastruct/6_graph/DAG/13.png)\n","slug":"datastruct/6_graph/4_DAG","published":1,"updated":"2023-10-23T12:34:36.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclra001xwovweoes2c3j","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><!--more-->\n<h3 id=\"6-4-1-DAG描述表达式\"><a href=\"#6-4-1-DAG描述表达式\" class=\"headerlink\" title=\"6.4-1 DAG描述表达式\"></a>6.4-1 DAG描述表达式</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/1.png\"><br><img src=\"/img/datastruct/6_graph/DAG/1.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/2.png\"><br><img src=\"/img/datastruct/6_graph/DAG/2.png\" alt=\"数据结构\"></p>\n<h3 id=\"6-4-2-拓扑排序\"><a href=\"#6-4-2-拓扑排序\" class=\"headerlink\" title=\"6.4-2 拓扑排序\"></a>6.4-2 拓扑排序</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/3.png\"><br><img src=\"/img/datastruct/6_graph/DAG/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>AOV网（Activity On Vertex Network）：顶点表示活动，弧表示活动之间的优先关系</li>\n<li>实现：<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/4.png\"><br><img src=\"/img/datastruct/6_graph/DAG/4.png\" alt=\"数据结构\"></li>\n<li>时间复杂度：<ul>\n<li>邻接表：O(|V|+|E|)</li>\n<li>邻接矩阵：O(|V|<sup>2</sup>)</li>\n</ul>\n</li>\n<li>逆拓扑排序<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/5.png\"><br><img src=\"/img/datastruct/6_graph/DAG/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/6.png\"><br><img src=\"/img/datastruct/6_graph/DAG/6.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/7.png\"><br><img src=\"/img/datastruct/6_graph/DAG/7.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"6-4-3-关键路径\"><a href=\"#6-4-3-关键路径\" class=\"headerlink\" title=\"6.4-3 关键路径\"></a>6.4-3 关键路径</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/8.png\"><br><img src=\"/img/datastruct/6_graph/DAG/8.png\" alt=\"数据结构\"></p>\n<ul>\n<li>AOE网（Activity On Edge Network）：弧表示活动，顶点表示事件<ul>\n<li>只有某顶点代表的时间发生后，该顶点出发的弧上的活动才能开始</li>\n<li>只有在进入某顶点的所有弧上的活动都完成后，该顶点代表的事件才能发生</li>\n</ul>\n</li>\n<li>关键路径：从源点到汇点的最长路径</li>\n<li>关键活动：关键路径上的活动</li>\n<li>事件V<sub>k</sub>的最早发生时间ve(k)：决定了所有从V<sub>k</sub>出发的活动的最早开始时间</li>\n<li>活动a<sub>i</sub>的最早开始时间e(i)：决定了该活动弧的起点所表示的事件的最早发生时间</li>\n<li>事件V<sub>k</sub>的最迟发生时间vl(k)：在不推迟整个工程完成时间的前提下，该事件必须发生的最迟时间</li>\n<li>活动a<sub>i</sub>的最迟开始时间l(i)：该活动弧的终点所表示的事件的最迟发生时间与该活动所需的时间之差</li>\n<li>求关键路径<ul>\n<li>1）正大<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/9.png\"><br><img src=\"/img/datastruct/6_graph/DAG/9.png\" alt=\"数据结构\"></li>\n<li>2）反小<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/10.png\"><br><img src=\"/img/datastruct/6_graph/DAG/10.png\" alt=\"数据结构\"></li>\n<li>3）&#x3D;起点<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/11.png\"><br><img src=\"/img/datastruct/6_graph/DAG/11.png\" alt=\"数据结构\"></li>\n<li>4）&#x3D;终点-<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/12.png\"><br><img src=\"/img/datastruct/6_graph/DAG/12.png\" alt=\"数据结构\"></li>\n<li>5）相减<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/13.png\"><br><img src=\"/img/datastruct/6_graph/DAG/13.png\" alt=\"数据结构\"></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><!--more-->\n<h3 id=\"6-4-1-DAG描述表达式\"><a href=\"#6-4-1-DAG描述表达式\" class=\"headerlink\" title=\"6.4-1 DAG描述表达式\"></a>6.4-1 DAG描述表达式</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/1.png\"><br><img src=\"/img/datastruct/6_graph/DAG/1.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/2.png\"><br><img src=\"/img/datastruct/6_graph/DAG/2.png\" alt=\"数据结构\"></p>\n<h3 id=\"6-4-2-拓扑排序\"><a href=\"#6-4-2-拓扑排序\" class=\"headerlink\" title=\"6.4-2 拓扑排序\"></a>6.4-2 拓扑排序</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/3.png\"><br><img src=\"/img/datastruct/6_graph/DAG/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>AOV网（Activity On Vertex Network）：顶点表示活动，弧表示活动之间的优先关系</li>\n<li>实现：<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/4.png\"><br><img src=\"/img/datastruct/6_graph/DAG/4.png\" alt=\"数据结构\"></li>\n<li>时间复杂度：<ul>\n<li>邻接表：O(|V|+|E|)</li>\n<li>邻接矩阵：O(|V|<sup>2</sup>)</li>\n</ul>\n</li>\n<li>逆拓扑排序<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/5.png\"><br><img src=\"/img/datastruct/6_graph/DAG/5.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/6.png\"><br><img src=\"/img/datastruct/6_graph/DAG/6.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/7.png\"><br><img src=\"/img/datastruct/6_graph/DAG/7.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"6-4-3-关键路径\"><a href=\"#6-4-3-关键路径\" class=\"headerlink\" title=\"6.4-3 关键路径\"></a>6.4-3 关键路径</h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/8.png\"><br><img src=\"/img/datastruct/6_graph/DAG/8.png\" alt=\"数据结构\"></p>\n<ul>\n<li>AOE网（Activity On Edge Network）：弧表示活动，顶点表示事件<ul>\n<li>只有某顶点代表的时间发生后，该顶点出发的弧上的活动才能开始</li>\n<li>只有在进入某顶点的所有弧上的活动都完成后，该顶点代表的事件才能发生</li>\n</ul>\n</li>\n<li>关键路径：从源点到汇点的最长路径</li>\n<li>关键活动：关键路径上的活动</li>\n<li>事件V<sub>k</sub>的最早发生时间ve(k)：决定了所有从V<sub>k</sub>出发的活动的最早开始时间</li>\n<li>活动a<sub>i</sub>的最早开始时间e(i)：决定了该活动弧的起点所表示的事件的最早发生时间</li>\n<li>事件V<sub>k</sub>的最迟发生时间vl(k)：在不推迟整个工程完成时间的前提下，该事件必须发生的最迟时间</li>\n<li>活动a<sub>i</sub>的最迟开始时间l(i)：该活动弧的终点所表示的事件的最迟发生时间与该活动所需的时间之差</li>\n<li>求关键路径<ul>\n<li>1）正大<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/9.png\"><br><img src=\"/img/datastruct/6_graph/DAG/9.png\" alt=\"数据结构\"></li>\n<li>2）反小<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/10.png\"><br><img src=\"/img/datastruct/6_graph/DAG/10.png\" alt=\"数据结构\"></li>\n<li>3）&#x3D;起点<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/11.png\"><br><img src=\"/img/datastruct/6_graph/DAG/11.png\" alt=\"数据结构\"></li>\n<li>4）&#x3D;终点-<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/12.png\"><br><img src=\"/img/datastruct/6_graph/DAG/12.png\" alt=\"数据结构\"></li>\n<li>5）相减<br><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/DAG/13.png\"><br><img src=\"/img/datastruct/6_graph/DAG/13.png\" alt=\"数据结构\"></li>\n</ul>\n</li>\n</ul>"},{"title":"6.3 最短路径","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n### \n\n![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/1.png)\n![数据结构](/img/datastruct/6_graph/shortestpath/1.png)\n<!--more-->\n### 6.3-1 单源最短路径\n- ##### 1） BFS算法(无权)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/2.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/2.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/3.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/3.png)\n\n- ##### 2）Dijkstra(带权)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/4.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/4.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/5.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/5.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/6.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/6.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/7.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/7.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/8.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/8.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/9.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/9.png)\n    - 时间复杂度：O(|V|<sup>2</sup>)\n    - 不可用于有负权边的图\n\n### 6.3-2 各顶点间最短路径\n- ##### 1）Floyd算法\n    - 动态规划思想：\n\n        - 1）允许在v0中转，求最短路径\n        - 2）允许在v0、v1中转，求最短路径\n        - 3）允许在v0、v1、v2中转，求最短路径\n        - ...\n    \n\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/10.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/10.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/11.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/11.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/12.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/12.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/13.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/13.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/14.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/14.png)\n    - 时间复杂度：O(|V|<sup>3</sup>)\n    - 不能解决负权回路的问题","source":"_posts/datastruct/6_graph/3_shortestpath.md","raw":"---\ntitle: 6.3 最短路径\ndate: 2023-08-07 00:00:00\ntags: [数据结构,图,最短路径]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n### \n\n![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/1.png)\n![数据结构](/img/datastruct/6_graph/shortestpath/1.png)\n<!--more-->\n### 6.3-1 单源最短路径\n- ##### 1） BFS算法(无权)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/2.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/2.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/3.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/3.png)\n\n- ##### 2）Dijkstra(带权)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/4.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/4.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/5.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/5.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/6.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/6.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/7.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/7.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/8.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/8.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/9.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/9.png)\n    - 时间复杂度：O(|V|<sup>2</sup>)\n    - 不可用于有负权边的图\n\n### 6.3-2 各顶点间最短路径\n- ##### 1）Floyd算法\n    - 动态规划思想：\n\n        - 1）允许在v0中转，求最短路径\n        - 2）允许在v0、v1中转，求最短路径\n        - 3）允许在v0、v1、v2中转，求最短路径\n        - ...\n    \n\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/10.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/10.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/11.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/11.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/12.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/12.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/13.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/13.png)\n    ![](../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/14.png)\n    ![数据结构](/img/datastruct/6_graph/shortestpath/14.png)\n    - 时间复杂度：O(|V|<sup>3</sup>)\n    - 不能解决负权回路的问题","slug":"datastruct/6_graph/3_shortestpath","published":1,"updated":"2023-10-23T12:30:27.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrb0022wovw0cfd95oy","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/1.png\"><br><img src=\"/img/datastruct/6_graph/shortestpath/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<h3 id=\"6-3-1-单源最短路径\"><a href=\"#6-3-1-单源最短路径\" class=\"headerlink\" title=\"6.3-1 单源最短路径\"></a>6.3-1 单源最短路径</h3><ul>\n<li><h5 id=\"1）-BFS算法-无权\"><a href=\"#1）-BFS算法-无权\" class=\"headerlink\" title=\"1） BFS算法(无权)\"></a>1） BFS算法(无权)</h5><p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/2.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/2.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/3.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/3.png\" alt=\"数据结构\"></p>\n</li>\n<li><h5 id=\"2）Dijkstra-带权\"><a href=\"#2）Dijkstra-带权\" class=\"headerlink\" title=\"2）Dijkstra(带权)\"></a>2）Dijkstra(带权)</h5><p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/4.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/4.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/5.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/5.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/6.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/6.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/7.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/7.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/8.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/8.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/9.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/9.png\" alt=\"数据结构\"></p>\n<ul>\n<li>时间复杂度：O(|V|<sup>2</sup>)</li>\n<li>不可用于有负权边的图</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-3-2-各顶点间最短路径\"><a href=\"#6-3-2-各顶点间最短路径\" class=\"headerlink\" title=\"6.3-2 各顶点间最短路径\"></a>6.3-2 各顶点间最短路径</h3><ul>\n<li><h5 id=\"1）Floyd算法\"><a href=\"#1）Floyd算法\" class=\"headerlink\" title=\"1）Floyd算法\"></a>1）Floyd算法</h5><ul>\n<li><p>动态规划思想：</p>\n<ul>\n<li>1）允许在v0中转，求最短路径</li>\n<li>2）允许在v0、v1中转，求最短路径</li>\n<li>3）允许在v0、v1、v2中转，求最短路径</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/10.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/10.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/11.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/11.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/12.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/12.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/13.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/13.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/14.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/14.png\" alt=\"数据结构\"></p>\n<ul>\n<li>时间复杂度：O(|V|<sup>3</sup>)</li>\n<li>不能解决负权回路的问题</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/1.png\"><br><img src=\"/img/datastruct/6_graph/shortestpath/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<h3 id=\"6-3-1-单源最短路径\"><a href=\"#6-3-1-单源最短路径\" class=\"headerlink\" title=\"6.3-1 单源最短路径\"></a>6.3-1 单源最短路径</h3><ul>\n<li><h5 id=\"1）-BFS算法-无权\"><a href=\"#1）-BFS算法-无权\" class=\"headerlink\" title=\"1） BFS算法(无权)\"></a>1） BFS算法(无权)</h5><p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/2.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/2.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/3.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/3.png\" alt=\"数据结构\"></p>\n</li>\n<li><h5 id=\"2）Dijkstra-带权\"><a href=\"#2）Dijkstra-带权\" class=\"headerlink\" title=\"2）Dijkstra(带权)\"></a>2）Dijkstra(带权)</h5><p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/4.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/4.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/5.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/5.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/6.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/6.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/7.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/7.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/8.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/8.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/9.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/9.png\" alt=\"数据结构\"></p>\n<ul>\n<li>时间复杂度：O(|V|<sup>2</sup>)</li>\n<li>不可用于有负权边的图</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-3-2-各顶点间最短路径\"><a href=\"#6-3-2-各顶点间最短路径\" class=\"headerlink\" title=\"6.3-2 各顶点间最短路径\"></a>6.3-2 各顶点间最短路径</h3><ul>\n<li><h5 id=\"1）Floyd算法\"><a href=\"#1）Floyd算法\" class=\"headerlink\" title=\"1）Floyd算法\"></a>1）Floyd算法</h5><ul>\n<li><p>动态规划思想：</p>\n<ul>\n<li>1）允许在v0中转，求最短路径</li>\n<li>2）允许在v0、v1中转，求最短路径</li>\n<li>3）允许在v0、v1、v2中转，求最短路径</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/10.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/10.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/11.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/11.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/12.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/12.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/13.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/13.png\" alt=\"数据结构\"><br>  <img src=\"/../../../../themes/yilia/source/img/datastruct/6_graph/shortestpath/14.png\"><br>  <img src=\"/img/datastruct/6_graph/shortestpath/14.png\" alt=\"数据结构\"></p>\n<ul>\n<li>时间复杂度：O(|V|<sup>3</sup>)</li>\n<li>不能解决负权回路的问题</li>\n</ul>\n</li>\n</ul>"},{"title":"7.2 二叉排序树","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n### \n\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/1.png)\n![数据结构](/img/datastruct/7_search/BST/1.png)\n<!--more-->\n- 左<根<右\n- 中序遍历：升序排列\n- 操作\n    - 查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/2.png)\n![数据结构](/img/datastruct/7_search/BST/2.png)\n    - 插入\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/3.png)\n![数据结构](/img/datastruct/7_search/BST/3.png)\n    - 构造\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/4.png)\n![数据结构](/img/datastruct/7_search/BST/4.png)\n    - 删除z\n        - z是叶子\n\n            删\n        - z只有一颗左子树/右子树\n\n            删，子树代替\n        - z有两棵子树\n\n            用前驱（左子树最右下）/后继（右子树最左下）代替，删除前驱/后继\n- 查找效率分析\n\n    - 最好：O(log<sub>2</sub>n)\n    - 最坏：O(n)\n","source":"_posts/datastruct/7_search/2_BST.md","raw":"---\ntitle: 7.2 二叉排序树\ndate: 2023-08-07 00:00:00\ntags: [数据结构,查找,二叉排序树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n### \n\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/1.png)\n![数据结构](/img/datastruct/7_search/BST/1.png)\n<!--more-->\n- 左<根<右\n- 中序遍历：升序排列\n- 操作\n    - 查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/2.png)\n![数据结构](/img/datastruct/7_search/BST/2.png)\n    - 插入\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/3.png)\n![数据结构](/img/datastruct/7_search/BST/3.png)\n    - 构造\n![](../../../../themes/yilia/source/img/datastruct/7_search/BST/4.png)\n![数据结构](/img/datastruct/7_search/BST/4.png)\n    - 删除z\n        - z是叶子\n\n            删\n        - z只有一颗左子树/右子树\n\n            删，子树代替\n        - z有两棵子树\n\n            用前驱（左子树最右下）/后继（右子树最左下）代替，删除前驱/后继\n- 查找效率分析\n\n    - 最好：O(log<sub>2</sub>n)\n    - 最坏：O(n)\n","slug":"datastruct/7_search/2_BST","published":1,"updated":"2023-10-23T12:53:49.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrc0025wovw88jr4uwy","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/1.png\"><br><img src=\"/img/datastruct/7_search/BST/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<ul>\n<li><p>左&lt;根&lt;右</p>\n</li>\n<li><p>中序遍历：升序排列</p>\n</li>\n<li><p>操作</p>\n<ul>\n<li>查找<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/2.png\"><br><img src=\"/img/datastruct/7_search/BST/2.png\" alt=\"数据结构\"></li>\n<li>插入<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/3.png\"><br><img src=\"/img/datastruct/7_search/BST/3.png\" alt=\"数据结构\"></li>\n<li>构造<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/4.png\"><br><img src=\"/img/datastruct/7_search/BST/4.png\" alt=\"数据结构\"></li>\n<li>删除z<ul>\n<li><p>z是叶子</p>\n<p>  删</p>\n</li>\n<li><p>z只有一颗左子树&#x2F;右子树</p>\n<p>  删，子树代替</p>\n</li>\n<li><p>z有两棵子树</p>\n<p>  用前驱（左子树最右下）&#x2F;后继（右子树最左下）代替，删除前驱&#x2F;后继</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查找效率分析</p>\n<ul>\n<li>最好：O(log<sub>2</sub>n)</li>\n<li>最坏：O(n)</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/1.png\"><br><img src=\"/img/datastruct/7_search/BST/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<ul>\n<li><p>左&lt;根&lt;右</p>\n</li>\n<li><p>中序遍历：升序排列</p>\n</li>\n<li><p>操作</p>\n<ul>\n<li>查找<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/2.png\"><br><img src=\"/img/datastruct/7_search/BST/2.png\" alt=\"数据结构\"></li>\n<li>插入<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/3.png\"><br><img src=\"/img/datastruct/7_search/BST/3.png\" alt=\"数据结构\"></li>\n<li>构造<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/BST/4.png\"><br><img src=\"/img/datastruct/7_search/BST/4.png\" alt=\"数据结构\"></li>\n<li>删除z<ul>\n<li><p>z是叶子</p>\n<p>  删</p>\n</li>\n<li><p>z只有一颗左子树&#x2F;右子树</p>\n<p>  删，子树代替</p>\n</li>\n<li><p>z有两棵子树</p>\n<p>  用前驱（左子树最右下）&#x2F;后继（右子树最左下）代替，删除前驱&#x2F;后继</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查找效率分析</p>\n<ul>\n<li>最好：O(log<sub>2</sub>n)</li>\n<li>最坏：O(n)</li>\n</ul>\n</li>\n</ul>"},{"title":"7.3 平衡二叉树","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/1.png)\n![数据结构](/img/datastruct/7_search/AVL/1.png)\n<!--more-->\n\n### 7.3-1 定义\n- 左右子树高度差不超过1的二叉排序树，简称AVL树\n\n### 7.3-2 操作\n- 插入\n    - 1） 插入二叉排序树\n    - 2）调整最小不平衡子树A\n\n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/6.png)\n        ![数据结构](/img/datastruct/7_search/AVL/6.png)\n\n        - LL型：在A的左孩子的左子树插入\n\n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/2.png)\n        ![数据结构](/img/datastruct/7_search/AVL/2.png)\n\n        - RR型：在A的右孩子的右子树插入\n\n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/3.png)\n        ![数据结构](/img/datastruct/7_search/AVL/3.png)\n\n        - LR型：在A的左孩子的右子树插入\n        \n    \n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/4.png)\n        ![数据结构](/img/datastruct/7_search/AVL/4.png)\n\n        - RL型：在A的右孩子的左子树插入\n        \n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/5.png)\n        ![数据结构](/img/datastruct/7_search/AVL/5.png)\n\n- 删除\n![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/7.png)\n![数据结构](/img/datastruct/7_search/AVL/7.png)","source":"_posts/datastruct/7_search/3_AVL.md","raw":"---\ntitle: 7.3 平衡二叉树\ntags: [数据结构,查找,平衡二叉树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/1.png)\n![数据结构](/img/datastruct/7_search/AVL/1.png)\n<!--more-->\n\n### 7.3-1 定义\n- 左右子树高度差不超过1的二叉排序树，简称AVL树\n\n### 7.3-2 操作\n- 插入\n    - 1） 插入二叉排序树\n    - 2）调整最小不平衡子树A\n\n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/6.png)\n        ![数据结构](/img/datastruct/7_search/AVL/6.png)\n\n        - LL型：在A的左孩子的左子树插入\n\n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/2.png)\n        ![数据结构](/img/datastruct/7_search/AVL/2.png)\n\n        - RR型：在A的右孩子的右子树插入\n\n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/3.png)\n        ![数据结构](/img/datastruct/7_search/AVL/3.png)\n\n        - LR型：在A的左孩子的右子树插入\n        \n    \n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/4.png)\n        ![数据结构](/img/datastruct/7_search/AVL/4.png)\n\n        - RL型：在A的右孩子的左子树插入\n        \n        ![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/5.png)\n        ![数据结构](/img/datastruct/7_search/AVL/5.png)\n\n- 删除\n![](../../../../themes/yilia/source/img/datastruct/7_search/AVL/7.png)\n![数据结构](/img/datastruct/7_search/AVL/7.png)","slug":"datastruct/7_search/3_AVL","published":1,"date":"2023-08-26T07:15:22.626Z","updated":"2023-10-23T13:02:02.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrc0029wovwgsm4g76i","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/1.png\"><br><img src=\"/img/datastruct/7_search/AVL/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"7-3-1-定义\"><a href=\"#7-3-1-定义\" class=\"headerlink\" title=\"7.3-1 定义\"></a>7.3-1 定义</h3><ul>\n<li>左右子树高度差不超过1的二叉排序树，简称AVL树</li>\n</ul>\n<h3 id=\"7-3-2-操作\"><a href=\"#7-3-2-操作\" class=\"headerlink\" title=\"7.3-2 操作\"></a>7.3-2 操作</h3><ul>\n<li><p>插入</p>\n<ul>\n<li><p>1） 插入二叉排序树</p>\n</li>\n<li><p>2）调整最小不平衡子树A</p>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/6.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li>LL型：在A的左孩子的左子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/2.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li>RR型：在A的右孩子的右子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/3.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>LR型：在A的左孩子的右子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/4.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>RL型：在A的右孩子的左子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/5.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/5.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n</li>\n<li><p>删除<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/7.png\"><br><img src=\"/img/datastruct/7_search/AVL/7.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/1.png\"><br><img src=\"/img/datastruct/7_search/AVL/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"7-3-1-定义\"><a href=\"#7-3-1-定义\" class=\"headerlink\" title=\"7.3-1 定义\"></a>7.3-1 定义</h3><ul>\n<li>左右子树高度差不超过1的二叉排序树，简称AVL树</li>\n</ul>\n<h3 id=\"7-3-2-操作\"><a href=\"#7-3-2-操作\" class=\"headerlink\" title=\"7.3-2 操作\"></a>7.3-2 操作</h3><ul>\n<li><p>插入</p>\n<ul>\n<li><p>1） 插入二叉排序树</p>\n</li>\n<li><p>2）调整最小不平衡子树A</p>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/6.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/6.png\" alt=\"数据结构\"></p>\n<ul>\n<li>LL型：在A的左孩子的左子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/2.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/2.png\" alt=\"数据结构\"></p>\n<ul>\n<li>RR型：在A的右孩子的右子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/3.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/3.png\" alt=\"数据结构\"></p>\n<ul>\n<li>LR型：在A的左孩子的右子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/4.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/4.png\" alt=\"数据结构\"></p>\n<ul>\n<li>RL型：在A的右孩子的左子树插入</li>\n</ul>\n<p>  <img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/5.png\"><br>  <img src=\"/img/datastruct/7_search/AVL/5.png\" alt=\"数据结构\"></p>\n</li>\n</ul>\n</li>\n<li><p>删除<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/AVL/7.png\"><br><img src=\"/img/datastruct/7_search/AVL/7.png\" alt=\"数据结构\"></p>\n</li>\n</ul>"},{"title":"7.1 顺序查找","date":"2023-08-06T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n### \n\n## 7.1-1 概念\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/1.png)\n![数据结构](/img/datastruct/7_search/search/1.png)\n<!--more-->\n- 平均查找长度：$$ASL=\\sum_{i=1}^n p_i c_i$$\n\n## 7.1-2 顺序查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/2.png)\n![数据结构](/img/datastruct/7_search/search/2.png)\n\n## 7.1-3 折半查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/3.png)\n![数据结构](/img/datastruct/7_search/search/3.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/4.png)\n![数据结构](/img/datastruct/7_search/search/4.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/5.png)\n![数据结构](/img/datastruct/7_search/search/5.png)\n\n## 7.1-4 分块查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/6.png)\n![数据结构](/img/datastruct/7_search/search/6.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/7.png)\n![数据结构](/img/datastruct/7_search/search/7.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/8.png)\n![数据结构](/img/datastruct/7_search/search/8.png)","source":"_posts/datastruct/7_search/1_search.md","raw":"---\ntitle: 7.1 顺序查找\ndate: 2023-08-07 00:00:00\ntags: [数据结构,查找]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n### \n\n## 7.1-1 概念\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/1.png)\n![数据结构](/img/datastruct/7_search/search/1.png)\n<!--more-->\n- 平均查找长度：$$ASL=\\sum_{i=1}^n p_i c_i$$\n\n## 7.1-2 顺序查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/2.png)\n![数据结构](/img/datastruct/7_search/search/2.png)\n\n## 7.1-3 折半查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/3.png)\n![数据结构](/img/datastruct/7_search/search/3.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/4.png)\n![数据结构](/img/datastruct/7_search/search/4.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/5.png)\n![数据结构](/img/datastruct/7_search/search/5.png)\n\n## 7.1-4 分块查找\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/6.png)\n![数据结构](/img/datastruct/7_search/search/6.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/7.png)\n![数据结构](/img/datastruct/7_search/search/7.png)\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/search/8.png)\n![数据结构](/img/datastruct/7_search/search/8.png)","slug":"datastruct/7_search/1_search","published":1,"updated":"2023-10-23T12:50:18.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrd002cwovw1mtqenya","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"7-1-1-概念\"><a href=\"#7-1-1-概念\" class=\"headerlink\" title=\"7.1-1 概念\"></a>7.1-1 概念</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/1.png\"><br><img src=\"/img/datastruct/7_search/search/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<ul>\n<li>平均查找长度：$$ASL&#x3D;\\sum_{i&#x3D;1}^n p_i c_i$$</li>\n</ul>\n<h2 id=\"7-1-2-顺序查找\"><a href=\"#7-1-2-顺序查找\" class=\"headerlink\" title=\"7.1-2 顺序查找\"></a>7.1-2 顺序查找</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/2.png\"><br><img src=\"/img/datastruct/7_search/search/2.png\" alt=\"数据结构\"></p>\n<h2 id=\"7-1-3-折半查找\"><a href=\"#7-1-3-折半查找\" class=\"headerlink\" title=\"7.1-3 折半查找\"></a>7.1-3 折半查找</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/3.png\"><br><img src=\"/img/datastruct/7_search/search/3.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/4.png\"><br><img src=\"/img/datastruct/7_search/search/4.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/5.png\"><br><img src=\"/img/datastruct/7_search/search/5.png\" alt=\"数据结构\"></p>\n<h2 id=\"7-1-4-分块查找\"><a href=\"#7-1-4-分块查找\" class=\"headerlink\" title=\"7.1-4 分块查找\"></a>7.1-4 分块查找</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/6.png\"><br><img src=\"/img/datastruct/7_search/search/6.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/7.png\"><br><img src=\"/img/datastruct/7_search/search/7.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/8.png\"><br><img src=\"/img/datastruct/7_search/search/8.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"7-1-1-概念\"><a href=\"#7-1-1-概念\" class=\"headerlink\" title=\"7.1-1 概念\"></a>7.1-1 概念</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/1.png\"><br><img src=\"/img/datastruct/7_search/search/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n<ul>\n<li>平均查找长度：$$ASL&#x3D;\\sum_{i&#x3D;1}^n p_i c_i$$</li>\n</ul>\n<h2 id=\"7-1-2-顺序查找\"><a href=\"#7-1-2-顺序查找\" class=\"headerlink\" title=\"7.1-2 顺序查找\"></a>7.1-2 顺序查找</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/2.png\"><br><img src=\"/img/datastruct/7_search/search/2.png\" alt=\"数据结构\"></p>\n<h2 id=\"7-1-3-折半查找\"><a href=\"#7-1-3-折半查找\" class=\"headerlink\" title=\"7.1-3 折半查找\"></a>7.1-3 折半查找</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/3.png\"><br><img src=\"/img/datastruct/7_search/search/3.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/4.png\"><br><img src=\"/img/datastruct/7_search/search/4.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/5.png\"><br><img src=\"/img/datastruct/7_search/search/5.png\" alt=\"数据结构\"></p>\n<h2 id=\"7-1-4-分块查找\"><a href=\"#7-1-4-分块查找\" class=\"headerlink\" title=\"7.1-4 分块查找\"></a>7.1-4 分块查找</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/6.png\"><br><img src=\"/img/datastruct/7_search/search/6.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/7.png\"><br><img src=\"/img/datastruct/7_search/search/7.png\" alt=\"数据结构\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/search/8.png\"><br><img src=\"/img/datastruct/7_search/search/8.png\" alt=\"数据结构\"></p>"},{"title":"7.5 B树","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/B/1.png)\n![数据结构](/img/datastruct/7_search/B/1.png)\n\n\n","source":"_posts/datastruct/7_search/5_Btree.md","raw":"---\ntitle: 7.5 B树\ntags: [数据结构,查找,B树]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n![](../../../../themes/yilia/source/img/datastruct/7_search/B/1.png)\n![数据结构](/img/datastruct/7_search/B/1.png)\n\n\n","slug":"datastruct/7_search/5_Btree","published":1,"date":"2023-08-26T08:50:40.799Z","updated":"2023-10-23T13:05:28.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclre002gwovw97dsde2g","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/B/1.png\"><br><img src=\"/img/datastruct/7_search/B/1.png\" alt=\"数据结构\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/B/1.png\"><br><img src=\"/img/datastruct/7_search/B/1.png\" alt=\"数据结构\"></p>"},{"title":"7.4 红黑树","comment":false,"toc":true,"_content":"#\n<!--more-->\n\n## 9.7 红黑树\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/1.png)\n![数据结构](/img/datastruct/7_search/red/1.png)\n<!--more-->\n\n### 7.4-1 为什么要有红黑树\n- 平衡二叉树插入/删除操作效率低，因为调整次数多\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/2.png)\n![数据结构](/img/datastruct/7_search/red/2.png)\n\n### 7.4-2 定义\n- 二叉排序树\n- 左根右\n- 根叶黑\n- 不红红\n- 黑路同\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/3.png)\n![数据结构](/img/datastruct/7_search/red/3.png)\n\n### 7.4-3 性质\n- 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长\n- 有n个结点的红黑树的高度至多为2log<sub>2</sub>(n+1)\n- 若根节点黑高为h，则红黑树的高度至多为2h\n\n### 7.4-4 操作\n- 查找\n- 插入\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/4.png)\n![数据结构](/img/datastruct/7_search/red/4.png)\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/5.png)\n![数据结构](/img/datastruct/7_search/red/5.png)\n- 删除\n","source":"_posts/datastruct/7_search/4_redblacktree.md","raw":"---\ntitle: 7.4 红黑树\ntags: [数据结构]\ncategories: [数据结构]\ncomment: false\ntoc: true\n---\n#\n<!--more-->\n\n## 9.7 红黑树\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/1.png)\n![数据结构](/img/datastruct/7_search/red/1.png)\n<!--more-->\n\n### 7.4-1 为什么要有红黑树\n- 平衡二叉树插入/删除操作效率低，因为调整次数多\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/2.png)\n![数据结构](/img/datastruct/7_search/red/2.png)\n\n### 7.4-2 定义\n- 二叉排序树\n- 左根右\n- 根叶黑\n- 不红红\n- 黑路同\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/3.png)\n![数据结构](/img/datastruct/7_search/red/3.png)\n\n### 7.4-3 性质\n- 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长\n- 有n个结点的红黑树的高度至多为2log<sub>2</sub>(n+1)\n- 若根节点黑高为h，则红黑树的高度至多为2h\n\n### 7.4-4 操作\n- 查找\n- 插入\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/4.png)\n![数据结构](/img/datastruct/7_search/red/4.png)\n![](../../../../themes/yilia/source/img/datastruct/7_search/red/5.png)\n![数据结构](/img/datastruct/7_search/red/5.png)\n- 删除\n","slug":"datastruct/7_search/4_redblacktree","published":1,"date":"2023-08-26T07:46:09.411Z","updated":"2023-10-23T13:02:27.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrf002iwovw060mf83w","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h2 id=\"9-7-红黑树\"><a href=\"#9-7-红黑树\" class=\"headerlink\" title=\"9.7 红黑树\"></a>9.7 红黑树</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/1.png\"><br><img src=\"/img/datastruct/7_search/red/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"7-4-1-为什么要有红黑树\"><a href=\"#7-4-1-为什么要有红黑树\" class=\"headerlink\" title=\"7.4-1 为什么要有红黑树\"></a>7.4-1 为什么要有红黑树</h3><ul>\n<li>平衡二叉树插入&#x2F;删除操作效率低，因为调整次数多<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/2.png\"><br><img src=\"/img/datastruct/7_search/red/2.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"7-4-2-定义\"><a href=\"#7-4-2-定义\" class=\"headerlink\" title=\"7.4-2 定义\"></a>7.4-2 定义</h3><ul>\n<li>二叉排序树</li>\n<li>左根右</li>\n<li>根叶黑</li>\n<li>不红红</li>\n<li>黑路同<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/3.png\"><br><img src=\"/img/datastruct/7_search/red/3.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"7-4-3-性质\"><a href=\"#7-4-3-性质\" class=\"headerlink\" title=\"7.4-3 性质\"></a>7.4-3 性质</h3><ul>\n<li>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长</li>\n<li>有n个结点的红黑树的高度至多为2log<sub>2</sub>(n+1)</li>\n<li>若根节点黑高为h，则红黑树的高度至多为2h</li>\n</ul>\n<h3 id=\"7-4-4-操作\"><a href=\"#7-4-4-操作\" class=\"headerlink\" title=\"7.4-4 操作\"></a>7.4-4 操作</h3><ul>\n<li>查找</li>\n<li>插入<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/4.png\"><br><img src=\"/img/datastruct/7_search/red/4.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/5.png\"><br><img src=\"/img/datastruct/7_search/red/5.png\" alt=\"数据结构\"></li>\n<li>删除</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h2 id=\"9-7-红黑树\"><a href=\"#9-7-红黑树\" class=\"headerlink\" title=\"9.7 红黑树\"></a>9.7 红黑树</h2><p><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/1.png\"><br><img src=\"/img/datastruct/7_search/red/1.png\" alt=\"数据结构\"></p>\n<!--more-->\n\n<h3 id=\"7-4-1-为什么要有红黑树\"><a href=\"#7-4-1-为什么要有红黑树\" class=\"headerlink\" title=\"7.4-1 为什么要有红黑树\"></a>7.4-1 为什么要有红黑树</h3><ul>\n<li>平衡二叉树插入&#x2F;删除操作效率低，因为调整次数多<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/2.png\"><br><img src=\"/img/datastruct/7_search/red/2.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"7-4-2-定义\"><a href=\"#7-4-2-定义\" class=\"headerlink\" title=\"7.4-2 定义\"></a>7.4-2 定义</h3><ul>\n<li>二叉排序树</li>\n<li>左根右</li>\n<li>根叶黑</li>\n<li>不红红</li>\n<li>黑路同<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/3.png\"><br><img src=\"/img/datastruct/7_search/red/3.png\" alt=\"数据结构\"></li>\n</ul>\n<h3 id=\"7-4-3-性质\"><a href=\"#7-4-3-性质\" class=\"headerlink\" title=\"7.4-3 性质\"></a>7.4-3 性质</h3><ul>\n<li>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长</li>\n<li>有n个结点的红黑树的高度至多为2log<sub>2</sub>(n+1)</li>\n<li>若根节点黑高为h，则红黑树的高度至多为2h</li>\n</ul>\n<h3 id=\"7-4-4-操作\"><a href=\"#7-4-4-操作\" class=\"headerlink\" title=\"7.4-4 操作\"></a>7.4-4 操作</h3><ul>\n<li>查找</li>\n<li>插入<br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/4.png\"><br><img src=\"/img/datastruct/7_search/red/4.png\" alt=\"数据结构\"><br><img src=\"/../../../../themes/yilia/source/img/datastruct/7_search/red/5.png\"><br><img src=\"/img/datastruct/7_search/red/5.png\" alt=\"数据结构\"></li>\n<li>删除</li>\n</ul>"},{"title":"1. 快速排序","date":"2023-10-01T16:00:00.000Z","comment":false,"toc":true,"_content":"#\n<!--more-->\n### 1. 1 思想\n\n```\n1. 确定分界点\n\t- q[l]\n\t- q[r]\n\t- q[(l+r)/2]\n\t- q[random]\n2. 调整区间（*）\n\t- 左边<=x x0 右边>=x\n\t- x不一定在x0位置\n3. 递归两端\n```\n```\n1. 暴力求解\n\ta[], b[], c[],对c进行排序，<=x的放到a，>=x的放到b。放完后先将a放到c，再将b放到c.\n\t\n2. 优化空间\n\t定义左右指针i,j当c[i]>x时停，当c[j]<x时停。两个都停之后交换。\n```\n### 1.2 算法模板\n```c\n#include<iostream>\nusing namespace std;\nint a[100000];\nvoid qsort(int a[],int l, int r){\n    if(l>=r) return;\n    int i=l-1,j=r+1;\n    int x=a[((r-l)>>1)+l];\n    while(i<j){\n        do i++; while(a[i]<x);\n        do j--; while(a[j]>x);\n        if(i<j) swap(a[i],a[j]);\n    }\n    qsort(a,l,j);\n    qsort(a,j+1,r);\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    qsort(a,0,n-1);\n    for(int i=0;i<n;i++) printf(\"%d \",a[i]);\n}\n```\n- 可以考虑使用i或j\n- 可以考虑使用while(a[i++])\n\n---\n## 2 归并排序\n### 2.1 思想\n```\n1. 确定分界点 a[(l+r)/2]\n2. 递归排序左右\n3. 归并，合二为一（*）\n```\n\n### 2.2 算法模板\n```c\n#include<iostream>\n\nusing namespace std;\n\nint a[100010];\nint temp[100010];\nint n=0;\n\nvoid msort(int a[],int l,int r){\n    if(l>=r) return;\n    int mid=((r-l)>>1)+l;\n    msort(a,l,mid);\n    msort(a,mid+1,r);\n    \n    //merge\n    int i=l,j=mid+1,k=0;\n    while(i<=mid && j<=r){\n        temp[k++]=(a[i]<=a[j]?a[i++]:a[j++]);\n    }\n    while(i<=mid) temp[k++]=a[i++];\n    while(j<=r) temp[k++]=a[j++];\n    //\n    for(i=l,j=0;i<=r;i++,j++) a[i]=temp[j];\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    msort(a,0,n-1);\n    for(int i=0;i<n;i++) printf(\"%d \",a[i]);\n    return 0;\n}\n```\n\n## 3. 整数二分\n单调一定可以二分\n不单调也可能二分","source":"_posts/algorithm/1_base/1_base.md","raw":"---\n\ntitle: 1. 快速排序\n\ndate: 2023-10-02\n\ntags: [算法，排序]\n\ncategories: [算法]\n\ncomment: false\n\ntoc: true\n---\n#\n<!--more-->\n### 1. 1 思想\n\n```\n1. 确定分界点\n\t- q[l]\n\t- q[r]\n\t- q[(l+r)/2]\n\t- q[random]\n2. 调整区间（*）\n\t- 左边<=x x0 右边>=x\n\t- x不一定在x0位置\n3. 递归两端\n```\n```\n1. 暴力求解\n\ta[], b[], c[],对c进行排序，<=x的放到a，>=x的放到b。放完后先将a放到c，再将b放到c.\n\t\n2. 优化空间\n\t定义左右指针i,j当c[i]>x时停，当c[j]<x时停。两个都停之后交换。\n```\n### 1.2 算法模板\n```c\n#include<iostream>\nusing namespace std;\nint a[100000];\nvoid qsort(int a[],int l, int r){\n    if(l>=r) return;\n    int i=l-1,j=r+1;\n    int x=a[((r-l)>>1)+l];\n    while(i<j){\n        do i++; while(a[i]<x);\n        do j--; while(a[j]>x);\n        if(i<j) swap(a[i],a[j]);\n    }\n    qsort(a,l,j);\n    qsort(a,j+1,r);\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    qsort(a,0,n-1);\n    for(int i=0;i<n;i++) printf(\"%d \",a[i]);\n}\n```\n- 可以考虑使用i或j\n- 可以考虑使用while(a[i++])\n\n---\n## 2 归并排序\n### 2.1 思想\n```\n1. 确定分界点 a[(l+r)/2]\n2. 递归排序左右\n3. 归并，合二为一（*）\n```\n\n### 2.2 算法模板\n```c\n#include<iostream>\n\nusing namespace std;\n\nint a[100010];\nint temp[100010];\nint n=0;\n\nvoid msort(int a[],int l,int r){\n    if(l>=r) return;\n    int mid=((r-l)>>1)+l;\n    msort(a,l,mid);\n    msort(a,mid+1,r);\n    \n    //merge\n    int i=l,j=mid+1,k=0;\n    while(i<=mid && j<=r){\n        temp[k++]=(a[i]<=a[j]?a[i++]:a[j++]);\n    }\n    while(i<=mid) temp[k++]=a[i++];\n    while(j<=r) temp[k++]=a[j++];\n    //\n    for(i=l,j=0;i<=r;i++,j++) a[i]=temp[j];\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    msort(a,0,n-1);\n    for(int i=0;i<n;i++) printf(\"%d \",a[i]);\n    return 0;\n}\n```\n\n## 3. 整数二分\n单调一定可以二分\n不单调也可能二分","slug":"algorithm/1_base/1_base","published":1,"updated":"2023-10-23T11:58:01.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrf002lwovw4m8c45m4","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<h3 id=\"1-1-思想\"><a href=\"#1-1-思想\" class=\"headerlink\" title=\"1. 1 思想\"></a>1. 1 思想</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 确定分界点</span><br><span class=\"line\">\t- q[l]</span><br><span class=\"line\">\t- q[r]</span><br><span class=\"line\">\t- q[(l+r)/2]</span><br><span class=\"line\">\t- q[random]</span><br><span class=\"line\">2. 调整区间（*）</span><br><span class=\"line\">\t- 左边&lt;=x x0 右边&gt;=x</span><br><span class=\"line\">\t- x不一定在x0位置</span><br><span class=\"line\">3. 递归两端</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 暴力求解</span><br><span class=\"line\">\ta[], b[], c[],对c进行排序，&lt;=x的放到a，&gt;=x的放到b。放完后先将a放到c，再将b放到c.</span><br><span class=\"line\">\t</span><br><span class=\"line\">2. 优化空间</span><br><span class=\"line\">\t定义左右指针i,j当c[i]&gt;x时停，当c[j]&lt;x时停。两个都停之后交换。</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-算法模板\"><a href=\"#1-2-算法模板\" class=\"headerlink\" title=\"1.2 算法模板\"></a>1.2 算法模板</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">100000</span>];</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=l<span class=\"number\">-1</span>,j=r+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=a[((r-l)&gt;&gt;<span class=\"number\">1</span>)+l];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(a[i]&lt;x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(a[j]&gt;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;j) swap(a[i],a[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    qsort(a,l,j);</span><br><span class=\"line\">    qsort(a,j+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    qsort(a,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以考虑使用i或j</li>\n<li>可以考虑使用while(a[i++])</li>\n</ul>\n<hr>\n<h2 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2 归并排序\"></a>2 归并排序</h2><h3 id=\"2-1-思想\"><a href=\"#2-1-思想\" class=\"headerlink\" title=\"2.1 思想\"></a>2.1 思想</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 确定分界点 a[(l+r)/2]</span><br><span class=\"line\">2. 递归排序左右</span><br><span class=\"line\">3. 归并，合二为一（*）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-算法模板\"><a href=\"#2-2-算法模板\" class=\"headerlink\" title=\"2.2 算法模板\"></a>2.2 算法模板</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> temp[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">msort</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=((r-l)&gt;&gt;<span class=\"number\">1</span>)+l;</span><br><span class=\"line\">    msort(a,l,mid);</span><br><span class=\"line\">    msort(a,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//merge</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=l,j=mid+<span class=\"number\">1</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)&#123;</span><br><span class=\"line\">        temp[k++]=(a[i]&lt;=a[j]?a[i++]:a[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid) temp[k++]=a[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;=r) temp[k++]=a[j++];</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=l,j=<span class=\"number\">0</span>;i&lt;=r;i++,j++) a[i]=temp[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    msort(a,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-整数二分\"><a href=\"#3-整数二分\" class=\"headerlink\" title=\"3. 整数二分\"></a>3. 整数二分</h2><p>单调一定可以二分<br>不单调也可能二分</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h3 id=\"1-1-思想\"><a href=\"#1-1-思想\" class=\"headerlink\" title=\"1. 1 思想\"></a>1. 1 思想</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 确定分界点</span><br><span class=\"line\">\t- q[l]</span><br><span class=\"line\">\t- q[r]</span><br><span class=\"line\">\t- q[(l+r)/2]</span><br><span class=\"line\">\t- q[random]</span><br><span class=\"line\">2. 调整区间（*）</span><br><span class=\"line\">\t- 左边&lt;=x x0 右边&gt;=x</span><br><span class=\"line\">\t- x不一定在x0位置</span><br><span class=\"line\">3. 递归两端</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 暴力求解</span><br><span class=\"line\">\ta[], b[], c[],对c进行排序，&lt;=x的放到a，&gt;=x的放到b。放完后先将a放到c，再将b放到c.</span><br><span class=\"line\">\t</span><br><span class=\"line\">2. 优化空间</span><br><span class=\"line\">\t定义左右指针i,j当c[i]&gt;x时停，当c[j]&lt;x时停。两个都停之后交换。</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-算法模板\"><a href=\"#1-2-算法模板\" class=\"headerlink\" title=\"1.2 算法模板\"></a>1.2 算法模板</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">100000</span>];</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">qsort</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=l<span class=\"number\">-1</span>,j=r+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=a[((r-l)&gt;&gt;<span class=\"number\">1</span>)+l];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> i++; <span class=\"keyword\">while</span>(a[i]&lt;x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> j--; <span class=\"keyword\">while</span>(a[j]&gt;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;j) swap(a[i],a[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    qsort(a,l,j);</span><br><span class=\"line\">    qsort(a,j+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    qsort(a,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以考虑使用i或j</li>\n<li>可以考虑使用while(a[i++])</li>\n</ul>\n<hr>\n<h2 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2 归并排序\"></a>2 归并排序</h2><h3 id=\"2-1-思想\"><a href=\"#2-1-思想\" class=\"headerlink\" title=\"2.1 思想\"></a>2.1 思想</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 确定分界点 a[(l+r)/2]</span><br><span class=\"line\">2. 递归排序左右</span><br><span class=\"line\">3. 归并，合二为一（*）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-算法模板\"><a href=\"#2-2-算法模板\" class=\"headerlink\" title=\"2.2 算法模板\"></a>2.2 算法模板</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> temp[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">msort</span><span class=\"params\">(<span class=\"type\">int</span> a[],<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=((r-l)&gt;&gt;<span class=\"number\">1</span>)+l;</span><br><span class=\"line\">    msort(a,l,mid);</span><br><span class=\"line\">    msort(a,mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//merge</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i=l,j=mid+<span class=\"number\">1</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)&#123;</span><br><span class=\"line\">        temp[k++]=(a[i]&lt;=a[j]?a[i++]:a[j++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=mid) temp[k++]=a[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;=r) temp[k++]=a[j++];</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=l,j=<span class=\"number\">0</span>;i&lt;=r;i++,j++) a[i]=temp[j];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class=\"line\">    msort(a,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-整数二分\"><a href=\"#3-整数二分\" class=\"headerlink\" title=\"3. 整数二分\"></a>3. 整数二分</h2><p>单调一定可以二分<br>不单调也可能二分</p>"},{"title":"pycharm连接服务器--","date":"2023-12-16T16:00:00.000Z","comment":false,"toc":true,"_content":"\n#\n<!--more-->\n\n- 需要提前准备好：IP/端口/user/password\n\n## 1. 连接\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/1.png)\n\n![](/img/experience/pycharm/link_server/1.png)\n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/2.png)\n\n![](/img/experience/pycharm/link_server/2.png)\n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/3.png)\n\n![](/img/experience/pycharm/link_server/3.png)\n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/4.png)\n\n![](/img/experience/pycharm/link_server/4.png)\n\n测试成功即可。\n\n\n\n## 2. 打开服务器\n\n- 打开终端\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/5.png)\n\n![](/img/experience/pycharm/link_server/5.png)\n\n-  打开文件\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/6.png)\n\n![](/img/experience/pycharm/link_server/6.png)\n\n右侧就会显示。如果你想显示特定目录，请在连接的时候填写根路径。\n\n## 3. 使用服务器运行代码\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/7.png)\n\n ![](/img/experience/pycharm/link_server/7.png) \n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/8.png)\n\n ![](/img/experience/pycharm/link_server/8.png) \n\n点击添加。\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/9.png)\n\n ![](/img/experience/pycharm/link_server/9.png) \n\n选择你的python解释器路径（通常在虚拟环境的/bin/python文件\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/10.png)\n\n ![](/img/experience/pycharm/link_server/10.png) \n\n点击右下角即可更改python解释器。\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/11.png)\n\n ![](/img/experience/pycharm/link_server/11.png) \n\n","source":"_posts/experience/pycharm/link_server.md","raw":"---\ntitle: pycharm连接服务器--\n\ndate: 2023-12-17\n\ntags: [其他,pycharm]\n\ncategories: [其他]\n\ncomment: false\n\ntoc: true\n\n---\n\n#\n<!--more-->\n\n- 需要提前准备好：IP/端口/user/password\n\n## 1. 连接\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/1.png)\n\n![](/img/experience/pycharm/link_server/1.png)\n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/2.png)\n\n![](/img/experience/pycharm/link_server/2.png)\n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/3.png)\n\n![](/img/experience/pycharm/link_server/3.png)\n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/4.png)\n\n![](/img/experience/pycharm/link_server/4.png)\n\n测试成功即可。\n\n\n\n## 2. 打开服务器\n\n- 打开终端\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/5.png)\n\n![](/img/experience/pycharm/link_server/5.png)\n\n-  打开文件\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/6.png)\n\n![](/img/experience/pycharm/link_server/6.png)\n\n右侧就会显示。如果你想显示特定目录，请在连接的时候填写根路径。\n\n## 3. 使用服务器运行代码\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/7.png)\n\n ![](/img/experience/pycharm/link_server/7.png) \n\n\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/8.png)\n\n ![](/img/experience/pycharm/link_server/8.png) \n\n点击添加。\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/9.png)\n\n ![](/img/experience/pycharm/link_server/9.png) \n\n选择你的python解释器路径（通常在虚拟环境的/bin/python文件\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/10.png)\n\n ![](/img/experience/pycharm/link_server/10.png) \n\n点击右下角即可更改python解释器。\n\n![](../../../../themes/yilia/source/img/experience/pycharm/link_server/11.png)\n\n ![](/img/experience/pycharm/link_server/11.png) \n\n","slug":"experience/pycharm/link_server","published":1,"updated":"2024-01-25T04:32:07.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrg002pwovw4kdnc091","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li>需要提前准备好：IP&#x2F;端口&#x2F;user&#x2F;password</li>\n</ul>\n<h2 id=\"1-连接\"><a href=\"#1-连接\" class=\"headerlink\" title=\"1. 连接\"></a>1. 连接</h2><p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/1.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/1.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/2.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/2.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/3.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/3.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/4.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/4.png\"></p>\n<p>测试成功即可。</p>\n<h2 id=\"2-打开服务器\"><a href=\"#2-打开服务器\" class=\"headerlink\" title=\"2. 打开服务器\"></a>2. 打开服务器</h2><ul>\n<li>打开终端</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/5.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/5.png\"></p>\n<ul>\n<li>打开文件</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/6.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/6.png\"></p>\n<p>右侧就会显示。如果你想显示特定目录，请在连接的时候填写根路径。</p>\n<h2 id=\"3-使用服务器运行代码\"><a href=\"#3-使用服务器运行代码\" class=\"headerlink\" title=\"3. 使用服务器运行代码\"></a>3. 使用服务器运行代码</h2><p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/7.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/7.png\"> </p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/8.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/8.png\"> </p>\n<p>点击添加。</p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/9.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/9.png\"> </p>\n<p>选择你的python解释器路径（通常在虚拟环境的&#x2F;bin&#x2F;python文件</p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/10.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/10.png\"> </p>\n<p>点击右下角即可更改python解释器。</p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/11.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/11.png\"> </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li>需要提前准备好：IP&#x2F;端口&#x2F;user&#x2F;password</li>\n</ul>\n<h2 id=\"1-连接\"><a href=\"#1-连接\" class=\"headerlink\" title=\"1. 连接\"></a>1. 连接</h2><p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/1.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/1.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/2.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/2.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/3.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/3.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/4.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/4.png\"></p>\n<p>测试成功即可。</p>\n<h2 id=\"2-打开服务器\"><a href=\"#2-打开服务器\" class=\"headerlink\" title=\"2. 打开服务器\"></a>2. 打开服务器</h2><ul>\n<li>打开终端</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/5.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/5.png\"></p>\n<ul>\n<li>打开文件</li>\n</ul>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/6.png\"></p>\n<p><img src=\"/img/experience/pycharm/link_server/6.png\"></p>\n<p>右侧就会显示。如果你想显示特定目录，请在连接的时候填写根路径。</p>\n<h2 id=\"3-使用服务器运行代码\"><a href=\"#3-使用服务器运行代码\" class=\"headerlink\" title=\"3. 使用服务器运行代码\"></a>3. 使用服务器运行代码</h2><p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/7.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/7.png\"> </p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/8.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/8.png\"> </p>\n<p>点击添加。</p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/9.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/9.png\"> </p>\n<p>选择你的python解释器路径（通常在虚拟环境的&#x2F;bin&#x2F;python文件</p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/10.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/10.png\"> </p>\n<p>点击右下角即可更改python解释器。</p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/pycharm/link_server/11.png\"></p>\n<p> <img src=\"/img/experience/pycharm/link_server/11.png\"> </p>"},{"title":"win10中windows media player自动同步歌词","date":"2023-12-11T16:00:00.000Z","comment":false,"toc":true,"_content":"\n#\n<!--more-->\n\n- 需要提前下载歌词文件\n\n## 1. 歌词文件\n\n- 如果你的歌词文件是LRC文件，则需要转成SMI文件\n\n  1. [在线转换](https://www.lrccon.com/convert?lang=zh-hans)(只能转单个，想转多个可以找找别的)\n\n     ![](/img/experience/app/lrc_to_smi/2.png)\n\n     ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/2.png)\n\n     ![](/img/experience/app/lrc_to_smi/3.png)\n\n     ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/3.png)\n\n     注意编码\n  \n     ![](/img/experience/app/lrc_to_smi/4.png)\n  \n     ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/4.png)\n  \n  2. 将SMI文件与歌曲mp3文件放在同一文件夹下\n\n## 2. 设置播放器\n\n1. 右键歌曲 -> 打开方式 -> windows media player\n\n![](/img/experience/app/lrc_to_smi/1.png)\n\n![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/1.png)\n\n2.  右键 -> 歌词 -> 开\n\n3.  ![](/img/experience/app/lrc_to_smi/5.png)\n\n    ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/5.png)\n\n     \n\n4. 关闭软件再重新打开音乐就ok了。","source":"_posts/experience/app/lrc_to_smi.md","raw":"---\ntitle: win10中windows media player自动同步歌词\n\ndate: 2023-12-12\n\ntags: [其他]\n\ncategories: [其他]\n\ncomment: false\n\ntoc: true\n\n---\n\n#\n<!--more-->\n\n- 需要提前下载歌词文件\n\n## 1. 歌词文件\n\n- 如果你的歌词文件是LRC文件，则需要转成SMI文件\n\n  1. [在线转换](https://www.lrccon.com/convert?lang=zh-hans)(只能转单个，想转多个可以找找别的)\n\n     ![](/img/experience/app/lrc_to_smi/2.png)\n\n     ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/2.png)\n\n     ![](/img/experience/app/lrc_to_smi/3.png)\n\n     ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/3.png)\n\n     注意编码\n  \n     ![](/img/experience/app/lrc_to_smi/4.png)\n  \n     ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/4.png)\n  \n  2. 将SMI文件与歌曲mp3文件放在同一文件夹下\n\n## 2. 设置播放器\n\n1. 右键歌曲 -> 打开方式 -> windows media player\n\n![](/img/experience/app/lrc_to_smi/1.png)\n\n![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/1.png)\n\n2.  右键 -> 歌词 -> 开\n\n3.  ![](/img/experience/app/lrc_to_smi/5.png)\n\n    ![](../../../../themes/yilia/source/img/experience/app/lrc_to_smi/5.png)\n\n     \n\n4. 关闭软件再重新打开音乐就ok了。","slug":"experience/app/lrc_to_smi","published":1,"updated":"2024-01-25T04:31:29.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrv005ywovwh7ny064u","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li>需要提前下载歌词文件</li>\n</ul>\n<h2 id=\"1-歌词文件\"><a href=\"#1-歌词文件\" class=\"headerlink\" title=\"1. 歌词文件\"></a>1. 歌词文件</h2><ul>\n<li><p>如果你的歌词文件是LRC文件，则需要转成SMI文件</p>\n<ol>\n<li><p><a href=\"https://www.lrccon.com/convert?lang=zh-hans\">在线转换</a>(只能转单个，想转多个可以找找别的)</p>\n<p><img src=\"/img/experience/app/lrc_to_smi/2.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/2.png\"></p>\n<p><img src=\"/img/experience/app/lrc_to_smi/3.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/3.png\"></p>\n<p>注意编码</p>\n<p><img src=\"/img/experience/app/lrc_to_smi/4.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/4.png\"></p>\n</li>\n<li><p>将SMI文件与歌曲mp3文件放在同一文件夹下</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-设置播放器\"><a href=\"#2-设置播放器\" class=\"headerlink\" title=\"2. 设置播放器\"></a>2. 设置播放器</h2><ol>\n<li>右键歌曲 -&gt; 打开方式 -&gt; windows media player</li>\n</ol>\n<p><img src=\"/img/experience/app/lrc_to_smi/1.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/1.png\"></p>\n<ol start=\"2\">\n<li><p>右键 -&gt; 歌词 -&gt; 开</p>\n</li>\n<li><p><img src=\"/img/experience/app/lrc_to_smi/5.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/5.png\"></p>\n</li>\n<li><p>关闭软件再重新打开音乐就ok了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li>需要提前下载歌词文件</li>\n</ul>\n<h2 id=\"1-歌词文件\"><a href=\"#1-歌词文件\" class=\"headerlink\" title=\"1. 歌词文件\"></a>1. 歌词文件</h2><ul>\n<li><p>如果你的歌词文件是LRC文件，则需要转成SMI文件</p>\n<ol>\n<li><p><a href=\"https://www.lrccon.com/convert?lang=zh-hans\">在线转换</a>(只能转单个，想转多个可以找找别的)</p>\n<p><img src=\"/img/experience/app/lrc_to_smi/2.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/2.png\"></p>\n<p><img src=\"/img/experience/app/lrc_to_smi/3.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/3.png\"></p>\n<p>注意编码</p>\n<p><img src=\"/img/experience/app/lrc_to_smi/4.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/4.png\"></p>\n</li>\n<li><p>将SMI文件与歌曲mp3文件放在同一文件夹下</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-设置播放器\"><a href=\"#2-设置播放器\" class=\"headerlink\" title=\"2. 设置播放器\"></a>2. 设置播放器</h2><ol>\n<li>右键歌曲 -&gt; 打开方式 -&gt; windows media player</li>\n</ol>\n<p><img src=\"/img/experience/app/lrc_to_smi/1.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/1.png\"></p>\n<ol start=\"2\">\n<li><p>右键 -&gt; 歌词 -&gt; 开</p>\n</li>\n<li><p><img src=\"/img/experience/app/lrc_to_smi/5.png\"></p>\n<p><img src=\"/../../../../themes/yilia/source/img/experience/app/lrc_to_smi/5.png\"></p>\n</li>\n<li><p>关闭软件再重新打开音乐就ok了。</p>\n</li>\n</ol>"},{"title":"vscode","date":"2021-03-01T12:00:00.000Z","toc":true,"_content":"# vscode中python相对路径无法使用\n\n<!--more-->\n\n## 解决方案：\n\n- 写绝对路径\n注意用/不要用\\\n- 修改配置文件\n![](../../themes/yilia/source/img/experience/vscode/relative_path/1.png)\n![](img/experience/vscode/relative_path/1.png)\n![](../../themes/yilia/source/img/experience/vscode/relative_path/2.png)\n![](img/experience/vscode/relative_path/2.png)","source":"_posts/experience/vscode/vscode.md","raw":"---\ntitle: vscode\ndate: 2021-03-01 20:00:00\ntoc: true\ntags: [vscode]\ncategories: [vscode]\n---\n# vscode中python相对路径无法使用\n\n<!--more-->\n\n## 解决方案：\n\n- 写绝对路径\n注意用/不要用\\\n- 修改配置文件\n![](../../themes/yilia/source/img/experience/vscode/relative_path/1.png)\n![](img/experience/vscode/relative_path/1.png)\n![](../../themes/yilia/source/img/experience/vscode/relative_path/2.png)\n![](img/experience/vscode/relative_path/2.png)","slug":"experience/vscode/vscode","published":1,"updated":"2024-01-25T04:39:10.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrv005zwovw34lu81v7","content":"<h1 id=\"vscode中python相对路径无法使用\"><a href=\"#vscode中python相对路径无法使用\" class=\"headerlink\" title=\"vscode中python相对路径无法使用\"></a>vscode中python相对路径无法使用</h1><span id=\"more\"></span>\n\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><ul>\n<li>写绝对路径<br>注意用&#x2F;不要用\\</li>\n<li>修改配置文件<br><img src=\"/../../themes/yilia/source/img/experience/vscode/relative_path/1.png\"><br><img src=\"/img/experience/vscode/relative_path/1.png\"><br><img src=\"/../../themes/yilia/source/img/experience/vscode/relative_path/2.png\"><br><img src=\"/img/experience/vscode/relative_path/2.png\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"vscode中python相对路径无法使用\"><a href=\"#vscode中python相对路径无法使用\" class=\"headerlink\" title=\"vscode中python相对路径无法使用\"></a>vscode中python相对路径无法使用</h1>","more":"<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><ul>\n<li>写绝对路径<br>注意用&#x2F;不要用\\</li>\n<li>修改配置文件<br><img src=\"/../../themes/yilia/source/img/experience/vscode/relative_path/1.png\"><br><img src=\"/img/experience/vscode/relative_path/1.png\"><br><img src=\"/../../themes/yilia/source/img/experience/vscode/relative_path/2.png\"><br><img src=\"/img/experience/vscode/relative_path/2.png\"></li>\n</ul>"},{"title":"CDM论文讲解","date":"2024-01-25T16:00:00.000Z","comment":true,"toc":true,"_content":"\n#\n<!--more-->\n\n- 论文标题：[Cascaded diffusion models for high fidelity image generation](https://dl.acm.org/doi/abs/10.5555/3586589.3586636)\n\n- 来源：  JMLR 2022  \n- 贡献：\n  - Cascaded Diffusion Models(CDM)产生的高保真样本在FID评分和分类准确性评分方面优于BigGAN-deep和VQ-VAE-2。\n  - 为超分辨率模型引入了条件增强，并发现它对实现高样本保真度至关重要。\n\n\n\n# 1. 方法\n\n- 整体思想： Classifier Diffusion Models + SR3 + Tricks的串联模型，应用多个不同分辨率的扩散模型实现超分效果。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\1.png)\n![](img/deeplearning/paper/SR/CDM/1.png)\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\2.png)\n![](img/deeplearning/paper/SR/CDM/2.png)\n- SR3中也提到可以用级联的SR3做生成，本文在此基础上提出条件增强以提高生成质量\n\n# 1.1 条件增强\n\n- 截断条件采样：逆向过程中的中间图片Xt输入下一个超分模型（而不是XT，即逆向过程只做一部分）\n- 非截断条件增强：生成XT之后再施加高斯噪声后输入下一个模型\n\n\n\n# 2. 实验\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\3.png)\n\n![](img/deeplearning/paper/SR/CDM/3.png)\n\n- 效果比直接级联SR3好","source":"_posts/deeplearning/paper/SR/CDM.md","raw":"---\ntitle: CDM论文讲解\ndate: 2024-01-26 00:00:00\ntags: [深度学习,论文,超分]\ncategories: [深度学习]\ncomment: true\ntoc: true\n\n---\n\n#\n<!--more-->\n\n- 论文标题：[Cascaded diffusion models for high fidelity image generation](https://dl.acm.org/doi/abs/10.5555/3586589.3586636)\n\n- 来源：  JMLR 2022  \n- 贡献：\n  - Cascaded Diffusion Models(CDM)产生的高保真样本在FID评分和分类准确性评分方面优于BigGAN-deep和VQ-VAE-2。\n  - 为超分辨率模型引入了条件增强，并发现它对实现高样本保真度至关重要。\n\n\n\n# 1. 方法\n\n- 整体思想： Classifier Diffusion Models + SR3 + Tricks的串联模型，应用多个不同分辨率的扩散模型实现超分效果。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\1.png)\n![](img/deeplearning/paper/SR/CDM/1.png)\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\2.png)\n![](img/deeplearning/paper/SR/CDM/2.png)\n- SR3中也提到可以用级联的SR3做生成，本文在此基础上提出条件增强以提高生成质量\n\n# 1.1 条件增强\n\n- 截断条件采样：逆向过程中的中间图片Xt输入下一个超分模型（而不是XT，即逆向过程只做一部分）\n- 非截断条件增强：生成XT之后再施加高斯噪声后输入下一个模型\n\n\n\n# 2. 实验\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\3.png)\n\n![](img/deeplearning/paper/SR/CDM/3.png)\n\n- 效果比直接级联SR3好","slug":"deeplearning/paper/SR/CDM","published":1,"updated":"2024-01-30T15:36:04.579Z","_id":"cls0iclrw0061wovweso002xm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>论文标题：<a href=\"https://dl.acm.org/doi/abs/10.5555/3586589.3586636\">Cascaded diffusion models for high fidelity image generation</a></p>\n</li>\n<li><p>来源：  JMLR 2022  </p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>Cascaded Diffusion Models(CDM)产生的高保真样本在FID评分和分类准确性评分方面优于BigGAN-deep和VQ-VAE-2。</li>\n<li>为超分辨率模型引入了条件增强，并发现它对实现高样本保真度至关重要。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-方法\"><a href=\"#1-方法\" class=\"headerlink\" title=\"1. 方法\"></a>1. 方法</h1><ul>\n<li>整体思想： Classifier Diffusion Models + SR3 + Tricks的串联模型，应用多个不同分辨率的扩散模型实现超分效果。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\1.png\"><br><img src=\"/img/deeplearning/paper/SR/CDM/1.png\"><br><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\2.png\"><br><img src=\"/img/deeplearning/paper/SR/CDM/2.png\"></p>\n<ul>\n<li>SR3中也提到可以用级联的SR3做生成，本文在此基础上提出条件增强以提高生成质量</li>\n</ul>\n<h1 id=\"1-1-条件增强\"><a href=\"#1-1-条件增强\" class=\"headerlink\" title=\"1.1 条件增强\"></a>1.1 条件增强</h1><ul>\n<li>截断条件采样：逆向过程中的中间图片Xt输入下一个超分模型（而不是XT，即逆向过程只做一部分）</li>\n<li>非截断条件增强：生成XT之后再施加高斯噪声后输入下一个模型</li>\n</ul>\n<h1 id=\"2-实验\"><a href=\"#2-实验\" class=\"headerlink\" title=\"2. 实验\"></a>2. 实验</h1><p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\3.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/CDM/3.png\"></p>\n<ul>\n<li>效果比直接级联SR3好</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>论文标题：<a href=\"https://dl.acm.org/doi/abs/10.5555/3586589.3586636\">Cascaded diffusion models for high fidelity image generation</a></p>\n</li>\n<li><p>来源：  JMLR 2022  </p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>Cascaded Diffusion Models(CDM)产生的高保真样本在FID评分和分类准确性评分方面优于BigGAN-deep和VQ-VAE-2。</li>\n<li>为超分辨率模型引入了条件增强，并发现它对实现高样本保真度至关重要。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-方法\"><a href=\"#1-方法\" class=\"headerlink\" title=\"1. 方法\"></a>1. 方法</h1><ul>\n<li>整体思想： Classifier Diffusion Models + SR3 + Tricks的串联模型，应用多个不同分辨率的扩散模型实现超分效果。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\1.png\"><br><img src=\"/img/deeplearning/paper/SR/CDM/1.png\"><br><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\2.png\"><br><img src=\"/img/deeplearning/paper/SR/CDM/2.png\"></p>\n<ul>\n<li>SR3中也提到可以用级联的SR3做生成，本文在此基础上提出条件增强以提高生成质量</li>\n</ul>\n<h1 id=\"1-1-条件增强\"><a href=\"#1-1-条件增强\" class=\"headerlink\" title=\"1.1 条件增强\"></a>1.1 条件增强</h1><ul>\n<li>截断条件采样：逆向过程中的中间图片Xt输入下一个超分模型（而不是XT，即逆向过程只做一部分）</li>\n<li>非截断条件增强：生成XT之后再施加高斯噪声后输入下一个模型</li>\n</ul>\n<h1 id=\"2-实验\"><a href=\"#2-实验\" class=\"headerlink\" title=\"2. 实验\"></a>2. 实验</h1><p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\CDM\\3.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/CDM/3.png\"></p>\n<ul>\n<li>效果比直接级联SR3好</li>\n</ul>"},{"title":"HAT论文讲解","date":"2024-01-24T16:00:00.000Z","comment":false,"toc":true,"_content":"\n#\n<!--more-->\n\n- 论文标题：[Activating more pixels in image super-resolution transformer](https://scholar.google.com/scholar?cluster=4970683343699562565&hl=en&as_sdt=2005&sciodt=0,5)\n\n- 来源：CVPR  2023\n- 贡献：\n  -  在结构上，本文设计的HAT结合了通道注意力与自注意力，在以往Transformer结构的基础上进一步提升了模型利用输入信息的范围。同时设计了一个重叠交叉注意力模块，对Swin结构利用跨窗口信息的能力进行了有效增强。 \n  -  在预训练策略上，本文提出的在相同任务上做预训练的方法，使得模型的性能进一步增强。 \n  -  HAT大幅超越了当前超分方法的性能，这表明该任务或许远没有达到上限，可能依然还有很大的探索空间。 \n  \n  \n\n# 1. 问题\n\n \t本文首先对不同方法的LAM 结果进行了对比。LAM是一种为SR任务设计的归因方法，它能够显示模型在进行超分辨率重建的过程中哪些像素起到了作用。 \n\n​\t 如下图所示，LAM图中红色标记点表示：模型在重建左上图红框标记块时，对重建结果会产生影响的像素（LAM结果下面的值为DI值，它可以定量地反映被利用像素的范围。DI值越大，表示重建时利用的像素范围越大）。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\1.png)\n\n![](img/deeplearning/paper/SR/HAT/1.png)\n\n​\t 一般来说，被利用像素的范围越大，重建的效果往往越好，该结论在对比基于CNN的方法EDSR与RCAN时可以得到明显体现。然而，当对比RCAN与基于Transformer的SwinIR方法时，却出现了结论相反的现象： SwinIR取得了更高的PSNR/SSIM，但相比RCAN并没有使用更大范围的像素信息，并且由于其有限的信息使用范围，在蓝色框区域恢复出了错误的纹理。这与以往普遍认为Transformer结构是通过更好地利用long-range信息来取得性能优势的直觉是相悖的。 \n\n​\t这些现象说明：\n\n- SwinIR结构拥有更强的局部表征能力，能够使用更少的信息来达到更高的性能；\n- SwinIR依然有较大提升空间，如果更多的像素能够被利用，那么应该会取得更大的性能提升。\n\n​\t除此之外，本文发现在SwinIR网络前几层产生的中间特征会出现明显的块状效应。这是由于模型在计算自注意力时的窗口划分导致的，因此本文认为现有结构进行跨窗口信息交互的方式也应该被改进。\n\n\n\n# 2. 解决方案\n\n## 2.1  **网络结构设计** \n\n​\tHAT的整体架构采用了与SwinIR相似的Residual in Residual结构，如下图3所示。主要的不同之处在于混合注意力模块（Hybrid Attention Block， HAB）与重叠的交叉注意力模块（Overlapping Cross-Attention Block， OCAB）的设计。\n\n​\t其中对于HAB，本文采用了并联的方式来结合通道注意力和自注意力。通道注意力能够利用全局信息；自注意力具有强大的表征能力。HAB模块的目的在于能够同时结合这两者的优势。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\2.png)\n\n ![](img/deeplearning/paper/SR/HAT/2.png) \n\n​\t对于OCAB的设计，本文使用了一种重叠的窗口划分机制，如下图所示。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\3.png)\n\n ![](img/deeplearning/paper/SR/HAT/3.png) \n\n​\t相对于原始基于窗口的self-attention中Q、K和V来自于同一个窗口特征，OCA中的K/V来自更大的窗口特征，这允许attention能够被跨窗口地计算，以增强相邻窗口间信息的交互。\n\n\n\n## 2.2  **预训练策略** \n\n​\t本文提出了一种直接使用相同的任务，但是使用更大的数据集（比如ImageNet）进行预训练的策略。\n\n​\t相比于之前用于超分任务的预训练方案，该策略更简单，但却能带来更多的性能增益。\n\n\n\n# 3. 实验\n\n## 3.1 更大的窗口尺寸\n\n-  通过对于不同窗口尺寸的定量和定性比较，可以看到16窗口尺寸有明显提升，HAT使用窗口尺寸16作为默认设置。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\4.png)\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\5.png)\n\n ![](img/deeplearning/paper/SR/HAT/4.png) \n ![](img/deeplearning/paper/SR/HAT/5.png) \n\n\n\n## 3.2 消融实验\n\n- 本文提供了消融实验来验证CAB和OCAB的影响，定量和定性分析结果如下表2和图6所示。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\6.png)\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\7.png)![](img/deeplearning/paper/SR/HAT/6.png) \n![](img/deeplearning/paper/SR/HAT/7.png) \n\n- 可以看到文中所提的两个模块在定量指标上均带来了不小的提升，在LAM和视觉效果上相对于Baseline也具有明显改善。\n\n\n\n## 3.3 主实验结果\n\n- 在基准数据集上进行定量对比实验的结果如下表所示。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\8.png)\n![](img/deeplearning/paper/SR/HAT/8.png) \n\n​\t从定量指标上看，没有使用ImageNet预训练策略的HAT的性能已经明显超越SwinIR，甚至在很多情况下超越了经过ImageNet预训练的EDT。\n\n​\t使用了ImageNet预训练的HAT则更是大幅超越了SwinIR与EDT的性能，在2倍超分的Urban100数据集上，超越SwinIR 1dB。\n\n​\t更大容量的模型HAT-L带来了更大的性能提升，最高在2倍超分的Urban100数据集上超越SwinIR达1.28dB，超越EDT达0.85dB。\n\n-  视觉效果对比如下图所示。可以看出HAT能够恢复更多更清晰的细节，由于对于重复纹理较多的情况，HAT具有显著优势。在文字的恢复上，HAT相比其他方法也能够恢复出更清晰的文字边缘。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\9.png)\n![](img/deeplearning/paper/SR/HAT/8.png) \n\n\n\n## 3.4 **预训练策略对比** \n\n​\t 本文对于不同的预训练策略进行了对比，如下表所示。相对于EDT 提出使用相关任务进行预训练的策略，本文提出的使用相同任务进行预训练的策略无论是在预训练阶段还是微调后的结果，性能都要更优。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\11.png)\n![](img/deeplearning/paper/SR/HAT/11.png) \n\n\n\n\n【转自：https://mmlab.siat.ac.cn/research/1/area?id=r2022052401&menu=1】\n\n","source":"_posts/deeplearning/paper/SR/HAT.md","raw":"---\ntitle: HAT论文讲解\ndate: 2024-01-25 00:00:00\ntags: [深度学习,论文,超分]\ncategories: [深度学习]\ncomment: false\ntoc: true\n\n\n---\n\n#\n<!--more-->\n\n- 论文标题：[Activating more pixels in image super-resolution transformer](https://scholar.google.com/scholar?cluster=4970683343699562565&hl=en&as_sdt=2005&sciodt=0,5)\n\n- 来源：CVPR  2023\n- 贡献：\n  -  在结构上，本文设计的HAT结合了通道注意力与自注意力，在以往Transformer结构的基础上进一步提升了模型利用输入信息的范围。同时设计了一个重叠交叉注意力模块，对Swin结构利用跨窗口信息的能力进行了有效增强。 \n  -  在预训练策略上，本文提出的在相同任务上做预训练的方法，使得模型的性能进一步增强。 \n  -  HAT大幅超越了当前超分方法的性能，这表明该任务或许远没有达到上限，可能依然还有很大的探索空间。 \n  \n  \n\n# 1. 问题\n\n \t本文首先对不同方法的LAM 结果进行了对比。LAM是一种为SR任务设计的归因方法，它能够显示模型在进行超分辨率重建的过程中哪些像素起到了作用。 \n\n​\t 如下图所示，LAM图中红色标记点表示：模型在重建左上图红框标记块时，对重建结果会产生影响的像素（LAM结果下面的值为DI值，它可以定量地反映被利用像素的范围。DI值越大，表示重建时利用的像素范围越大）。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\1.png)\n\n![](img/deeplearning/paper/SR/HAT/1.png)\n\n​\t 一般来说，被利用像素的范围越大，重建的效果往往越好，该结论在对比基于CNN的方法EDSR与RCAN时可以得到明显体现。然而，当对比RCAN与基于Transformer的SwinIR方法时，却出现了结论相反的现象： SwinIR取得了更高的PSNR/SSIM，但相比RCAN并没有使用更大范围的像素信息，并且由于其有限的信息使用范围，在蓝色框区域恢复出了错误的纹理。这与以往普遍认为Transformer结构是通过更好地利用long-range信息来取得性能优势的直觉是相悖的。 \n\n​\t这些现象说明：\n\n- SwinIR结构拥有更强的局部表征能力，能够使用更少的信息来达到更高的性能；\n- SwinIR依然有较大提升空间，如果更多的像素能够被利用，那么应该会取得更大的性能提升。\n\n​\t除此之外，本文发现在SwinIR网络前几层产生的中间特征会出现明显的块状效应。这是由于模型在计算自注意力时的窗口划分导致的，因此本文认为现有结构进行跨窗口信息交互的方式也应该被改进。\n\n\n\n# 2. 解决方案\n\n## 2.1  **网络结构设计** \n\n​\tHAT的整体架构采用了与SwinIR相似的Residual in Residual结构，如下图3所示。主要的不同之处在于混合注意力模块（Hybrid Attention Block， HAB）与重叠的交叉注意力模块（Overlapping Cross-Attention Block， OCAB）的设计。\n\n​\t其中对于HAB，本文采用了并联的方式来结合通道注意力和自注意力。通道注意力能够利用全局信息；自注意力具有强大的表征能力。HAB模块的目的在于能够同时结合这两者的优势。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\2.png)\n\n ![](img/deeplearning/paper/SR/HAT/2.png) \n\n​\t对于OCAB的设计，本文使用了一种重叠的窗口划分机制，如下图所示。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\3.png)\n\n ![](img/deeplearning/paper/SR/HAT/3.png) \n\n​\t相对于原始基于窗口的self-attention中Q、K和V来自于同一个窗口特征，OCA中的K/V来自更大的窗口特征，这允许attention能够被跨窗口地计算，以增强相邻窗口间信息的交互。\n\n\n\n## 2.2  **预训练策略** \n\n​\t本文提出了一种直接使用相同的任务，但是使用更大的数据集（比如ImageNet）进行预训练的策略。\n\n​\t相比于之前用于超分任务的预训练方案，该策略更简单，但却能带来更多的性能增益。\n\n\n\n# 3. 实验\n\n## 3.1 更大的窗口尺寸\n\n-  通过对于不同窗口尺寸的定量和定性比较，可以看到16窗口尺寸有明显提升，HAT使用窗口尺寸16作为默认设置。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\4.png)\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\5.png)\n\n ![](img/deeplearning/paper/SR/HAT/4.png) \n ![](img/deeplearning/paper/SR/HAT/5.png) \n\n\n\n## 3.2 消融实验\n\n- 本文提供了消融实验来验证CAB和OCAB的影响，定量和定性分析结果如下表2和图6所示。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\6.png)\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\7.png)![](img/deeplearning/paper/SR/HAT/6.png) \n![](img/deeplearning/paper/SR/HAT/7.png) \n\n- 可以看到文中所提的两个模块在定量指标上均带来了不小的提升，在LAM和视觉效果上相对于Baseline也具有明显改善。\n\n\n\n## 3.3 主实验结果\n\n- 在基准数据集上进行定量对比实验的结果如下表所示。\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\8.png)\n![](img/deeplearning/paper/SR/HAT/8.png) \n\n​\t从定量指标上看，没有使用ImageNet预训练策略的HAT的性能已经明显超越SwinIR，甚至在很多情况下超越了经过ImageNet预训练的EDT。\n\n​\t使用了ImageNet预训练的HAT则更是大幅超越了SwinIR与EDT的性能，在2倍超分的Urban100数据集上，超越SwinIR 1dB。\n\n​\t更大容量的模型HAT-L带来了更大的性能提升，最高在2倍超分的Urban100数据集上超越SwinIR达1.28dB，超越EDT达0.85dB。\n\n-  视觉效果对比如下图所示。可以看出HAT能够恢复更多更清晰的细节，由于对于重复纹理较多的情况，HAT具有显著优势。在文字的恢复上，HAT相比其他方法也能够恢复出更清晰的文字边缘。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\9.png)\n![](img/deeplearning/paper/SR/HAT/8.png) \n\n\n\n## 3.4 **预训练策略对比** \n\n​\t 本文对于不同的预训练策略进行了对比，如下表所示。相对于EDT 提出使用相关任务进行预训练的策略，本文提出的使用相同任务进行预训练的策略无论是在预训练阶段还是微调后的结果，性能都要更优。 \n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\11.png)\n![](img/deeplearning/paper/SR/HAT/11.png) \n\n\n\n\n【转自：https://mmlab.siat.ac.cn/research/1/area?id=r2022052401&menu=1】\n\n","slug":"deeplearning/paper/SR/HAT","published":1,"updated":"2024-01-26T11:15:23.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrw0064wovw1acffkkk","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>论文标题：<a href=\"https://scholar.google.com/scholar?cluster=4970683343699562565&hl=en&as_sdt=2005&sciodt=0,5\">Activating more pixels in image super-resolution transformer</a></p>\n</li>\n<li><p>来源：CVPR  2023</p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>在结构上，本文设计的HAT结合了通道注意力与自注意力，在以往Transformer结构的基础上进一步提升了模型利用输入信息的范围。同时设计了一个重叠交叉注意力模块，对Swin结构利用跨窗口信息的能力进行了有效增强。 </li>\n<li>在预训练策略上，本文提出的在相同任务上做预训练的方法，使得模型的性能进一步增强。 </li>\n<li>HAT大幅超越了当前超分方法的性能，这表明该任务或许远没有达到上限，可能依然还有很大的探索空间。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h1><pre><code> 本文首先对不同方法的LAM 结果进行了对比。LAM是一种为SR任务设计的归因方法，它能够显示模型在进行超分辨率重建的过程中哪些像素起到了作用。 \n</code></pre>\n<p>​\t 如下图所示，LAM图中红色标记点表示：模型在重建左上图红框标记块时，对重建结果会产生影响的像素（LAM结果下面的值为DI值，它可以定量地反映被利用像素的范围。DI值越大，表示重建时利用的像素范围越大）。 </p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\1.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/HAT/1.png\"></p>\n<p>​\t 一般来说，被利用像素的范围越大，重建的效果往往越好，该结论在对比基于CNN的方法EDSR与RCAN时可以得到明显体现。然而，当对比RCAN与基于Transformer的SwinIR方法时，却出现了结论相反的现象： SwinIR取得了更高的PSNR&#x2F;SSIM，但相比RCAN并没有使用更大范围的像素信息，并且由于其有限的信息使用范围，在蓝色框区域恢复出了错误的纹理。这与以往普遍认为Transformer结构是通过更好地利用long-range信息来取得性能优势的直觉是相悖的。 </p>\n<p>​\t这些现象说明：</p>\n<ul>\n<li>SwinIR结构拥有更强的局部表征能力，能够使用更少的信息来达到更高的性能；</li>\n<li>SwinIR依然有较大提升空间，如果更多的像素能够被利用，那么应该会取得更大的性能提升。</li>\n</ul>\n<p>​\t除此之外，本文发现在SwinIR网络前几层产生的中间特征会出现明显的块状效应。这是由于模型在计算自注意力时的窗口划分导致的，因此本文认为现有结构进行跨窗口信息交互的方式也应该被改进。</p>\n<h1 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2. 解决方案\"></a>2. 解决方案</h1><h2 id=\"2-1-网络结构设计\"><a href=\"#2-1-网络结构设计\" class=\"headerlink\" title=\"2.1  网络结构设计\"></a>2.1  <strong>网络结构设计</strong></h2><p>​\tHAT的整体架构采用了与SwinIR相似的Residual in Residual结构，如下图3所示。主要的不同之处在于混合注意力模块（Hybrid Attention Block， HAB）与重叠的交叉注意力模块（Overlapping Cross-Attention Block， OCAB）的设计。</p>\n<p>​\t其中对于HAB，本文采用了并联的方式来结合通道注意力和自注意力。通道注意力能够利用全局信息；自注意力具有强大的表征能力。HAB模块的目的在于能够同时结合这两者的优势。</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\2.png\"></p>\n<p> <img src=\"/img/deeplearning/paper/SR/HAT/2.png\"> </p>\n<p>​\t对于OCAB的设计，本文使用了一种重叠的窗口划分机制，如下图所示。</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\3.png\"></p>\n<p> <img src=\"/img/deeplearning/paper/SR/HAT/3.png\"> </p>\n<p>​\t相对于原始基于窗口的self-attention中Q、K和V来自于同一个窗口特征，OCA中的K&#x2F;V来自更大的窗口特征，这允许attention能够被跨窗口地计算，以增强相邻窗口间信息的交互。</p>\n<h2 id=\"2-2-预训练策略\"><a href=\"#2-2-预训练策略\" class=\"headerlink\" title=\"2.2  预训练策略\"></a>2.2  <strong>预训练策略</strong></h2><p>​\t本文提出了一种直接使用相同的任务，但是使用更大的数据集（比如ImageNet）进行预训练的策略。</p>\n<p>​\t相比于之前用于超分任务的预训练方案，该策略更简单，但却能带来更多的性能增益。</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3. 实验\"></a>3. 实验</h1><h2 id=\"3-1-更大的窗口尺寸\"><a href=\"#3-1-更大的窗口尺寸\" class=\"headerlink\" title=\"3.1 更大的窗口尺寸\"></a>3.1 更大的窗口尺寸</h2><ul>\n<li>通过对于不同窗口尺寸的定量和定性比较，可以看到16窗口尺寸有明显提升，HAT使用窗口尺寸16作为默认设置。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\4.png\"><br><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\5.png\"></p>\n<p> <img src=\"/img/deeplearning/paper/SR/HAT/4.png\"><br> <img src=\"/img/deeplearning/paper/SR/HAT/5.png\"> </p>\n<h2 id=\"3-2-消融实验\"><a href=\"#3-2-消融实验\" class=\"headerlink\" title=\"3.2 消融实验\"></a>3.2 消融实验</h2><ul>\n<li>本文提供了消融实验来验证CAB和OCAB的影响，定量和定性分析结果如下表2和图6所示。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\6.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\7.png\"><img src=\"/img/deeplearning/paper/SR/HAT/6.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/7.png\"> </p>\n<ul>\n<li>可以看到文中所提的两个模块在定量指标上均带来了不小的提升，在LAM和视觉效果上相对于Baseline也具有明显改善。</li>\n</ul>\n<h2 id=\"3-3-主实验结果\"><a href=\"#3-3-主实验结果\" class=\"headerlink\" title=\"3.3 主实验结果\"></a>3.3 主实验结果</h2><ul>\n<li>在基准数据集上进行定量对比实验的结果如下表所示。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\8.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/8.png\"> </p>\n<p>​\t从定量指标上看，没有使用ImageNet预训练策略的HAT的性能已经明显超越SwinIR，甚至在很多情况下超越了经过ImageNet预训练的EDT。</p>\n<p>​\t使用了ImageNet预训练的HAT则更是大幅超越了SwinIR与EDT的性能，在2倍超分的Urban100数据集上，超越SwinIR 1dB。</p>\n<p>​\t更大容量的模型HAT-L带来了更大的性能提升，最高在2倍超分的Urban100数据集上超越SwinIR达1.28dB，超越EDT达0.85dB。</p>\n<ul>\n<li>视觉效果对比如下图所示。可以看出HAT能够恢复更多更清晰的细节，由于对于重复纹理较多的情况，HAT具有显著优势。在文字的恢复上，HAT相比其他方法也能够恢复出更清晰的文字边缘。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\9.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/8.png\"> </p>\n<h2 id=\"3-4-预训练策略对比\"><a href=\"#3-4-预训练策略对比\" class=\"headerlink\" title=\"3.4 预训练策略对比\"></a>3.4 <strong>预训练策略对比</strong></h2><p>​\t 本文对于不同的预训练策略进行了对比，如下表所示。相对于EDT 提出使用相关任务进行预训练的策略，本文提出的使用相同任务进行预训练的策略无论是在预训练阶段还是微调后的结果，性能都要更优。 </p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\11.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/11.png\"> </p>\n<p>【转自：<a href=\"https://mmlab.siat.ac.cn/research/1/area?id=r2022052401&menu=1%E3%80%91\">https://mmlab.siat.ac.cn/research/1/area?id=r2022052401&amp;menu=1】</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>论文标题：<a href=\"https://scholar.google.com/scholar?cluster=4970683343699562565&hl=en&as_sdt=2005&sciodt=0,5\">Activating more pixels in image super-resolution transformer</a></p>\n</li>\n<li><p>来源：CVPR  2023</p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>在结构上，本文设计的HAT结合了通道注意力与自注意力，在以往Transformer结构的基础上进一步提升了模型利用输入信息的范围。同时设计了一个重叠交叉注意力模块，对Swin结构利用跨窗口信息的能力进行了有效增强。 </li>\n<li>在预训练策略上，本文提出的在相同任务上做预训练的方法，使得模型的性能进一步增强。 </li>\n<li>HAT大幅超越了当前超分方法的性能，这表明该任务或许远没有达到上限，可能依然还有很大的探索空间。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h1><pre><code> 本文首先对不同方法的LAM 结果进行了对比。LAM是一种为SR任务设计的归因方法，它能够显示模型在进行超分辨率重建的过程中哪些像素起到了作用。 \n</code></pre>\n<p>​\t 如下图所示，LAM图中红色标记点表示：模型在重建左上图红框标记块时，对重建结果会产生影响的像素（LAM结果下面的值为DI值，它可以定量地反映被利用像素的范围。DI值越大，表示重建时利用的像素范围越大）。 </p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\1.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/HAT/1.png\"></p>\n<p>​\t 一般来说，被利用像素的范围越大，重建的效果往往越好，该结论在对比基于CNN的方法EDSR与RCAN时可以得到明显体现。然而，当对比RCAN与基于Transformer的SwinIR方法时，却出现了结论相反的现象： SwinIR取得了更高的PSNR&#x2F;SSIM，但相比RCAN并没有使用更大范围的像素信息，并且由于其有限的信息使用范围，在蓝色框区域恢复出了错误的纹理。这与以往普遍认为Transformer结构是通过更好地利用long-range信息来取得性能优势的直觉是相悖的。 </p>\n<p>​\t这些现象说明：</p>\n<ul>\n<li>SwinIR结构拥有更强的局部表征能力，能够使用更少的信息来达到更高的性能；</li>\n<li>SwinIR依然有较大提升空间，如果更多的像素能够被利用，那么应该会取得更大的性能提升。</li>\n</ul>\n<p>​\t除此之外，本文发现在SwinIR网络前几层产生的中间特征会出现明显的块状效应。这是由于模型在计算自注意力时的窗口划分导致的，因此本文认为现有结构进行跨窗口信息交互的方式也应该被改进。</p>\n<h1 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2. 解决方案\"></a>2. 解决方案</h1><h2 id=\"2-1-网络结构设计\"><a href=\"#2-1-网络结构设计\" class=\"headerlink\" title=\"2.1  网络结构设计\"></a>2.1  <strong>网络结构设计</strong></h2><p>​\tHAT的整体架构采用了与SwinIR相似的Residual in Residual结构，如下图3所示。主要的不同之处在于混合注意力模块（Hybrid Attention Block， HAB）与重叠的交叉注意力模块（Overlapping Cross-Attention Block， OCAB）的设计。</p>\n<p>​\t其中对于HAB，本文采用了并联的方式来结合通道注意力和自注意力。通道注意力能够利用全局信息；自注意力具有强大的表征能力。HAB模块的目的在于能够同时结合这两者的优势。</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\2.png\"></p>\n<p> <img src=\"/img/deeplearning/paper/SR/HAT/2.png\"> </p>\n<p>​\t对于OCAB的设计，本文使用了一种重叠的窗口划分机制，如下图所示。</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\3.png\"></p>\n<p> <img src=\"/img/deeplearning/paper/SR/HAT/3.png\"> </p>\n<p>​\t相对于原始基于窗口的self-attention中Q、K和V来自于同一个窗口特征，OCA中的K&#x2F;V来自更大的窗口特征，这允许attention能够被跨窗口地计算，以增强相邻窗口间信息的交互。</p>\n<h2 id=\"2-2-预训练策略\"><a href=\"#2-2-预训练策略\" class=\"headerlink\" title=\"2.2  预训练策略\"></a>2.2  <strong>预训练策略</strong></h2><p>​\t本文提出了一种直接使用相同的任务，但是使用更大的数据集（比如ImageNet）进行预训练的策略。</p>\n<p>​\t相比于之前用于超分任务的预训练方案，该策略更简单，但却能带来更多的性能增益。</p>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3. 实验\"></a>3. 实验</h1><h2 id=\"3-1-更大的窗口尺寸\"><a href=\"#3-1-更大的窗口尺寸\" class=\"headerlink\" title=\"3.1 更大的窗口尺寸\"></a>3.1 更大的窗口尺寸</h2><ul>\n<li>通过对于不同窗口尺寸的定量和定性比较，可以看到16窗口尺寸有明显提升，HAT使用窗口尺寸16作为默认设置。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\4.png\"><br><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\5.png\"></p>\n<p> <img src=\"/img/deeplearning/paper/SR/HAT/4.png\"><br> <img src=\"/img/deeplearning/paper/SR/HAT/5.png\"> </p>\n<h2 id=\"3-2-消融实验\"><a href=\"#3-2-消融实验\" class=\"headerlink\" title=\"3.2 消融实验\"></a>3.2 消融实验</h2><ul>\n<li>本文提供了消融实验来验证CAB和OCAB的影响，定量和定性分析结果如下表2和图6所示。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\6.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\7.png\"><img src=\"/img/deeplearning/paper/SR/HAT/6.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/7.png\"> </p>\n<ul>\n<li>可以看到文中所提的两个模块在定量指标上均带来了不小的提升，在LAM和视觉效果上相对于Baseline也具有明显改善。</li>\n</ul>\n<h2 id=\"3-3-主实验结果\"><a href=\"#3-3-主实验结果\" class=\"headerlink\" title=\"3.3 主实验结果\"></a>3.3 主实验结果</h2><ul>\n<li>在基准数据集上进行定量对比实验的结果如下表所示。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\8.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/8.png\"> </p>\n<p>​\t从定量指标上看，没有使用ImageNet预训练策略的HAT的性能已经明显超越SwinIR，甚至在很多情况下超越了经过ImageNet预训练的EDT。</p>\n<p>​\t使用了ImageNet预训练的HAT则更是大幅超越了SwinIR与EDT的性能，在2倍超分的Urban100数据集上，超越SwinIR 1dB。</p>\n<p>​\t更大容量的模型HAT-L带来了更大的性能提升，最高在2倍超分的Urban100数据集上超越SwinIR达1.28dB，超越EDT达0.85dB。</p>\n<ul>\n<li>视觉效果对比如下图所示。可以看出HAT能够恢复更多更清晰的细节，由于对于重复纹理较多的情况，HAT具有显著优势。在文字的恢复上，HAT相比其他方法也能够恢复出更清晰的文字边缘。</li>\n</ul>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\9.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/8.png\"> </p>\n<h2 id=\"3-4-预训练策略对比\"><a href=\"#3-4-预训练策略对比\" class=\"headerlink\" title=\"3.4 预训练策略对比\"></a>3.4 <strong>预训练策略对比</strong></h2><p>​\t 本文对于不同的预训练策略进行了对比，如下表所示。相对于EDT 提出使用相关任务进行预训练的策略，本文提出的使用相同任务进行预训练的策略无论是在预训练阶段还是微调后的结果，性能都要更优。 </p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\HAT\\11.png\"><br><img src=\"/img/deeplearning/paper/SR/HAT/11.png\"> </p>\n<p>【转自：<a href=\"https://mmlab.siat.ac.cn/research/1/area?id=r2022052401&menu=1%E3%80%91\">https://mmlab.siat.ac.cn/research/1/area?id=r2022052401&amp;menu=1】</a></p>"},{"title":"Resshift论文讲解","date":"2024-01-26T16:00:00.000Z","comment":true,"toc":true,"_content":"\n#\n<!--more-->\n\n- 论文标题：[Resshift: Efficient diffusion model for image super-resolution by residual shifting](https://arxiv.org/abs/2307.12348)\n\n- 来源：NeurIPS. 2023 \n- 贡献：\n  - 提出了一种残差移动方法，加快了扩散模型推理速度，同时保留高性能。\n  - 提出一个噪声设计方案，能够有效控制扩散过程中的噪声强度和转换速度，也可有效控制保真度-真实性之间的权衡。  \n\n# 1. 问题\n\n- 基于diffusion的超分辨率采样速度慢，现有的加速采样技术不可避免地会在一定程度上牺牲性能，导致超分结果过于模糊。\n\n\n\n# 2. 方法\n\n","source":"_posts/deeplearning/paper/SR/Resshift.md","raw":"---\ntitle: Resshift论文讲解\ndate: 2024-01-27 00:00:00\ntags: [深度学习,论文,超分]\ncategories: [深度学习]\ncomment: true\ntoc: true\n\n\n\n---\n\n#\n<!--more-->\n\n- 论文标题：[Resshift: Efficient diffusion model for image super-resolution by residual shifting](https://arxiv.org/abs/2307.12348)\n\n- 来源：NeurIPS. 2023 \n- 贡献：\n  - 提出了一种残差移动方法，加快了扩散模型推理速度，同时保留高性能。\n  - 提出一个噪声设计方案，能够有效控制扩散过程中的噪声强度和转换速度，也可有效控制保真度-真实性之间的权衡。  \n\n# 1. 问题\n\n- 基于diffusion的超分辨率采样速度慢，现有的加速采样技术不可避免地会在一定程度上牺牲性能，导致超分结果过于模糊。\n\n\n\n# 2. 方法\n\n","slug":"deeplearning/paper/SR/Resshift","published":1,"updated":"2024-01-30T15:36:10.587Z","_id":"cls0iclrx0066wovwdebd49kr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>论文标题：<a href=\"https://arxiv.org/abs/2307.12348\">Resshift: Efficient diffusion model for image super-resolution by residual shifting</a></p>\n</li>\n<li><p>来源：NeurIPS. 2023 </p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>提出了一种残差移动方法，加快了扩散模型推理速度，同时保留高性能。</li>\n<li>提出一个噪声设计方案，能够有效控制扩散过程中的噪声强度和转换速度，也可有效控制保真度-真实性之间的权衡。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h1><ul>\n<li>基于diffusion的超分辨率采样速度慢，现有的加速采样技术不可避免地会在一定程度上牺牲性能，导致超分结果过于模糊。</li>\n</ul>\n<h1 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2. 方法\"></a>2. 方法</h1>","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>论文标题：<a href=\"https://arxiv.org/abs/2307.12348\">Resshift: Efficient diffusion model for image super-resolution by residual shifting</a></p>\n</li>\n<li><p>来源：NeurIPS. 2023 </p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>提出了一种残差移动方法，加快了扩散模型推理速度，同时保留高性能。</li>\n<li>提出一个噪声设计方案，能够有效控制扩散过程中的噪声强度和转换速度，也可有效控制保真度-真实性之间的权衡。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h1><ul>\n<li>基于diffusion的超分辨率采样速度慢，现有的加速采样技术不可避免地会在一定程度上牺牲性能，导致超分结果过于模糊。</li>\n</ul>\n<h1 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2. 方法\"></a>2. 方法</h1>"},{"title":"SwinIR论文讲解","date":"2024-01-24T16:00:00.000Z","comment":true,"toc":true,"_content":"\n#\n<!--more-->\n\n- 论文标题：[**Swinir**: Image restoration using swin transformer](https://openaccess.thecvf.com/content/ICCV2021W/AIM/html/Liang_SwinIR_Image_Restoration_Using_Swin_Transformer_ICCVW_2021_paper.html)\n\n- 来源：ICCV  2021\n- 贡献：\n  - 提出基于Swin Transformer的图像修复模型：SwinIR\n  - 通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota\n\n# 1. 背景\n\n## 1-1 图像修复\n\n- 从一个劣质图片修复成一个干净的图片，如：超分、降噪、JPEG压缩区块失真![](D:/blog/themes/yilia/source/img/deeplearning/paper/SR/SwinIR/1.png)\n\n  \n\n![](img/deeplearning/paper/SR/SwinIR/1.png)\n\n\n\n# 2. 相关工作\n\n## 2.1 NLP(Neural Language Processing)\n\n- 可以看成一个翻译任务（Seq2Seq)\n\n- 翻译的难点：一词多义 ->根据上下文的信息\n\n- 常用模型：RNN、LSTM ->全局信息损失\n\n## 2.2 Self-Attention\n\n- Attention($Q$ ,$K$,$V$) = softmax$(\\frac{QK^T}{\\sqrt{d_k}})V$\n\n- 计算一个单词与每一个单词的关系（包括自己）\n\n  ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/2.png)\n\n![](img/deeplearning/paper/SR/SwinIR/2.png)\n\n## 2.3 Multi-head Self-Attention (MSA)\n\n- Ensemble 的self attention，集成多个attention再平均\n\n## 2.4 Transformer on NLP\n\n![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/3.png)\n\n![](img/deeplearning/paper/SR/SwinIR/3.png)\n\n- Transformer在NLP领域效果很好，但是在CV上不太好。\n\n## 2.5 Transformer on CV\n\n- 第一篇将Transformer应用到CV的是：ViT\n\n  - Transformer接收的是一个序列 -> 将图片分割成多个patch\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/4.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/4.png)\n\n  - 可用于图片分割、图片分类、物体检测\n\n## 2.6 Swin Transformer\n\n- 虽然ViT效果还算不错，但是仍然无法超过一些主流的卷积网络，主要原因是Transformer一开始是针对NLP的，NLP是一个一维的问题，图片是高维的问题。\n\n- 直接分块然后独立地丢入Transformer后会有一个问题：最后得出的结果会有边界的问题（各个分块相交的地方）\n\n- Swin Transformer的一个模块包括两个层：\n  \n  ​\t![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/5.png)\n  \n  ​\t![](img/deeplearning/paper/SR/SwinIR/5.png)\n  \n  - W-MSA：在原来的小分割patch基础上有一个local的概念，先在local上先做。（可以想象成背景有一个大网格）\n  - SW-MSA：背景表格不动，将图片往左上或右下做一个shift，这样分割出来的local跟第一层的分割效果就不同了，这样可以解决边界问题。\n  \n- 效果非常好，基本可以取代卷积运算\n\n  \n\n# 3 SwinIR\n\n## 3.1 结构\n\n![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/6.png)\n\n![](img/deeplearning/paper/SR/SwinIR/6.png)\n\n- 浅层特征提取层 -> 深层特征提取层 -> 重建层\n\n  - Shallow Feature Extraction：用一个3*3卷积获得低频信息（颜色或者纹理等基础特性）\n  - Deep Feature Extraction：由于Swin Transformer原本使用在高阶的图像处理任务上，这里让他应用到低阶的任务上，效果非常好。\n  - Reconstruction：\n    - SR：用sub-pixel做up-sample\n    - Denoising/JPEG：用3*3卷积\n\n  - Loss function:\n    - SR：L1 loss -> $l = || I_{RHQ}-I_{HQ}||_1$\n    - Denoising & JPEG：Charbonnier loss -> $l=\\sqrt{||I_{PHQ}-I_{HQ}||^2 + \\epsilon^2}$\n\n\n\n# 4. 实验\n\n## 4.1 Ablation Studies\n\n![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/7.png)\n\n![](img/deeplearning/paper/SR/SwinIR/7.png)\n\n- Super Resolution\n\n  - Classical SR\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/8.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/8.png)\n\n  - Lightweight image SR(轻量的网络架构)\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/9.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/9.png)\n\n  - Real-world image SR\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/10.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/10.png)\n\n- JPEG block removal\n\n  ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/11.png)\n\n  ![](img/deeplearning/paper/SR/SwinIR/11.png)\n\n- Denoising\n\n  - Grayscale image denoising\n\n  - Color image denoising\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/12.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/12.png)\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/13.png) \n\n     ![](img/deeplearning/paper/SR/SwinIR/13.png) \n\n # 5 结论\n\n- 提出基于Swin Transformer的图像修复模型：SwinIR\n- 通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota","source":"_posts/deeplearning/paper/SR/SwinIR.md","raw":"---\ntitle: SwinIR论文讲解\ndate: 2024-01-25 00:00:00\ntags: [深度学习,论文,超分]\ncategories: [深度学习]\ncomment: true\ntoc: true\n\n---\n\n#\n<!--more-->\n\n- 论文标题：[**Swinir**: Image restoration using swin transformer](https://openaccess.thecvf.com/content/ICCV2021W/AIM/html/Liang_SwinIR_Image_Restoration_Using_Swin_Transformer_ICCVW_2021_paper.html)\n\n- 来源：ICCV  2021\n- 贡献：\n  - 提出基于Swin Transformer的图像修复模型：SwinIR\n  - 通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota\n\n# 1. 背景\n\n## 1-1 图像修复\n\n- 从一个劣质图片修复成一个干净的图片，如：超分、降噪、JPEG压缩区块失真![](D:/blog/themes/yilia/source/img/deeplearning/paper/SR/SwinIR/1.png)\n\n  \n\n![](img/deeplearning/paper/SR/SwinIR/1.png)\n\n\n\n# 2. 相关工作\n\n## 2.1 NLP(Neural Language Processing)\n\n- 可以看成一个翻译任务（Seq2Seq)\n\n- 翻译的难点：一词多义 ->根据上下文的信息\n\n- 常用模型：RNN、LSTM ->全局信息损失\n\n## 2.2 Self-Attention\n\n- Attention($Q$ ,$K$,$V$) = softmax$(\\frac{QK^T}{\\sqrt{d_k}})V$\n\n- 计算一个单词与每一个单词的关系（包括自己）\n\n  ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/2.png)\n\n![](img/deeplearning/paper/SR/SwinIR/2.png)\n\n## 2.3 Multi-head Self-Attention (MSA)\n\n- Ensemble 的self attention，集成多个attention再平均\n\n## 2.4 Transformer on NLP\n\n![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/3.png)\n\n![](img/deeplearning/paper/SR/SwinIR/3.png)\n\n- Transformer在NLP领域效果很好，但是在CV上不太好。\n\n## 2.5 Transformer on CV\n\n- 第一篇将Transformer应用到CV的是：ViT\n\n  - Transformer接收的是一个序列 -> 将图片分割成多个patch\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/4.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/4.png)\n\n  - 可用于图片分割、图片分类、物体检测\n\n## 2.6 Swin Transformer\n\n- 虽然ViT效果还算不错，但是仍然无法超过一些主流的卷积网络，主要原因是Transformer一开始是针对NLP的，NLP是一个一维的问题，图片是高维的问题。\n\n- 直接分块然后独立地丢入Transformer后会有一个问题：最后得出的结果会有边界的问题（各个分块相交的地方）\n\n- Swin Transformer的一个模块包括两个层：\n  \n  ​\t![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/5.png)\n  \n  ​\t![](img/deeplearning/paper/SR/SwinIR/5.png)\n  \n  - W-MSA：在原来的小分割patch基础上有一个local的概念，先在local上先做。（可以想象成背景有一个大网格）\n  - SW-MSA：背景表格不动，将图片往左上或右下做一个shift，这样分割出来的local跟第一层的分割效果就不同了，这样可以解决边界问题。\n  \n- 效果非常好，基本可以取代卷积运算\n\n  \n\n# 3 SwinIR\n\n## 3.1 结构\n\n![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/6.png)\n\n![](img/deeplearning/paper/SR/SwinIR/6.png)\n\n- 浅层特征提取层 -> 深层特征提取层 -> 重建层\n\n  - Shallow Feature Extraction：用一个3*3卷积获得低频信息（颜色或者纹理等基础特性）\n  - Deep Feature Extraction：由于Swin Transformer原本使用在高阶的图像处理任务上，这里让他应用到低阶的任务上，效果非常好。\n  - Reconstruction：\n    - SR：用sub-pixel做up-sample\n    - Denoising/JPEG：用3*3卷积\n\n  - Loss function:\n    - SR：L1 loss -> $l = || I_{RHQ}-I_{HQ}||_1$\n    - Denoising & JPEG：Charbonnier loss -> $l=\\sqrt{||I_{PHQ}-I_{HQ}||^2 + \\epsilon^2}$\n\n\n\n# 4. 实验\n\n## 4.1 Ablation Studies\n\n![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/7.png)\n\n![](img/deeplearning/paper/SR/SwinIR/7.png)\n\n- Super Resolution\n\n  - Classical SR\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/8.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/8.png)\n\n  - Lightweight image SR(轻量的网络架构)\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/9.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/9.png)\n\n  - Real-world image SR\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/10.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/10.png)\n\n- JPEG block removal\n\n  ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/11.png)\n\n  ![](img/deeplearning/paper/SR/SwinIR/11.png)\n\n- Denoising\n\n  - Grayscale image denoising\n\n  - Color image denoising\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/12.png)\n\n    ![](img/deeplearning/paper/SR/SwinIR/12.png)\n\n    ![](D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/13.png) \n\n     ![](img/deeplearning/paper/SR/SwinIR/13.png) \n\n # 5 结论\n\n- 提出基于Swin Transformer的图像修复模型：SwinIR\n- 通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota","slug":"deeplearning/paper/SR/SwinIR","published":1,"updated":"2024-01-30T14:37:18.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrx0067wovw7jha40al","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>论文标题：<a href=\"https://openaccess.thecvf.com/content/ICCV2021W/AIM/html/Liang_SwinIR_Image_Restoration_Using_Swin_Transformer_ICCVW_2021_paper.html\"><strong>Swinir</strong>: Image restoration using swin transformer</a></p>\n</li>\n<li><p>来源：ICCV  2021</p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>提出基于Swin Transformer的图像修复模型：SwinIR</li>\n<li>通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><h2 id=\"1-1-图像修复\"><a href=\"#1-1-图像修复\" class=\"headerlink\" title=\"1-1 图像修复\"></a>1-1 图像修复</h2><ul>\n<li>从一个劣质图片修复成一个干净的图片，如：超分、降噪、JPEG压缩区块失真<img src=\"D:/blog/themes/yilia/source/img/deeplearning/paper/SR/SwinIR/1.png\"></li>\n</ul>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/1.png\"></p>\n<h1 id=\"2-相关工作\"><a href=\"#2-相关工作\" class=\"headerlink\" title=\"2. 相关工作\"></a>2. 相关工作</h1><h2 id=\"2-1-NLP-Neural-Language-Processing\"><a href=\"#2-1-NLP-Neural-Language-Processing\" class=\"headerlink\" title=\"2.1 NLP(Neural Language Processing)\"></a>2.1 NLP(Neural Language Processing)</h2><ul>\n<li><p>可以看成一个翻译任务（Seq2Seq)</p>\n</li>\n<li><p>翻译的难点：一词多义 -&gt;根据上下文的信息</p>\n</li>\n<li><p>常用模型：RNN、LSTM -&gt;全局信息损失</p>\n</li>\n</ul>\n<h2 id=\"2-2-Self-Attention\"><a href=\"#2-2-Self-Attention\" class=\"headerlink\" title=\"2.2 Self-Attention\"></a>2.2 Self-Attention</h2><ul>\n<li><p>Attention($Q$ ,$K$,$V$) &#x3D; softmax$(\\frac{QK^T}{\\sqrt{d_k}})V$</p>\n</li>\n<li><p>计算一个单词与每一个单词的关系（包括自己）</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/2.png\"></p>\n</li>\n</ul>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/2.png\"></p>\n<h2 id=\"2-3-Multi-head-Self-Attention-MSA\"><a href=\"#2-3-Multi-head-Self-Attention-MSA\" class=\"headerlink\" title=\"2.3 Multi-head Self-Attention (MSA)\"></a>2.3 Multi-head Self-Attention (MSA)</h2><ul>\n<li>Ensemble 的self attention，集成多个attention再平均</li>\n</ul>\n<h2 id=\"2-4-Transformer-on-NLP\"><a href=\"#2-4-Transformer-on-NLP\" class=\"headerlink\" title=\"2.4 Transformer on NLP\"></a>2.4 Transformer on NLP</h2><p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/3.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/3.png\"></p>\n<ul>\n<li>Transformer在NLP领域效果很好，但是在CV上不太好。</li>\n</ul>\n<h2 id=\"2-5-Transformer-on-CV\"><a href=\"#2-5-Transformer-on-CV\" class=\"headerlink\" title=\"2.5 Transformer on CV\"></a>2.5 Transformer on CV</h2><ul>\n<li><p>第一篇将Transformer应用到CV的是：ViT</p>\n<ul>\n<li><p>Transformer接收的是一个序列 -&gt; 将图片分割成多个patch</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/4.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/4.png\"></p>\n</li>\n<li><p>可用于图片分割、图片分类、物体检测</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-6-Swin-Transformer\"><a href=\"#2-6-Swin-Transformer\" class=\"headerlink\" title=\"2.6 Swin Transformer\"></a>2.6 Swin Transformer</h2><ul>\n<li><p>虽然ViT效果还算不错，但是仍然无法超过一些主流的卷积网络，主要原因是Transformer一开始是针对NLP的，NLP是一个一维的问题，图片是高维的问题。</p>\n</li>\n<li><p>直接分块然后独立地丢入Transformer后会有一个问题：最后得出的结果会有边界的问题（各个分块相交的地方）</p>\n</li>\n<li><p>Swin Transformer的一个模块包括两个层：</p>\n<p>​\t<img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/5.png\"></p>\n<p>​\t<img src=\"/img/deeplearning/paper/SR/SwinIR/5.png\"></p>\n<ul>\n<li>W-MSA：在原来的小分割patch基础上有一个local的概念，先在local上先做。（可以想象成背景有一个大网格）</li>\n<li>SW-MSA：背景表格不动，将图片往左上或右下做一个shift，这样分割出来的local跟第一层的分割效果就不同了，这样可以解决边界问题。</li>\n</ul>\n</li>\n<li><p>效果非常好，基本可以取代卷积运算</p>\n</li>\n</ul>\n<h1 id=\"3-SwinIR\"><a href=\"#3-SwinIR\" class=\"headerlink\" title=\"3 SwinIR\"></a>3 SwinIR</h1><h2 id=\"3-1-结构\"><a href=\"#3-1-结构\" class=\"headerlink\" title=\"3.1 结构\"></a>3.1 结构</h2><p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/6.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/6.png\"></p>\n<ul>\n<li><p>浅层特征提取层 -&gt; 深层特征提取层 -&gt; 重建层</p>\n<ul>\n<li><p>Shallow Feature Extraction：用一个3*3卷积获得低频信息（颜色或者纹理等基础特性）</p>\n</li>\n<li><p>Deep Feature Extraction：由于Swin Transformer原本使用在高阶的图像处理任务上，这里让他应用到低阶的任务上，效果非常好。</p>\n</li>\n<li><p>Reconstruction：</p>\n<ul>\n<li>SR：用sub-pixel做up-sample</li>\n<li>Denoising&#x2F;JPEG：用3*3卷积</li>\n</ul>\n</li>\n<li><p>Loss function:</p>\n<ul>\n<li>SR：L1 loss -&gt; $l &#x3D; || I_{RHQ}-I_{HQ}||_1$</li>\n<li>Denoising &amp; JPEG：Charbonnier loss -&gt; $l&#x3D;\\sqrt{||I_{PHQ}-I_{HQ}||^2 + \\epsilon^2}$</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4. 实验\"></a>4. 实验</h1><h2 id=\"4-1-Ablation-Studies\"><a href=\"#4-1-Ablation-Studies\" class=\"headerlink\" title=\"4.1 Ablation Studies\"></a>4.1 Ablation Studies</h2><p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/7.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/7.png\"></p>\n<ul>\n<li><p>Super Resolution</p>\n<ul>\n<li><p>Classical SR</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/8.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/8.png\"></p>\n</li>\n<li><p>Lightweight image SR(轻量的网络架构)</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/9.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/9.png\"></p>\n</li>\n<li><p>Real-world image SR</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/10.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/10.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>JPEG block removal</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/11.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/11.png\"></p>\n</li>\n<li><p>Denoising</p>\n<ul>\n<li><p>Grayscale image denoising</p>\n</li>\n<li><p>Color image denoising</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/12.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/12.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/13.png\"> </p>\n<p> <img src=\"/img/deeplearning/paper/SR/SwinIR/13.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5 结论\"></a>5 结论</h1><ul>\n<li>提出基于Swin Transformer的图像修复模型：SwinIR</li>\n<li>通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>论文标题：<a href=\"https://openaccess.thecvf.com/content/ICCV2021W/AIM/html/Liang_SwinIR_Image_Restoration_Using_Swin_Transformer_ICCVW_2021_paper.html\"><strong>Swinir</strong>: Image restoration using swin transformer</a></p>\n</li>\n<li><p>来源：ICCV  2021</p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>提出基于Swin Transformer的图像修复模型：SwinIR</li>\n<li>通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><h2 id=\"1-1-图像修复\"><a href=\"#1-1-图像修复\" class=\"headerlink\" title=\"1-1 图像修复\"></a>1-1 图像修复</h2><ul>\n<li>从一个劣质图片修复成一个干净的图片，如：超分、降噪、JPEG压缩区块失真<img src=\"D:/blog/themes/yilia/source/img/deeplearning/paper/SR/SwinIR/1.png\"></li>\n</ul>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/1.png\"></p>\n<h1 id=\"2-相关工作\"><a href=\"#2-相关工作\" class=\"headerlink\" title=\"2. 相关工作\"></a>2. 相关工作</h1><h2 id=\"2-1-NLP-Neural-Language-Processing\"><a href=\"#2-1-NLP-Neural-Language-Processing\" class=\"headerlink\" title=\"2.1 NLP(Neural Language Processing)\"></a>2.1 NLP(Neural Language Processing)</h2><ul>\n<li><p>可以看成一个翻译任务（Seq2Seq)</p>\n</li>\n<li><p>翻译的难点：一词多义 -&gt;根据上下文的信息</p>\n</li>\n<li><p>常用模型：RNN、LSTM -&gt;全局信息损失</p>\n</li>\n</ul>\n<h2 id=\"2-2-Self-Attention\"><a href=\"#2-2-Self-Attention\" class=\"headerlink\" title=\"2.2 Self-Attention\"></a>2.2 Self-Attention</h2><ul>\n<li><p>Attention($Q$ ,$K$,$V$) &#x3D; softmax$(\\frac{QK^T}{\\sqrt{d_k}})V$</p>\n</li>\n<li><p>计算一个单词与每一个单词的关系（包括自己）</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/2.png\"></p>\n</li>\n</ul>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/2.png\"></p>\n<h2 id=\"2-3-Multi-head-Self-Attention-MSA\"><a href=\"#2-3-Multi-head-Self-Attention-MSA\" class=\"headerlink\" title=\"2.3 Multi-head Self-Attention (MSA)\"></a>2.3 Multi-head Self-Attention (MSA)</h2><ul>\n<li>Ensemble 的self attention，集成多个attention再平均</li>\n</ul>\n<h2 id=\"2-4-Transformer-on-NLP\"><a href=\"#2-4-Transformer-on-NLP\" class=\"headerlink\" title=\"2.4 Transformer on NLP\"></a>2.4 Transformer on NLP</h2><p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/3.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/3.png\"></p>\n<ul>\n<li>Transformer在NLP领域效果很好，但是在CV上不太好。</li>\n</ul>\n<h2 id=\"2-5-Transformer-on-CV\"><a href=\"#2-5-Transformer-on-CV\" class=\"headerlink\" title=\"2.5 Transformer on CV\"></a>2.5 Transformer on CV</h2><ul>\n<li><p>第一篇将Transformer应用到CV的是：ViT</p>\n<ul>\n<li><p>Transformer接收的是一个序列 -&gt; 将图片分割成多个patch</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/4.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/4.png\"></p>\n</li>\n<li><p>可用于图片分割、图片分类、物体检测</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-6-Swin-Transformer\"><a href=\"#2-6-Swin-Transformer\" class=\"headerlink\" title=\"2.6 Swin Transformer\"></a>2.6 Swin Transformer</h2><ul>\n<li><p>虽然ViT效果还算不错，但是仍然无法超过一些主流的卷积网络，主要原因是Transformer一开始是针对NLP的，NLP是一个一维的问题，图片是高维的问题。</p>\n</li>\n<li><p>直接分块然后独立地丢入Transformer后会有一个问题：最后得出的结果会有边界的问题（各个分块相交的地方）</p>\n</li>\n<li><p>Swin Transformer的一个模块包括两个层：</p>\n<p>​\t<img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/5.png\"></p>\n<p>​\t<img src=\"/img/deeplearning/paper/SR/SwinIR/5.png\"></p>\n<ul>\n<li>W-MSA：在原来的小分割patch基础上有一个local的概念，先在local上先做。（可以想象成背景有一个大网格）</li>\n<li>SW-MSA：背景表格不动，将图片往左上或右下做一个shift，这样分割出来的local跟第一层的分割效果就不同了，这样可以解决边界问题。</li>\n</ul>\n</li>\n<li><p>效果非常好，基本可以取代卷积运算</p>\n</li>\n</ul>\n<h1 id=\"3-SwinIR\"><a href=\"#3-SwinIR\" class=\"headerlink\" title=\"3 SwinIR\"></a>3 SwinIR</h1><h2 id=\"3-1-结构\"><a href=\"#3-1-结构\" class=\"headerlink\" title=\"3.1 结构\"></a>3.1 结构</h2><p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/6.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/6.png\"></p>\n<ul>\n<li><p>浅层特征提取层 -&gt; 深层特征提取层 -&gt; 重建层</p>\n<ul>\n<li><p>Shallow Feature Extraction：用一个3*3卷积获得低频信息（颜色或者纹理等基础特性）</p>\n</li>\n<li><p>Deep Feature Extraction：由于Swin Transformer原本使用在高阶的图像处理任务上，这里让他应用到低阶的任务上，效果非常好。</p>\n</li>\n<li><p>Reconstruction：</p>\n<ul>\n<li>SR：用sub-pixel做up-sample</li>\n<li>Denoising&#x2F;JPEG：用3*3卷积</li>\n</ul>\n</li>\n<li><p>Loss function:</p>\n<ul>\n<li>SR：L1 loss -&gt; $l &#x3D; || I_{RHQ}-I_{HQ}||_1$</li>\n<li>Denoising &amp; JPEG：Charbonnier loss -&gt; $l&#x3D;\\sqrt{||I_{PHQ}-I_{HQ}||^2 + \\epsilon^2}$</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4. 实验\"></a>4. 实验</h1><h2 id=\"4-1-Ablation-Studies\"><a href=\"#4-1-Ablation-Studies\" class=\"headerlink\" title=\"4.1 Ablation Studies\"></a>4.1 Ablation Studies</h2><p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/7.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/7.png\"></p>\n<ul>\n<li><p>Super Resolution</p>\n<ul>\n<li><p>Classical SR</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/8.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/8.png\"></p>\n</li>\n<li><p>Lightweight image SR(轻量的网络架构)</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/9.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/9.png\"></p>\n</li>\n<li><p>Real-world image SR</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/10.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/10.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>JPEG block removal</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/11.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/11.png\"></p>\n</li>\n<li><p>Denoising</p>\n<ul>\n<li><p>Grayscale image denoising</p>\n</li>\n<li><p>Color image denoising</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/12.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SwinIR/12.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img/deeplearning/paper/SR/SwinIR/13.png\"> </p>\n<p> <img src=\"/img/deeplearning/paper/SR/SwinIR/13.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5 结论\"></a>5 结论</h1><ul>\n<li>提出基于Swin Transformer的图像修复模型：SwinIR</li>\n<li>通过大量实验表明SwinIR在SR、denoising、JPEG block removal上都是sota</li>\n</ul>"},{"title":"SRDiff论文讲解","date":"2024-01-26T16:00:00.000Z","comment":true,"toc":true,"_content":"\n#\n<!--more-->\n\n- 论文标题：[Srdiff: Single image super-resolution with diffusion probabilistic models](https://www.sciencedirect.com/science/article/pii/S0925231222000522)\n\n- 来源： Neurocomputing 2022  \n- 贡献：\n  - 首次将diffusion用于图像超分，与SR3不同的是：SR3直接预测HR图像，而SRDiff预测LR和HR图像之间的差值，这使得DM能够专注于残差细节，加快收敛速度，稳定训练。其次，SRDiff将LR通过encoder后作为条件输入Unet。\n\n# 1. 问题\n\n- 以往的方案基于PSNR，GAN，flow，会出现过于平滑，模式崩溃，模型开销大等问题\n\n# 2. 解决方案\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\1.png)\n\n![](img/deeplearning/paper/SR/SRDiff/1.png)\n\n- 将残差图像拿来做扩散\n- 将LR通过encoder后作为条件\n\n# 3. 实验\n\n ![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\2.png) \n\n ![](img/deeplearning/paper/SR/SRDiff/2.png) \n\n ![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\3.png) \n\n ![](img/deeplearning/paper/SR/SRDiff/3.png) ","source":"_posts/deeplearning/paper/SR/SRDiff.md","raw":"---\ntitle: SRDiff论文讲解\ndate: 2024-01-27 00:00:00\ntags: [深度学习,论文,超分]\ncategories: [深度学习]\ncomment: true\ntoc: true\n\n\n---\n\n#\n<!--more-->\n\n- 论文标题：[Srdiff: Single image super-resolution with diffusion probabilistic models](https://www.sciencedirect.com/science/article/pii/S0925231222000522)\n\n- 来源： Neurocomputing 2022  \n- 贡献：\n  - 首次将diffusion用于图像超分，与SR3不同的是：SR3直接预测HR图像，而SRDiff预测LR和HR图像之间的差值，这使得DM能够专注于残差细节，加快收敛速度，稳定训练。其次，SRDiff将LR通过encoder后作为条件输入Unet。\n\n# 1. 问题\n\n- 以往的方案基于PSNR，GAN，flow，会出现过于平滑，模式崩溃，模型开销大等问题\n\n# 2. 解决方案\n\n![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\1.png)\n\n![](img/deeplearning/paper/SR/SRDiff/1.png)\n\n- 将残差图像拿来做扩散\n- 将LR通过encoder后作为条件\n\n# 3. 实验\n\n ![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\2.png) \n\n ![](img/deeplearning/paper/SR/SRDiff/2.png) \n\n ![](D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\3.png) \n\n ![](img/deeplearning/paper/SR/SRDiff/3.png) ","slug":"deeplearning/paper/SR/SRDiff","published":1,"updated":"2024-01-30T15:36:15.672Z","_id":"cls0iclry006bwovw8y267nmr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>论文标题：<a href=\"https://www.sciencedirect.com/science/article/pii/S0925231222000522\">Srdiff: Single image super-resolution with diffusion probabilistic models</a></p>\n</li>\n<li><p>来源： Neurocomputing 2022  </p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>首次将diffusion用于图像超分，与SR3不同的是：SR3直接预测HR图像，而SRDiff预测LR和HR图像之间的差值，这使得DM能够专注于残差细节，加快收敛速度，稳定训练。其次，SRDiff将LR通过encoder后作为条件输入Unet。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h1><ul>\n<li>以往的方案基于PSNR，GAN，flow，会出现过于平滑，模式崩溃，模型开销大等问题</li>\n</ul>\n<h1 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2. 解决方案\"></a>2. 解决方案</h1><p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\1.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SRDiff/1.png\"></p>\n<ul>\n<li>将残差图像拿来做扩散</li>\n<li>将LR通过encoder后作为条件</li>\n</ul>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3. 实验\"></a>3. 实验</h1><p> <img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\2.png\"> </p>\n<p> <img src=\"/img/deeplearning/paper/SR/SRDiff/2.png\"> </p>\n<p> <img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\3.png\"> </p>\n<p> <img src=\"/img/deeplearning/paper/SR/SRDiff/3.png\"> </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>论文标题：<a href=\"https://www.sciencedirect.com/science/article/pii/S0925231222000522\">Srdiff: Single image super-resolution with diffusion probabilistic models</a></p>\n</li>\n<li><p>来源： Neurocomputing 2022  </p>\n</li>\n<li><p>贡献：</p>\n<ul>\n<li>首次将diffusion用于图像超分，与SR3不同的是：SR3直接预测HR图像，而SRDiff预测LR和HR图像之间的差值，这使得DM能够专注于残差细节，加快收敛速度，稳定训练。其次，SRDiff将LR通过encoder后作为条件输入Unet。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h1><ul>\n<li>以往的方案基于PSNR，GAN，flow，会出现过于平滑，模式崩溃，模型开销大等问题</li>\n</ul>\n<h1 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2. 解决方案\"></a>2. 解决方案</h1><p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\1.png\"></p>\n<p><img src=\"/img/deeplearning/paper/SR/SRDiff/1.png\"></p>\n<ul>\n<li>将残差图像拿来做扩散</li>\n<li>将LR通过encoder后作为条件</li>\n</ul>\n<h1 id=\"3-实验\"><a href=\"#3-实验\" class=\"headerlink\" title=\"3. 实验\"></a>3. 实验</h1><p> <img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\2.png\"> </p>\n<p> <img src=\"/img/deeplearning/paper/SR/SRDiff/2.png\"> </p>\n<p> <img src=\"D:\\blog\\themes\\yilia\\source\\img\\deeplearning\\paper\\SR\\SRDiff\\3.png\"> </p>\n<p> <img src=\"/img/deeplearning/paper/SR/SRDiff/3.png\"> </p>"},{"title":"1. pytorch数据操作","date":"2023-11-11T06:00:00.000Z","comment":false,"toc":true,"_content":"# \n<!--more-->\n\n\n# 1. pytorch数据操作\n\n- pytorch与tensorflow中的Tensor类似于numpy的ndarray\n- pytorch中的Tensor可以在GPU上运行\n- pytorch中的Tensor可以用于自动求导\n\n\n\n## 1.1 张量\n\n- 创建张量\n\n\n```python\n# 1. 导入torch，不是pytorch\nimport torch\n\n# 2. 创建范围张量\nx=torch.arange(12) # 0-11,默认为int64，可以指定dtype，默认存储在CPU上\ny=torch.arange(12,dtype=torch.float32) # 指定dtype\n\n# 3. 创建全0张量\nzeros=torch.zeros(2,3,4) # 2*3*4的全0张量\n\n# 4. 创建全1张量\nones=torch.ones(2,3,4) # 2*3*4的全1张量\n\n# 5. 创建采样张量\nsample=torch.randn(3,4) #从标准高斯分布中采样\n\n# 6. 列表张量\nlists=torch.tensor([[1,2,3],[4,5,6]])\n\n\nprint(x)\nprint(y)\nprint(zeros)\nprint(ones)\nprint(sample)\nprint(lists)\n\n```\n\n    tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n    tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])\n    tensor([[[0., 0., 0., 0.],\n             [0., 0., 0., 0.],\n             [0., 0., 0., 0.]],\n    \n            [[0., 0., 0., 0.],\n             [0., 0., 0., 0.],\n             [0., 0., 0., 0.]]])\n    tensor([[[1., 1., 1., 1.],\n             [1., 1., 1., 1.],\n             [1., 1., 1., 1.]],\n    \n            [[1., 1., 1., 1.],\n             [1., 1., 1., 1.],\n             [1., 1., 1., 1.]]])\n    tensor([[-0.0847, -0.2406,  0.1735, -1.5543],\n            [-0.2820, -0.6689,  0.0565,  0.4746],\n            [ 0.9841, -1.6116, -0.1587, -1.5121]])\n    tensor([[1, 2, 3],\n            [4, 5, 6]])\n    \n\n- 张量的属性\n\n\n```python\n# 3. 查看张量的形状\nprint('x的规模：',x.shape)\n\n# 4. 查看张量的元素总数\nprint('x中元素个数：',x.numel())\n\n# 5. 改变张量的形状\nx=x.reshape(3,4)\nprint('改变x的形状：',x)\nprint('自动计算的形状：',x.reshape(-1,6)) # -1表示自动计算这个维度\n```\n\n    x的规模： torch.Size([12])\n    x中元素个数： 12\n    改变x的形状： tensor([[ 0,  1,  2,  3],\n            [ 4,  5,  6,  7],\n            [ 8,  9, 10, 11]])\n    自动计算的形状： tensor([[ 0,  1,  2,  3,  4,  5],\n            [ 6,  7,  8,  9, 10, 11]])\n    \n\n## 1.2 运算符\n\n\n```python\nx=torch.arange(4)\n\n# 1. 按元素运算\nprint('按元素加法：',x+x)\nprint('按元素减法：',x-x)\nprint('按元素乘法：',x*x)\nprint('按元素除法：',x/x)\nprint('按元素幂运算：',x**x)\nprint('按元素开方：',x.sqrt())\nprint('求幂运算：',torch.exp(x))\n\n# 2. 矩阵运算\n\n# 3. 合并张量(记得加括号)\nx=torch.zeros(12).reshape(3,4)\ny=torch.ones(12).reshape(3,4)\nprint('沿行合并：',torch.cat((x,y),dim=0)) # 沿行合并\nprint('沿列合并：',torch.cat((x,y),dim=1)) # 沿列合并\n\n# 4. 逻辑运算\nprint(x==y)\n\n# 5. 求和\nprint('求和：',y.sum())\n```\n\n    按元素加法： tensor([0, 2, 4, 6])\n    按元素减法： tensor([0, 0, 0, 0])\n    按元素乘法： tensor([0, 1, 4, 9])\n    按元素除法： tensor([nan, 1., 1., 1.])\n    按元素幂运算： tensor([ 1,  1,  4, 27])\n    按元素开方： tensor([0.0000, 1.0000, 1.4142, 1.7321])\n    求幂运算： tensor([ 1.0000,  2.7183,  7.3891, 20.0855])\n    沿行合并： tensor([[0., 0., 0., 0.],\n            [0., 0., 0., 0.],\n            [0., 0., 0., 0.],\n            [1., 1., 1., 1.],\n            [1., 1., 1., 1.],\n            [1., 1., 1., 1.]])\n    沿列合并： tensor([[0., 0., 0., 0., 1., 1., 1., 1.],\n            [0., 0., 0., 0., 1., 1., 1., 1.],\n            [0., 0., 0., 0., 1., 1., 1., 1.]])\n    tensor([[False, False, False, False],\n            [False, False, False, False],\n            [False, False, False, False]])\n    求和： tensor(12.)\n    \n\n## 1.3 广播机制\n- 对两个形状不同的张量按元素运算时，可能会触发广播机制：先适当复制元素使这两个张量形状相同后再按元素运算\n\n1. 如果两个张量的维度数不同，可以在较小的张量的形状前面补1，直到两者的维度数相同。\n2. 如果两个张量在某个维度上的大小不同，但其中一个张量在该维度上的大小为1，那么可以通过在该维度上重复扩展该张量，使得两个张量在该维度上的大小相同。\n3. 如果两个张量在某个维度上的大小都不为1，且大小不同，那么会发生形状不匹配，导致无法进行广播\n\n```python\na=torch.arange(3).reshape(3,1)\nb=torch.arange(2).reshape(1,2)\nprint('a:',a)\nprint('b:',b)\nprint('a+b:',a+b) #通常沿着长度为1的维度进行广播\n```\n\n    a: tensor([[0],\n            [1],\n            [2]])\n    b: tensor([[0, 1]])\n    a+b: tensor([[0, 1],\n            [1, 2],\n            [2, 3]])\n    \n\n## 1.4 索引和切片\n\n\n```python\nprint('x:',x)\nprint('x[-1]:',x[-1])\nprint('x[1:3]:',x[1:3]) #选择第2和第3个元素\nx[1,2]=9 # 修改元素\nprint('x[1,2]=9后 x:',x)\nx[0:2,:]=12 # 修改一行\nprint('x[0:2,:]=12后 x:',x)\n```\n\n    x: tensor([[0., 0., 0., 0.],\n            [0., 0., 0., 0.],\n            [0., 0., 0., 0.]])\n    x[-1]: tensor([0., 0., 0., 0.])\n    x[1:3]: tensor([[0., 0., 0., 0.],\n            [0., 0., 0., 0.]])\n    x[1,2]=9后 x: tensor([[0., 0., 0., 0.],\n            [0., 0., 9., 0.],\n            [0., 0., 0., 0.]])\n    x[0:2,:]=12后 x: tensor([[12., 12., 12., 12.],\n            [12., 12., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    \n\n## 1.5 节省内存\n\n\n```python\nz=torch.zeros(1)\nbefore=id(z)\nz=z+x #对于这种类似列表的数据结构，加号会导致新的内存分配\nprint('z:',z)\nprint('id(z)==before:',id(z)==before) # False，说明z指向了新的地址\n\nz=torch.zeros(3,4) #使用如下操作可以避免新的内存分配，但是无法广播，所以这里要求x和z的形状一致\nbefore=id(z)\nz+=x # +=不会导致新的内存分配\nz[:]=x+z # 也不会导致新的内存分配\nprint('id(z)==before:',id(z)==before) # True\n```\n\n    z: tensor([[12., 12., 12., 12.],\n            [12., 12., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    id(z)==before: False\n    id(z)==before: True\n    \n\n## 1.6 转换为其他python对象\n- tensor与numpy数组\n\n\n```python\nA=x.numpy() # 将张量转换为numpy数组\nB=torch.tensor(A) # 将numpy数组转换为张量\nprint(A,B,sep='\\n')\n\nA[1,1]=3\nprint(A,B,x,sep='\\n') #A与X共享内存\n```\n\n    [[12. 12. 12. 12.]\n     [12.  3. 12. 12.]\n     [ 0.  0.  0.  0.]]\n    tensor([[12., 12., 12., 12.],\n            [12.,  3., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    [[12. 12. 12. 12.]\n     [12.  3. 12. 12.]\n     [ 0.  0.  0.  0.]]\n    tensor([[12., 12., 12., 12.],\n            [12.,  3., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    tensor([[12., 12., 12., 12.],\n            [12.,  3., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    \n\n- 张量转为python标量\n\n\n```python\na=torch.tensor([1.3])\nprint(a)\n\n#由于pytorch中小数用32位，python中用64位；尝试输出.20f就能发现精确度问题\n#由于舍入（四舍五入到最接近的偶数），1.3在pytorch中表示是1.299多，而在python中是1.300多\nprint(a.item()) #使用item函数\nprint(float(a)) #python内置函数\n```\n\n    tensor([1.3000])\n    1.2999999523162842\n    1.2999999523162842\n    \n","source":"_posts/deeplearning/code/pytorch/1_prepare/1_dataoperation.md","raw":"---\ntitle: 1. pytorch数据操作\ndate: 2023-11-11 14:00:00\ntags: [深度学习,机器学习,pytorch]\ncategories: [深度学习]\ncomment: false\ntoc: true\n---\n# \n<!--more-->\n\n\n# 1. pytorch数据操作\n\n- pytorch与tensorflow中的Tensor类似于numpy的ndarray\n- pytorch中的Tensor可以在GPU上运行\n- pytorch中的Tensor可以用于自动求导\n\n\n\n## 1.1 张量\n\n- 创建张量\n\n\n```python\n# 1. 导入torch，不是pytorch\nimport torch\n\n# 2. 创建范围张量\nx=torch.arange(12) # 0-11,默认为int64，可以指定dtype，默认存储在CPU上\ny=torch.arange(12,dtype=torch.float32) # 指定dtype\n\n# 3. 创建全0张量\nzeros=torch.zeros(2,3,4) # 2*3*4的全0张量\n\n# 4. 创建全1张量\nones=torch.ones(2,3,4) # 2*3*4的全1张量\n\n# 5. 创建采样张量\nsample=torch.randn(3,4) #从标准高斯分布中采样\n\n# 6. 列表张量\nlists=torch.tensor([[1,2,3],[4,5,6]])\n\n\nprint(x)\nprint(y)\nprint(zeros)\nprint(ones)\nprint(sample)\nprint(lists)\n\n```\n\n    tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n    tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])\n    tensor([[[0., 0., 0., 0.],\n             [0., 0., 0., 0.],\n             [0., 0., 0., 0.]],\n    \n            [[0., 0., 0., 0.],\n             [0., 0., 0., 0.],\n             [0., 0., 0., 0.]]])\n    tensor([[[1., 1., 1., 1.],\n             [1., 1., 1., 1.],\n             [1., 1., 1., 1.]],\n    \n            [[1., 1., 1., 1.],\n             [1., 1., 1., 1.],\n             [1., 1., 1., 1.]]])\n    tensor([[-0.0847, -0.2406,  0.1735, -1.5543],\n            [-0.2820, -0.6689,  0.0565,  0.4746],\n            [ 0.9841, -1.6116, -0.1587, -1.5121]])\n    tensor([[1, 2, 3],\n            [4, 5, 6]])\n    \n\n- 张量的属性\n\n\n```python\n# 3. 查看张量的形状\nprint('x的规模：',x.shape)\n\n# 4. 查看张量的元素总数\nprint('x中元素个数：',x.numel())\n\n# 5. 改变张量的形状\nx=x.reshape(3,4)\nprint('改变x的形状：',x)\nprint('自动计算的形状：',x.reshape(-1,6)) # -1表示自动计算这个维度\n```\n\n    x的规模： torch.Size([12])\n    x中元素个数： 12\n    改变x的形状： tensor([[ 0,  1,  2,  3],\n            [ 4,  5,  6,  7],\n            [ 8,  9, 10, 11]])\n    自动计算的形状： tensor([[ 0,  1,  2,  3,  4,  5],\n            [ 6,  7,  8,  9, 10, 11]])\n    \n\n## 1.2 运算符\n\n\n```python\nx=torch.arange(4)\n\n# 1. 按元素运算\nprint('按元素加法：',x+x)\nprint('按元素减法：',x-x)\nprint('按元素乘法：',x*x)\nprint('按元素除法：',x/x)\nprint('按元素幂运算：',x**x)\nprint('按元素开方：',x.sqrt())\nprint('求幂运算：',torch.exp(x))\n\n# 2. 矩阵运算\n\n# 3. 合并张量(记得加括号)\nx=torch.zeros(12).reshape(3,4)\ny=torch.ones(12).reshape(3,4)\nprint('沿行合并：',torch.cat((x,y),dim=0)) # 沿行合并\nprint('沿列合并：',torch.cat((x,y),dim=1)) # 沿列合并\n\n# 4. 逻辑运算\nprint(x==y)\n\n# 5. 求和\nprint('求和：',y.sum())\n```\n\n    按元素加法： tensor([0, 2, 4, 6])\n    按元素减法： tensor([0, 0, 0, 0])\n    按元素乘法： tensor([0, 1, 4, 9])\n    按元素除法： tensor([nan, 1., 1., 1.])\n    按元素幂运算： tensor([ 1,  1,  4, 27])\n    按元素开方： tensor([0.0000, 1.0000, 1.4142, 1.7321])\n    求幂运算： tensor([ 1.0000,  2.7183,  7.3891, 20.0855])\n    沿行合并： tensor([[0., 0., 0., 0.],\n            [0., 0., 0., 0.],\n            [0., 0., 0., 0.],\n            [1., 1., 1., 1.],\n            [1., 1., 1., 1.],\n            [1., 1., 1., 1.]])\n    沿列合并： tensor([[0., 0., 0., 0., 1., 1., 1., 1.],\n            [0., 0., 0., 0., 1., 1., 1., 1.],\n            [0., 0., 0., 0., 1., 1., 1., 1.]])\n    tensor([[False, False, False, False],\n            [False, False, False, False],\n            [False, False, False, False]])\n    求和： tensor(12.)\n    \n\n## 1.3 广播机制\n- 对两个形状不同的张量按元素运算时，可能会触发广播机制：先适当复制元素使这两个张量形状相同后再按元素运算\n\n1. 如果两个张量的维度数不同，可以在较小的张量的形状前面补1，直到两者的维度数相同。\n2. 如果两个张量在某个维度上的大小不同，但其中一个张量在该维度上的大小为1，那么可以通过在该维度上重复扩展该张量，使得两个张量在该维度上的大小相同。\n3. 如果两个张量在某个维度上的大小都不为1，且大小不同，那么会发生形状不匹配，导致无法进行广播\n\n```python\na=torch.arange(3).reshape(3,1)\nb=torch.arange(2).reshape(1,2)\nprint('a:',a)\nprint('b:',b)\nprint('a+b:',a+b) #通常沿着长度为1的维度进行广播\n```\n\n    a: tensor([[0],\n            [1],\n            [2]])\n    b: tensor([[0, 1]])\n    a+b: tensor([[0, 1],\n            [1, 2],\n            [2, 3]])\n    \n\n## 1.4 索引和切片\n\n\n```python\nprint('x:',x)\nprint('x[-1]:',x[-1])\nprint('x[1:3]:',x[1:3]) #选择第2和第3个元素\nx[1,2]=9 # 修改元素\nprint('x[1,2]=9后 x:',x)\nx[0:2,:]=12 # 修改一行\nprint('x[0:2,:]=12后 x:',x)\n```\n\n    x: tensor([[0., 0., 0., 0.],\n            [0., 0., 0., 0.],\n            [0., 0., 0., 0.]])\n    x[-1]: tensor([0., 0., 0., 0.])\n    x[1:3]: tensor([[0., 0., 0., 0.],\n            [0., 0., 0., 0.]])\n    x[1,2]=9后 x: tensor([[0., 0., 0., 0.],\n            [0., 0., 9., 0.],\n            [0., 0., 0., 0.]])\n    x[0:2,:]=12后 x: tensor([[12., 12., 12., 12.],\n            [12., 12., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    \n\n## 1.5 节省内存\n\n\n```python\nz=torch.zeros(1)\nbefore=id(z)\nz=z+x #对于这种类似列表的数据结构，加号会导致新的内存分配\nprint('z:',z)\nprint('id(z)==before:',id(z)==before) # False，说明z指向了新的地址\n\nz=torch.zeros(3,4) #使用如下操作可以避免新的内存分配，但是无法广播，所以这里要求x和z的形状一致\nbefore=id(z)\nz+=x # +=不会导致新的内存分配\nz[:]=x+z # 也不会导致新的内存分配\nprint('id(z)==before:',id(z)==before) # True\n```\n\n    z: tensor([[12., 12., 12., 12.],\n            [12., 12., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    id(z)==before: False\n    id(z)==before: True\n    \n\n## 1.6 转换为其他python对象\n- tensor与numpy数组\n\n\n```python\nA=x.numpy() # 将张量转换为numpy数组\nB=torch.tensor(A) # 将numpy数组转换为张量\nprint(A,B,sep='\\n')\n\nA[1,1]=3\nprint(A,B,x,sep='\\n') #A与X共享内存\n```\n\n    [[12. 12. 12. 12.]\n     [12.  3. 12. 12.]\n     [ 0.  0.  0.  0.]]\n    tensor([[12., 12., 12., 12.],\n            [12.,  3., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    [[12. 12. 12. 12.]\n     [12.  3. 12. 12.]\n     [ 0.  0.  0.  0.]]\n    tensor([[12., 12., 12., 12.],\n            [12.,  3., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    tensor([[12., 12., 12., 12.],\n            [12.,  3., 12., 12.],\n            [ 0.,  0.,  0.,  0.]])\n    \n\n- 张量转为python标量\n\n\n```python\na=torch.tensor([1.3])\nprint(a)\n\n#由于pytorch中小数用32位，python中用64位；尝试输出.20f就能发现精确度问题\n#由于舍入（四舍五入到最接近的偶数），1.3在pytorch中表示是1.299多，而在python中是1.300多\nprint(a.item()) #使用item函数\nprint(float(a)) #python内置函数\n```\n\n    tensor([1.3000])\n    1.2999999523162842\n    1.2999999523162842\n    \n","slug":"deeplearning/code/pytorch/1_prepare/1_dataoperation","published":1,"updated":"2024-02-01T04:19:59.962Z","_id":"cls0iclry006dwovwakvx9744","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n\n<h1 id=\"1-pytorch数据操作\"><a href=\"#1-pytorch数据操作\" class=\"headerlink\" title=\"1. pytorch数据操作\"></a>1. pytorch数据操作</h1><ul>\n<li>pytorch与tensorflow中的Tensor类似于numpy的ndarray</li>\n<li>pytorch中的Tensor可以在GPU上运行</li>\n<li>pytorch中的Tensor可以用于自动求导</li>\n</ul>\n<h2 id=\"1-1-张量\"><a href=\"#1-1-张量\" class=\"headerlink\" title=\"1.1 张量\"></a>1.1 张量</h2><ul>\n<li>创建张量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 导入torch，不是pytorch</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建范围张量</span></span><br><span class=\"line\">x=torch.arange(<span class=\"number\">12</span>) <span class=\"comment\"># 0-11,默认为int64，可以指定dtype，默认存储在CPU上</span></span><br><span class=\"line\">y=torch.arange(<span class=\"number\">12</span>,dtype=torch.float32) <span class=\"comment\"># 指定dtype</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 创建全0张量</span></span><br><span class=\"line\">zeros=torch.zeros(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 2*3*4的全0张量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 创建全1张量</span></span><br><span class=\"line\">ones=torch.ones(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 2*3*4的全1张量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 创建采样张量</span></span><br><span class=\"line\">sample=torch.randn(<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\">#从标准高斯分布中采样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 列表张量</span></span><br><span class=\"line\">lists=torch.tensor([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(y)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(zeros)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ones)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sample)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lists)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\ntensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])\ntensor([[[0., 0., 0., 0.],\n         [0., 0., 0., 0.],\n         [0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0.],\n         [0., 0., 0., 0.],\n         [0., 0., 0., 0.]]])\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\ntensor([[-0.0847, -0.2406,  0.1735, -1.5543],\n        [-0.2820, -0.6689,  0.0565,  0.4746],\n        [ 0.9841, -1.6116, -0.1587, -1.5121]])\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n</code></pre>\n<ul>\n<li>张量的属性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3. 查看张量的形状</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x的规模：&#x27;</span>,x.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 查看张量的元素总数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x中元素个数：&#x27;</span>,x.numel())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 改变张量的形状</span></span><br><span class=\"line\">x=x.reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;改变x的形状：&#x27;</span>,x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;自动计算的形状：&#x27;</span>,x.reshape(-<span class=\"number\">1</span>,<span class=\"number\">6</span>)) <span class=\"comment\"># -1表示自动计算这个维度</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>x的规模： torch.Size([12])\nx中元素个数： 12\n改变x的形状： tensor([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n自动计算的形状： tensor([[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]])\n</code></pre>\n<h2 id=\"1-2-运算符\"><a href=\"#1-2-运算符\" class=\"headerlink\" title=\"1.2 运算符\"></a>1.2 运算符</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=torch.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 按元素运算</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素加法：&#x27;</span>,x+x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素减法：&#x27;</span>,x-x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素乘法：&#x27;</span>,x*x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素除法：&#x27;</span>,x/x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素幂运算：&#x27;</span>,x**x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素开方：&#x27;</span>,x.sqrt())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;求幂运算：&#x27;</span>,torch.exp(x))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 矩阵运算</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 合并张量(记得加括号)</span></span><br><span class=\"line\">x=torch.zeros(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">y=torch.ones(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;沿行合并：&#x27;</span>,torch.cat((x,y),dim=<span class=\"number\">0</span>)) <span class=\"comment\"># 沿行合并</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;沿列合并：&#x27;</span>,torch.cat((x,y),dim=<span class=\"number\">1</span>)) <span class=\"comment\"># 沿列合并</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 逻辑运算</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x==y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 求和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;求和：&#x27;</span>,y.<span class=\"built_in\">sum</span>())</span><br></pre></td></tr></table></figure>\n\n<pre><code>按元素加法： tensor([0, 2, 4, 6])\n按元素减法： tensor([0, 0, 0, 0])\n按元素乘法： tensor([0, 1, 4, 9])\n按元素除法： tensor([nan, 1., 1., 1.])\n按元素幂运算： tensor([ 1,  1,  4, 27])\n按元素开方： tensor([0.0000, 1.0000, 1.4142, 1.7321])\n求幂运算： tensor([ 1.0000,  2.7183,  7.3891, 20.0855])\n沿行合并： tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]])\n沿列合并： tensor([[0., 0., 0., 0., 1., 1., 1., 1.],\n        [0., 0., 0., 0., 1., 1., 1., 1.],\n        [0., 0., 0., 0., 1., 1., 1., 1.]])\ntensor([[False, False, False, False],\n        [False, False, False, False],\n        [False, False, False, False]])\n求和： tensor(12.)\n</code></pre>\n<h2 id=\"1-3-广播机制\"><a href=\"#1-3-广播机制\" class=\"headerlink\" title=\"1.3 广播机制\"></a>1.3 广播机制</h2><ul>\n<li>对两个形状不同的张量按元素运算时，可能会触发广播机制：先适当复制元素使这两个张量形状相同后再按元素运算</li>\n</ul>\n<ol>\n<li>如果两个张量的维度数不同，可以在较小的张量的形状前面补1，直到两者的维度数相同。</li>\n<li>如果两个张量在某个维度上的大小不同，但其中一个张量在该维度上的大小为1，那么可以通过在该维度上重复扩展该张量，使得两个张量在该维度上的大小相同。</li>\n<li>如果两个张量在某个维度上的大小都不为1，且大小不同，那么会发生形状不匹配，导致无法进行广播</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=torch.arange(<span class=\"number\">3</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">b=torch.arange(<span class=\"number\">2</span>).reshape(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a:&#x27;</span>,a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b:&#x27;</span>,b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a+b:&#x27;</span>,a+b) <span class=\"comment\">#通常沿着长度为1的维度进行广播</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>a: tensor([[0],\n        [1],\n        [2]])\nb: tensor([[0, 1]])\na+b: tensor([[0, 1],\n        [1, 2],\n        [2, 3]])\n</code></pre>\n<h2 id=\"1-4-索引和切片\"><a href=\"#1-4-索引和切片\" class=\"headerlink\" title=\"1.4 索引和切片\"></a>1.4 索引和切片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x:&#x27;</span>,x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[-1]:&#x27;</span>,x[-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[1:3]:&#x27;</span>,x[<span class=\"number\">1</span>:<span class=\"number\">3</span>]) <span class=\"comment\">#选择第2和第3个元素</span></span><br><span class=\"line\">x[<span class=\"number\">1</span>,<span class=\"number\">2</span>]=<span class=\"number\">9</span> <span class=\"comment\"># 修改元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[1,2]=9后 x:&#x27;</span>,x)</span><br><span class=\"line\">x[<span class=\"number\">0</span>:<span class=\"number\">2</span>,:]=<span class=\"number\">12</span> <span class=\"comment\"># 修改一行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[0:2,:]=12后 x:&#x27;</span>,x)</span><br></pre></td></tr></table></figure>\n\n<pre><code>x: tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\nx[-1]: tensor([0., 0., 0., 0.])\nx[1:3]: tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\nx[1,2]=9后 x: tensor([[0., 0., 0., 0.],\n        [0., 0., 9., 0.],\n        [0., 0., 0., 0.]])\nx[0:2,:]=12后 x: tensor([[12., 12., 12., 12.],\n        [12., 12., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\n</code></pre>\n<h2 id=\"1-5-节省内存\"><a href=\"#1-5-节省内存\" class=\"headerlink\" title=\"1.5 节省内存\"></a>1.5 节省内存</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z=torch.zeros(<span class=\"number\">1</span>)</span><br><span class=\"line\">before=<span class=\"built_in\">id</span>(z)</span><br><span class=\"line\">z=z+x <span class=\"comment\">#对于这种类似列表的数据结构，加号会导致新的内存分配</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;z:&#x27;</span>,z)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(z)==before:&#x27;</span>,<span class=\"built_in\">id</span>(z)==before) <span class=\"comment\"># False，说明z指向了新的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">z=torch.zeros(<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\">#使用如下操作可以避免新的内存分配，但是无法广播，所以这里要求x和z的形状一致</span></span><br><span class=\"line\">before=<span class=\"built_in\">id</span>(z)</span><br><span class=\"line\">z+=x <span class=\"comment\"># +=不会导致新的内存分配</span></span><br><span class=\"line\">z[:]=x+z <span class=\"comment\"># 也不会导致新的内存分配</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(z)==before:&#x27;</span>,<span class=\"built_in\">id</span>(z)==before) <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>z: tensor([[12., 12., 12., 12.],\n        [12., 12., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\nid(z)==before: False\nid(z)==before: True\n</code></pre>\n<h2 id=\"1-6-转换为其他python对象\"><a href=\"#1-6-转换为其他python对象\" class=\"headerlink\" title=\"1.6 转换为其他python对象\"></a>1.6 转换为其他python对象</h2><ul>\n<li>tensor与numpy数组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=x.numpy() <span class=\"comment\"># 将张量转换为numpy数组</span></span><br><span class=\"line\">B=torch.tensor(A) <span class=\"comment\"># 将numpy数组转换为张量</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A,B,sep=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">A[<span class=\"number\">1</span>,<span class=\"number\">1</span>]=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A,B,x,sep=<span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"comment\">#A与X共享内存</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>[[12. 12. 12. 12.]\n [12.  3. 12. 12.]\n [ 0.  0.  0.  0.]]\ntensor([[12., 12., 12., 12.],\n        [12.,  3., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\n[[12. 12. 12. 12.]\n [12.  3. 12. 12.]\n [ 0.  0.  0.  0.]]\ntensor([[12., 12., 12., 12.],\n        [12.,  3., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\ntensor([[12., 12., 12., 12.],\n        [12.,  3., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\n</code></pre>\n<ul>\n<li>张量转为python标量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=torch.tensor([<span class=\"number\">1.3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#由于pytorch中小数用32位，python中用64位；尝试输出.20f就能发现精确度问题</span></span><br><span class=\"line\"><span class=\"comment\">#由于舍入（四舍五入到最接近的偶数），1.3在pytorch中表示是1.299多，而在python中是1.300多</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.item()) <span class=\"comment\">#使用item函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(a)) <span class=\"comment\">#python内置函数</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([1.3000])\n1.2999999523162842\n1.2999999523162842\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h1 id=\"1-pytorch数据操作\"><a href=\"#1-pytorch数据操作\" class=\"headerlink\" title=\"1. pytorch数据操作\"></a>1. pytorch数据操作</h1><ul>\n<li>pytorch与tensorflow中的Tensor类似于numpy的ndarray</li>\n<li>pytorch中的Tensor可以在GPU上运行</li>\n<li>pytorch中的Tensor可以用于自动求导</li>\n</ul>\n<h2 id=\"1-1-张量\"><a href=\"#1-1-张量\" class=\"headerlink\" title=\"1.1 张量\"></a>1.1 张量</h2><ul>\n<li>创建张量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 导入torch，不是pytorch</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建范围张量</span></span><br><span class=\"line\">x=torch.arange(<span class=\"number\">12</span>) <span class=\"comment\"># 0-11,默认为int64，可以指定dtype，默认存储在CPU上</span></span><br><span class=\"line\">y=torch.arange(<span class=\"number\">12</span>,dtype=torch.float32) <span class=\"comment\"># 指定dtype</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 创建全0张量</span></span><br><span class=\"line\">zeros=torch.zeros(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 2*3*4的全0张量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 创建全1张量</span></span><br><span class=\"line\">ones=torch.ones(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 2*3*4的全1张量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 创建采样张量</span></span><br><span class=\"line\">sample=torch.randn(<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\">#从标准高斯分布中采样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 列表张量</span></span><br><span class=\"line\">lists=torch.tensor([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(y)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(zeros)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ones)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sample)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lists)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\ntensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])\ntensor([[[0., 0., 0., 0.],\n         [0., 0., 0., 0.],\n         [0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0.],\n         [0., 0., 0., 0.],\n         [0., 0., 0., 0.]]])\ntensor([[[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]],\n\n        [[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]])\ntensor([[-0.0847, -0.2406,  0.1735, -1.5543],\n        [-0.2820, -0.6689,  0.0565,  0.4746],\n        [ 0.9841, -1.6116, -0.1587, -1.5121]])\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n</code></pre>\n<ul>\n<li>张量的属性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3. 查看张量的形状</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x的规模：&#x27;</span>,x.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 查看张量的元素总数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x中元素个数：&#x27;</span>,x.numel())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 改变张量的形状</span></span><br><span class=\"line\">x=x.reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;改变x的形状：&#x27;</span>,x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;自动计算的形状：&#x27;</span>,x.reshape(-<span class=\"number\">1</span>,<span class=\"number\">6</span>)) <span class=\"comment\"># -1表示自动计算这个维度</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>x的规模： torch.Size([12])\nx中元素个数： 12\n改变x的形状： tensor([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n自动计算的形状： tensor([[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]])\n</code></pre>\n<h2 id=\"1-2-运算符\"><a href=\"#1-2-运算符\" class=\"headerlink\" title=\"1.2 运算符\"></a>1.2 运算符</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=torch.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 按元素运算</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素加法：&#x27;</span>,x+x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素减法：&#x27;</span>,x-x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素乘法：&#x27;</span>,x*x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素除法：&#x27;</span>,x/x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素幂运算：&#x27;</span>,x**x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;按元素开方：&#x27;</span>,x.sqrt())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;求幂运算：&#x27;</span>,torch.exp(x))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 矩阵运算</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 合并张量(记得加括号)</span></span><br><span class=\"line\">x=torch.zeros(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">y=torch.ones(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;沿行合并：&#x27;</span>,torch.cat((x,y),dim=<span class=\"number\">0</span>)) <span class=\"comment\"># 沿行合并</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;沿列合并：&#x27;</span>,torch.cat((x,y),dim=<span class=\"number\">1</span>)) <span class=\"comment\"># 沿列合并</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 逻辑运算</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x==y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 求和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;求和：&#x27;</span>,y.<span class=\"built_in\">sum</span>())</span><br></pre></td></tr></table></figure>\n\n<pre><code>按元素加法： tensor([0, 2, 4, 6])\n按元素减法： tensor([0, 0, 0, 0])\n按元素乘法： tensor([0, 1, 4, 9])\n按元素除法： tensor([nan, 1., 1., 1.])\n按元素幂运算： tensor([ 1,  1,  4, 27])\n按元素开方： tensor([0.0000, 1.0000, 1.4142, 1.7321])\n求幂运算： tensor([ 1.0000,  2.7183,  7.3891, 20.0855])\n沿行合并： tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]])\n沿列合并： tensor([[0., 0., 0., 0., 1., 1., 1., 1.],\n        [0., 0., 0., 0., 1., 1., 1., 1.],\n        [0., 0., 0., 0., 1., 1., 1., 1.]])\ntensor([[False, False, False, False],\n        [False, False, False, False],\n        [False, False, False, False]])\n求和： tensor(12.)\n</code></pre>\n<h2 id=\"1-3-广播机制\"><a href=\"#1-3-广播机制\" class=\"headerlink\" title=\"1.3 广播机制\"></a>1.3 广播机制</h2><ul>\n<li>对两个形状不同的张量按元素运算时，可能会触发广播机制：先适当复制元素使这两个张量形状相同后再按元素运算</li>\n</ul>\n<ol>\n<li>如果两个张量的维度数不同，可以在较小的张量的形状前面补1，直到两者的维度数相同。</li>\n<li>如果两个张量在某个维度上的大小不同，但其中一个张量在该维度上的大小为1，那么可以通过在该维度上重复扩展该张量，使得两个张量在该维度上的大小相同。</li>\n<li>如果两个张量在某个维度上的大小都不为1，且大小不同，那么会发生形状不匹配，导致无法进行广播</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=torch.arange(<span class=\"number\">3</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">b=torch.arange(<span class=\"number\">2</span>).reshape(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a:&#x27;</span>,a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b:&#x27;</span>,b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;a+b:&#x27;</span>,a+b) <span class=\"comment\">#通常沿着长度为1的维度进行广播</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>a: tensor([[0],\n        [1],\n        [2]])\nb: tensor([[0, 1]])\na+b: tensor([[0, 1],\n        [1, 2],\n        [2, 3]])\n</code></pre>\n<h2 id=\"1-4-索引和切片\"><a href=\"#1-4-索引和切片\" class=\"headerlink\" title=\"1.4 索引和切片\"></a>1.4 索引和切片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x:&#x27;</span>,x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[-1]:&#x27;</span>,x[-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[1:3]:&#x27;</span>,x[<span class=\"number\">1</span>:<span class=\"number\">3</span>]) <span class=\"comment\">#选择第2和第3个元素</span></span><br><span class=\"line\">x[<span class=\"number\">1</span>,<span class=\"number\">2</span>]=<span class=\"number\">9</span> <span class=\"comment\"># 修改元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[1,2]=9后 x:&#x27;</span>,x)</span><br><span class=\"line\">x[<span class=\"number\">0</span>:<span class=\"number\">2</span>,:]=<span class=\"number\">12</span> <span class=\"comment\"># 修改一行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x[0:2,:]=12后 x:&#x27;</span>,x)</span><br></pre></td></tr></table></figure>\n\n<pre><code>x: tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\nx[-1]: tensor([0., 0., 0., 0.])\nx[1:3]: tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\nx[1,2]=9后 x: tensor([[0., 0., 0., 0.],\n        [0., 0., 9., 0.],\n        [0., 0., 0., 0.]])\nx[0:2,:]=12后 x: tensor([[12., 12., 12., 12.],\n        [12., 12., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\n</code></pre>\n<h2 id=\"1-5-节省内存\"><a href=\"#1-5-节省内存\" class=\"headerlink\" title=\"1.5 节省内存\"></a>1.5 节省内存</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z=torch.zeros(<span class=\"number\">1</span>)</span><br><span class=\"line\">before=<span class=\"built_in\">id</span>(z)</span><br><span class=\"line\">z=z+x <span class=\"comment\">#对于这种类似列表的数据结构，加号会导致新的内存分配</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;z:&#x27;</span>,z)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(z)==before:&#x27;</span>,<span class=\"built_in\">id</span>(z)==before) <span class=\"comment\"># False，说明z指向了新的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">z=torch.zeros(<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\">#使用如下操作可以避免新的内存分配，但是无法广播，所以这里要求x和z的形状一致</span></span><br><span class=\"line\">before=<span class=\"built_in\">id</span>(z)</span><br><span class=\"line\">z+=x <span class=\"comment\"># +=不会导致新的内存分配</span></span><br><span class=\"line\">z[:]=x+z <span class=\"comment\"># 也不会导致新的内存分配</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(z)==before:&#x27;</span>,<span class=\"built_in\">id</span>(z)==before) <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>z: tensor([[12., 12., 12., 12.],\n        [12., 12., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\nid(z)==before: False\nid(z)==before: True\n</code></pre>\n<h2 id=\"1-6-转换为其他python对象\"><a href=\"#1-6-转换为其他python对象\" class=\"headerlink\" title=\"1.6 转换为其他python对象\"></a>1.6 转换为其他python对象</h2><ul>\n<li>tensor与numpy数组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=x.numpy() <span class=\"comment\"># 将张量转换为numpy数组</span></span><br><span class=\"line\">B=torch.tensor(A) <span class=\"comment\"># 将numpy数组转换为张量</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A,B,sep=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">A[<span class=\"number\">1</span>,<span class=\"number\">1</span>]=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A,B,x,sep=<span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"comment\">#A与X共享内存</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>[[12. 12. 12. 12.]\n [12.  3. 12. 12.]\n [ 0.  0.  0.  0.]]\ntensor([[12., 12., 12., 12.],\n        [12.,  3., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\n[[12. 12. 12. 12.]\n [12.  3. 12. 12.]\n [ 0.  0.  0.  0.]]\ntensor([[12., 12., 12., 12.],\n        [12.,  3., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\ntensor([[12., 12., 12., 12.],\n        [12.,  3., 12., 12.],\n        [ 0.,  0.,  0.,  0.]])\n</code></pre>\n<ul>\n<li>张量转为python标量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=torch.tensor([<span class=\"number\">1.3</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#由于pytorch中小数用32位，python中用64位；尝试输出.20f就能发现精确度问题</span></span><br><span class=\"line\"><span class=\"comment\">#由于舍入（四舍五入到最接近的偶数），1.3在pytorch中表示是1.299多，而在python中是1.300多</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.item()) <span class=\"comment\">#使用item函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(a)) <span class=\"comment\">#python内置函数</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([1.3000])\n1.2999999523162842\n1.2999999523162842\n</code></pre>"},{"title":"2. pytorch数据预处理","date":"2023-11-27T06:00:00.000Z","comment":false,"toc":true,"_content":"# \n<!--more-->\n\n# 2. pytorch数据预处理\n- 主要通过pandas预处理\n\n## 2.1 读取数据集\n\n\n```python\n# 1. 先自己准备一个数据集\nimport os\nos.makedirs(os.path.join('..','data'),exist_ok=True)\ndata_file=os.path.join('..','data','house_tiny.csv')\nwith open(data_file,'w') as f:\n    f.write('NumRooms, Alley, Price\\n') #列名\n    f.write('NA,Pave, 127500\\n') #每行表示一个数据样本\n    f.write('2,NA, 106000\\n')\n    f.write('4,NA, 178100\\n')\n    f.write('NA,NA, 14000\\n')\n\n# 2. 读取数据集\nimport pandas as pd\ndata=pd.read_csv(data_file)\nprint(data)\n```\n\n       NumRooms  Alley   Price\n    0       NaN   Pave  127500\n    1       2.0    NaN  106000\n    2       4.0    NaN  178100\n    3       NaN    NaN   14000\n    \n\n## 2.2 缺失值处理\n- 删除\n- 插值\n\n### 2.2.1 数值类型\n\n\n```python\n# 1. 位置索引iloc将data分为输入与输出\ninputs=data.iloc[:,0:2] #前两列作为输入\noutputs=data.iloc[:,2] #第三列作为输出\n\n# 2. 用每一列的均值替换空值\ninputs=inputs.fillna(inputs.mean())\nprint(inputs)\n```\n\n       NumRooms  Alley\n    0       3.0   Pave\n    1       2.0    NaN\n    2       4.0    NaN\n    3       3.0    NaN\n    \n\n### 2.2.2 类别类型或离散值\n- 将NaN视为一个类别，根据这一列类别的个数分出n列，每一列代表一个类别，如果该行的值为该列的类别，则为1，否则为0\n\n\n```python\ninputs=pd.get_dummies(inputs, dummy_na=True)\nprint(inputs)\n```\n\n       NumRooms   Alley_Pave   Alley_nan\n    0       3.0            1           0\n    1       2.0            0           1\n    2       4.0            0           1\n    3       3.0            0           1\n    \n\n## 2.3 转换为张量\n- torch.tensor()\n\n\n```python\nimport torch\nx=torch.tensor(inputs.to_numpy(dtype=float))\ny=torch.tensor(outputs.to_numpy(dtype=float))\nx,y\n```\n\n\n\n\n    (tensor([[3., 1., 0.],\n             [2., 0., 1.],\n             [4., 0., 1.],\n             [3., 0., 1.]], dtype=torch.float64),\n     tensor([127500., 106000., 178100.,  14000.], dtype=torch.float64))\n\n\n\n## 练习\n- 1. 创建一个更多行和列的数据集\n\n\n\n```python\nimport os\nos.makedirs(os.path.join('..','data'),exist_ok=True)\ndata_file=os.path.join('..','data','house_tiny.csv')\nwith open(data_file, 'w') as f:\n    f.write('NumRooms, Alley, Price, test\\n') # 列名\n    f.write('NA, Pave, 127500, 1\\n') # 每行表示一个数据样本\n    f.write('2, NA, 106000, 0\\n')\n    f.write('4, NA, 178100, 0\\n')\n    f.write('NA, NA, 140000, 1\\n')\n    f.write('2, Pave, 127500, 0\\n')\n\n#读取数据集\nimport pandas as pd\nprint(pd.read_csv(data_file))\n```\n\n       NumRooms  Alley   Price   test\n    0       NaN   Pave  127500      1\n    1       2.0     NA  106000      0\n    2       4.0     NA  178100      0\n    3       NaN     NA  140000      1\n    4       2.0   Pave  127500      0\n    \n\n- 2. 删除缺失值最多的列\n\n\n```python\n#删除缺失值最多的列\nimport pandas as pd\ndata=pd.read_csv(data_file)\n\n#计算每一列的缺失值个数\nmissing=data.isnull().sum() #按列求和\nprint(missing)\ncolumn=missing.idxmax() #返回缺失值最多的列名\nprint(column)\ndata=data.drop(columns=[column])\nprint(data)\n\n#保存处理后的数据集\ndata.to_csv(data_file,index=False) #index=False表示不保存行索引\n```\n\n    NumRooms    2\n     Alley      0\n     Price      0\n     test       0\n    dtype: int64\n    NumRooms\n       Alley   Price   test\n    0   Pave  127500      1\n    1     NA  106000      0\n    2     NA  178100      0\n    3     NA  140000      1\n    4   Pave  127500      0\n    \n\n- 3. 将处理后的数据集转换为张量\n\n\n```python\n#将数据集转换为张量格式\nimport torch\nimport os\ndata_file=os.path.join('..','data','house_tiny.csv')\ndata=pd.read_csv(data_file)\n#输出data的shape\nprint(data,data.shape,sep='\\n')\n\n#将字符串类型进行one-hot编码\ndata=pd.get_dummies(data,dummy_na=True) #dummy_na=True表示将缺失值也当作合法的特征值并为其创建指示特征\nprint(data)\n#将dataframe格式转换为张量格式\ndata=torch.tensor(data.to_numpy(dtype=float))\nprint(data)\n```\n\n       Alley   Price   test\n    0   Pave  127500      1\n    1     NA  106000      0\n    2     NA  178100      0\n    3     NA  140000      1\n    4   Pave  127500      0\n    (5, 3)\n        Price   test   Alley_ NA   Alley_ Pave   Alley_nan\n    0  127500      1           0             1           0\n    1  106000      0           1             0           0\n    2  178100      0           1             0           0\n    3  140000      1           1             0           0\n    4  127500      0           0             1           0\n    tensor([[1.2750e+05, 1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00],\n            [1.0600e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n            [1.7810e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n            [1.4000e+05, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n            [1.2750e+05, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00]],\n           dtype=torch.float64)\n    \n","source":"_posts/deeplearning/code/pytorch/1_prepare/2_preprocessing.md","raw":"---\ntitle: 2. pytorch数据预处理\ndate: 2023-11-27 14:00:00\ntags: [深度学习,机器学习,pytorch,数据预处理]\ncategories: [深度学习]\ncomment: false\ntoc: true\n---\n# \n<!--more-->\n\n# 2. pytorch数据预处理\n- 主要通过pandas预处理\n\n## 2.1 读取数据集\n\n\n```python\n# 1. 先自己准备一个数据集\nimport os\nos.makedirs(os.path.join('..','data'),exist_ok=True)\ndata_file=os.path.join('..','data','house_tiny.csv')\nwith open(data_file,'w') as f:\n    f.write('NumRooms, Alley, Price\\n') #列名\n    f.write('NA,Pave, 127500\\n') #每行表示一个数据样本\n    f.write('2,NA, 106000\\n')\n    f.write('4,NA, 178100\\n')\n    f.write('NA,NA, 14000\\n')\n\n# 2. 读取数据集\nimport pandas as pd\ndata=pd.read_csv(data_file)\nprint(data)\n```\n\n       NumRooms  Alley   Price\n    0       NaN   Pave  127500\n    1       2.0    NaN  106000\n    2       4.0    NaN  178100\n    3       NaN    NaN   14000\n    \n\n## 2.2 缺失值处理\n- 删除\n- 插值\n\n### 2.2.1 数值类型\n\n\n```python\n# 1. 位置索引iloc将data分为输入与输出\ninputs=data.iloc[:,0:2] #前两列作为输入\noutputs=data.iloc[:,2] #第三列作为输出\n\n# 2. 用每一列的均值替换空值\ninputs=inputs.fillna(inputs.mean())\nprint(inputs)\n```\n\n       NumRooms  Alley\n    0       3.0   Pave\n    1       2.0    NaN\n    2       4.0    NaN\n    3       3.0    NaN\n    \n\n### 2.2.2 类别类型或离散值\n- 将NaN视为一个类别，根据这一列类别的个数分出n列，每一列代表一个类别，如果该行的值为该列的类别，则为1，否则为0\n\n\n```python\ninputs=pd.get_dummies(inputs, dummy_na=True)\nprint(inputs)\n```\n\n       NumRooms   Alley_Pave   Alley_nan\n    0       3.0            1           0\n    1       2.0            0           1\n    2       4.0            0           1\n    3       3.0            0           1\n    \n\n## 2.3 转换为张量\n- torch.tensor()\n\n\n```python\nimport torch\nx=torch.tensor(inputs.to_numpy(dtype=float))\ny=torch.tensor(outputs.to_numpy(dtype=float))\nx,y\n```\n\n\n\n\n    (tensor([[3., 1., 0.],\n             [2., 0., 1.],\n             [4., 0., 1.],\n             [3., 0., 1.]], dtype=torch.float64),\n     tensor([127500., 106000., 178100.,  14000.], dtype=torch.float64))\n\n\n\n## 练习\n- 1. 创建一个更多行和列的数据集\n\n\n\n```python\nimport os\nos.makedirs(os.path.join('..','data'),exist_ok=True)\ndata_file=os.path.join('..','data','house_tiny.csv')\nwith open(data_file, 'w') as f:\n    f.write('NumRooms, Alley, Price, test\\n') # 列名\n    f.write('NA, Pave, 127500, 1\\n') # 每行表示一个数据样本\n    f.write('2, NA, 106000, 0\\n')\n    f.write('4, NA, 178100, 0\\n')\n    f.write('NA, NA, 140000, 1\\n')\n    f.write('2, Pave, 127500, 0\\n')\n\n#读取数据集\nimport pandas as pd\nprint(pd.read_csv(data_file))\n```\n\n       NumRooms  Alley   Price   test\n    0       NaN   Pave  127500      1\n    1       2.0     NA  106000      0\n    2       4.0     NA  178100      0\n    3       NaN     NA  140000      1\n    4       2.0   Pave  127500      0\n    \n\n- 2. 删除缺失值最多的列\n\n\n```python\n#删除缺失值最多的列\nimport pandas as pd\ndata=pd.read_csv(data_file)\n\n#计算每一列的缺失值个数\nmissing=data.isnull().sum() #按列求和\nprint(missing)\ncolumn=missing.idxmax() #返回缺失值最多的列名\nprint(column)\ndata=data.drop(columns=[column])\nprint(data)\n\n#保存处理后的数据集\ndata.to_csv(data_file,index=False) #index=False表示不保存行索引\n```\n\n    NumRooms    2\n     Alley      0\n     Price      0\n     test       0\n    dtype: int64\n    NumRooms\n       Alley   Price   test\n    0   Pave  127500      1\n    1     NA  106000      0\n    2     NA  178100      0\n    3     NA  140000      1\n    4   Pave  127500      0\n    \n\n- 3. 将处理后的数据集转换为张量\n\n\n```python\n#将数据集转换为张量格式\nimport torch\nimport os\ndata_file=os.path.join('..','data','house_tiny.csv')\ndata=pd.read_csv(data_file)\n#输出data的shape\nprint(data,data.shape,sep='\\n')\n\n#将字符串类型进行one-hot编码\ndata=pd.get_dummies(data,dummy_na=True) #dummy_na=True表示将缺失值也当作合法的特征值并为其创建指示特征\nprint(data)\n#将dataframe格式转换为张量格式\ndata=torch.tensor(data.to_numpy(dtype=float))\nprint(data)\n```\n\n       Alley   Price   test\n    0   Pave  127500      1\n    1     NA  106000      0\n    2     NA  178100      0\n    3     NA  140000      1\n    4   Pave  127500      0\n    (5, 3)\n        Price   test   Alley_ NA   Alley_ Pave   Alley_nan\n    0  127500      1           0             1           0\n    1  106000      0           1             0           0\n    2  178100      0           1             0           0\n    3  140000      1           1             0           0\n    4  127500      0           0             1           0\n    tensor([[1.2750e+05, 1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00],\n            [1.0600e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n            [1.7810e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n            [1.4000e+05, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n            [1.2750e+05, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00]],\n           dtype=torch.float64)\n    \n","slug":"deeplearning/code/pytorch/1_prepare/2_preprocessing","published":1,"updated":"2023-12-28T05:15:06.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls0iclrz006gwovwgj69h2nz","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<h1 id=\"2-pytorch数据预处理\"><a href=\"#2-pytorch数据预处理\" class=\"headerlink\" title=\"2. pytorch数据预处理\"></a>2. pytorch数据预处理</h1><ul>\n<li>主要通过pandas预处理</li>\n</ul>\n<h2 id=\"2-1-读取数据集\"><a href=\"#2-1-读取数据集\" class=\"headerlink\" title=\"2.1 读取数据集\"></a>2.1 读取数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 先自己准备一个数据集</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.makedirs(os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>),exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data_file=os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_file,<span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NumRooms, Alley, Price\\n&#x27;</span>) <span class=\"comment\">#列名</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA,Pave, 127500\\n&#x27;</span>) <span class=\"comment\">#每行表示一个数据样本</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2,NA, 106000\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;4,NA, 178100\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA,NA, 14000\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 读取数据集</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">data=pd.read_csv(data_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms  Alley   Price\n0       NaN   Pave  127500\n1       2.0    NaN  106000\n2       4.0    NaN  178100\n3       NaN    NaN   14000\n</code></pre>\n<h2 id=\"2-2-缺失值处理\"><a href=\"#2-2-缺失值处理\" class=\"headerlink\" title=\"2.2 缺失值处理\"></a>2.2 缺失值处理</h2><ul>\n<li>删除</li>\n<li>插值</li>\n</ul>\n<h3 id=\"2-2-1-数值类型\"><a href=\"#2-2-1-数值类型\" class=\"headerlink\" title=\"2.2.1 数值类型\"></a>2.2.1 数值类型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 位置索引iloc将data分为输入与输出</span></span><br><span class=\"line\">inputs=data.iloc[:,<span class=\"number\">0</span>:<span class=\"number\">2</span>] <span class=\"comment\">#前两列作为输入</span></span><br><span class=\"line\">outputs=data.iloc[:,<span class=\"number\">2</span>] <span class=\"comment\">#第三列作为输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 用每一列的均值替换空值</span></span><br><span class=\"line\">inputs=inputs.fillna(inputs.mean())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(inputs)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms  Alley\n0       3.0   Pave\n1       2.0    NaN\n2       4.0    NaN\n3       3.0    NaN\n</code></pre>\n<h3 id=\"2-2-2-类别类型或离散值\"><a href=\"#2-2-2-类别类型或离散值\" class=\"headerlink\" title=\"2.2.2 类别类型或离散值\"></a>2.2.2 类别类型或离散值</h3><ul>\n<li>将NaN视为一个类别，根据这一列类别的个数分出n列，每一列代表一个类别，如果该行的值为该列的类别，则为1，否则为0</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputs=pd.get_dummies(inputs, dummy_na=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(inputs)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms   Alley_Pave   Alley_nan\n0       3.0            1           0\n1       2.0            0           1\n2       4.0            0           1\n3       3.0            0           1\n</code></pre>\n<h2 id=\"2-3-转换为张量\"><a href=\"#2-3-转换为张量\" class=\"headerlink\" title=\"2.3 转换为张量\"></a>2.3 转换为张量</h2><ul>\n<li>torch.tensor()</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">x=torch.tensor(inputs.to_numpy(dtype=<span class=\"built_in\">float</span>))</span><br><span class=\"line\">y=torch.tensor(outputs.to_numpy(dtype=<span class=\"built_in\">float</span>))</span><br><span class=\"line\">x,y</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>(tensor([[3., 1., 0.],\n         [2., 0., 1.],\n         [4., 0., 1.],\n         [3., 0., 1.]], dtype=torch.float64),\n tensor([127500., 106000., 178100.,  14000.], dtype=torch.float64))\n</code></pre>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><ul>\n<li><ol>\n<li>创建一个更多行和列的数据集</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.makedirs(os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>),exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data_file=os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_file, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NumRooms, Alley, Price, test\\n&#x27;</span>) <span class=\"comment\"># 列名</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA, Pave, 127500, 1\\n&#x27;</span>) <span class=\"comment\"># 每行表示一个数据样本</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2, NA, 106000, 0\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;4, NA, 178100, 0\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA, NA, 140000, 1\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2, Pave, 127500, 0\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取数据集</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pd.read_csv(data_file))</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms  Alley   Price   test\n0       NaN   Pave  127500      1\n1       2.0     NA  106000      0\n2       4.0     NA  178100      0\n3       NaN     NA  140000      1\n4       2.0   Pave  127500      0\n</code></pre>\n<ul>\n<li><ol start=\"2\">\n<li>删除缺失值最多的列</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除缺失值最多的列</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">data=pd.read_csv(data_file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#计算每一列的缺失值个数</span></span><br><span class=\"line\">missing=data.isnull().<span class=\"built_in\">sum</span>() <span class=\"comment\">#按列求和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(missing)</span><br><span class=\"line\">column=missing.idxmax() <span class=\"comment\">#返回缺失值最多的列名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(column)</span><br><span class=\"line\">data=data.drop(columns=[column])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存处理后的数据集</span></span><br><span class=\"line\">data.to_csv(data_file,index=<span class=\"literal\">False</span>) <span class=\"comment\">#index=False表示不保存行索引</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>NumRooms    2\n Alley      0\n Price      0\n test       0\ndtype: int64\nNumRooms\n   Alley   Price   test\n0   Pave  127500      1\n1     NA  106000      0\n2     NA  178100      0\n3     NA  140000      1\n4   Pave  127500      0\n</code></pre>\n<ul>\n<li><ol start=\"3\">\n<li>将处理后的数据集转换为张量</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将数据集转换为张量格式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">data_file=os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\">data=pd.read_csv(data_file)</span><br><span class=\"line\"><span class=\"comment\">#输出data的shape</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data,data.shape,sep=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将字符串类型进行one-hot编码</span></span><br><span class=\"line\">data=pd.get_dummies(data,dummy_na=<span class=\"literal\">True</span>) <span class=\"comment\">#dummy_na=True表示将缺失值也当作合法的特征值并为其创建指示特征</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"><span class=\"comment\">#将dataframe格式转换为张量格式</span></span><br><span class=\"line\">data=torch.tensor(data.to_numpy(dtype=<span class=\"built_in\">float</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   Alley   Price   test\n0   Pave  127500      1\n1     NA  106000      0\n2     NA  178100      0\n3     NA  140000      1\n4   Pave  127500      0\n(5, 3)\n    Price   test   Alley_ NA   Alley_ Pave   Alley_nan\n0  127500      1           0             1           0\n1  106000      0           1             0           0\n2  178100      0           1             0           0\n3  140000      1           1             0           0\n4  127500      0           0             1           0\ntensor([[1.2750e+05, 1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00],\n        [1.0600e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n        [1.7810e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n        [1.4000e+05, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n        [1.2750e+05, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00]],\n       dtype=torch.float64)\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h1 id=\"2-pytorch数据预处理\"><a href=\"#2-pytorch数据预处理\" class=\"headerlink\" title=\"2. pytorch数据预处理\"></a>2. pytorch数据预处理</h1><ul>\n<li>主要通过pandas预处理</li>\n</ul>\n<h2 id=\"2-1-读取数据集\"><a href=\"#2-1-读取数据集\" class=\"headerlink\" title=\"2.1 读取数据集\"></a>2.1 读取数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 先自己准备一个数据集</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.makedirs(os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>),exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data_file=os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_file,<span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NumRooms, Alley, Price\\n&#x27;</span>) <span class=\"comment\">#列名</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA,Pave, 127500\\n&#x27;</span>) <span class=\"comment\">#每行表示一个数据样本</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2,NA, 106000\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;4,NA, 178100\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA,NA, 14000\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 读取数据集</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">data=pd.read_csv(data_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms  Alley   Price\n0       NaN   Pave  127500\n1       2.0    NaN  106000\n2       4.0    NaN  178100\n3       NaN    NaN   14000\n</code></pre>\n<h2 id=\"2-2-缺失值处理\"><a href=\"#2-2-缺失值处理\" class=\"headerlink\" title=\"2.2 缺失值处理\"></a>2.2 缺失值处理</h2><ul>\n<li>删除</li>\n<li>插值</li>\n</ul>\n<h3 id=\"2-2-1-数值类型\"><a href=\"#2-2-1-数值类型\" class=\"headerlink\" title=\"2.2.1 数值类型\"></a>2.2.1 数值类型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 位置索引iloc将data分为输入与输出</span></span><br><span class=\"line\">inputs=data.iloc[:,<span class=\"number\">0</span>:<span class=\"number\">2</span>] <span class=\"comment\">#前两列作为输入</span></span><br><span class=\"line\">outputs=data.iloc[:,<span class=\"number\">2</span>] <span class=\"comment\">#第三列作为输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 用每一列的均值替换空值</span></span><br><span class=\"line\">inputs=inputs.fillna(inputs.mean())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(inputs)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms  Alley\n0       3.0   Pave\n1       2.0    NaN\n2       4.0    NaN\n3       3.0    NaN\n</code></pre>\n<h3 id=\"2-2-2-类别类型或离散值\"><a href=\"#2-2-2-类别类型或离散值\" class=\"headerlink\" title=\"2.2.2 类别类型或离散值\"></a>2.2.2 类别类型或离散值</h3><ul>\n<li>将NaN视为一个类别，根据这一列类别的个数分出n列，每一列代表一个类别，如果该行的值为该列的类别，则为1，否则为0</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputs=pd.get_dummies(inputs, dummy_na=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(inputs)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms   Alley_Pave   Alley_nan\n0       3.0            1           0\n1       2.0            0           1\n2       4.0            0           1\n3       3.0            0           1\n</code></pre>\n<h2 id=\"2-3-转换为张量\"><a href=\"#2-3-转换为张量\" class=\"headerlink\" title=\"2.3 转换为张量\"></a>2.3 转换为张量</h2><ul>\n<li>torch.tensor()</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">x=torch.tensor(inputs.to_numpy(dtype=<span class=\"built_in\">float</span>))</span><br><span class=\"line\">y=torch.tensor(outputs.to_numpy(dtype=<span class=\"built_in\">float</span>))</span><br><span class=\"line\">x,y</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>(tensor([[3., 1., 0.],\n         [2., 0., 1.],\n         [4., 0., 1.],\n         [3., 0., 1.]], dtype=torch.float64),\n tensor([127500., 106000., 178100.,  14000.], dtype=torch.float64))\n</code></pre>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><ul>\n<li><ol>\n<li>创建一个更多行和列的数据集</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.makedirs(os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>),exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data_file=os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_file, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NumRooms, Alley, Price, test\\n&#x27;</span>) <span class=\"comment\"># 列名</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA, Pave, 127500, 1\\n&#x27;</span>) <span class=\"comment\"># 每行表示一个数据样本</span></span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2, NA, 106000, 0\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;4, NA, 178100, 0\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;NA, NA, 140000, 1\\n&#x27;</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;2, Pave, 127500, 0\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取数据集</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pd.read_csv(data_file))</span><br></pre></td></tr></table></figure>\n\n<pre><code>   NumRooms  Alley   Price   test\n0       NaN   Pave  127500      1\n1       2.0     NA  106000      0\n2       4.0     NA  178100      0\n3       NaN     NA  140000      1\n4       2.0   Pave  127500      0\n</code></pre>\n<ul>\n<li><ol start=\"2\">\n<li>删除缺失值最多的列</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#删除缺失值最多的列</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">data=pd.read_csv(data_file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#计算每一列的缺失值个数</span></span><br><span class=\"line\">missing=data.isnull().<span class=\"built_in\">sum</span>() <span class=\"comment\">#按列求和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(missing)</span><br><span class=\"line\">column=missing.idxmax() <span class=\"comment\">#返回缺失值最多的列名</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(column)</span><br><span class=\"line\">data=data.drop(columns=[column])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存处理后的数据集</span></span><br><span class=\"line\">data.to_csv(data_file,index=<span class=\"literal\">False</span>) <span class=\"comment\">#index=False表示不保存行索引</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>NumRooms    2\n Alley      0\n Price      0\n test       0\ndtype: int64\nNumRooms\n   Alley   Price   test\n0   Pave  127500      1\n1     NA  106000      0\n2     NA  178100      0\n3     NA  140000      1\n4   Pave  127500      0\n</code></pre>\n<ul>\n<li><ol start=\"3\">\n<li>将处理后的数据集转换为张量</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将数据集转换为张量格式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">data_file=os.path.join(<span class=\"string\">&#x27;..&#x27;</span>,<span class=\"string\">&#x27;data&#x27;</span>,<span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\">data=pd.read_csv(data_file)</span><br><span class=\"line\"><span class=\"comment\">#输出data的shape</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data,data.shape,sep=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将字符串类型进行one-hot编码</span></span><br><span class=\"line\">data=pd.get_dummies(data,dummy_na=<span class=\"literal\">True</span>) <span class=\"comment\">#dummy_na=True表示将缺失值也当作合法的特征值并为其创建指示特征</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"><span class=\"comment\">#将dataframe格式转换为张量格式</span></span><br><span class=\"line\">data=torch.tensor(data.to_numpy(dtype=<span class=\"built_in\">float</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n\n<pre><code>   Alley   Price   test\n0   Pave  127500      1\n1     NA  106000      0\n2     NA  178100      0\n3     NA  140000      1\n4   Pave  127500      0\n(5, 3)\n    Price   test   Alley_ NA   Alley_ Pave   Alley_nan\n0  127500      1           0             1           0\n1  106000      0           1             0           0\n2  178100      0           1             0           0\n3  140000      1           1             0           0\n4  127500      0           0             1           0\ntensor([[1.2750e+05, 1.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00],\n        [1.0600e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n        [1.7810e+05, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n        [1.4000e+05, 1.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00],\n        [1.2750e+05, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00]],\n       dtype=torch.float64)\n</code></pre>"},{"title":"hexo博客允许显示latex公式","date":"2024-01-29T16:00:00.000Z","comment":true,"toc":true,"_content":"\n#\n\n<!--more-->\n\n- 在yilia主题文件夹下的config文件中设置\n\n  `mathjax: true`\n\n","source":"_posts/hexo/latex.md","raw":"---\ntitle: hexo博客允许显示latex公式\n\ndate: 2024-1-30\n\ntags: [博客]\n\ncategories: [博客,hexo]\n\ncomment: true\n\ntoc: true\n\n\n\n---\n\n#\n\n<!--more-->\n\n- 在yilia主题文件夹下的config文件中设置\n\n  `mathjax: true`\n\n","slug":"hexo/latex","published":1,"updated":"2024-01-30T15:35:38.369Z","_id":"cls0ijcj00001j0vw5ljq05py","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n\n<ul>\n<li><p>在yilia主题文件夹下的config文件中设置</p>\n<p><code>mathjax: true</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li><p>在yilia主题文件夹下的config文件中设置</p>\n<p><code>mathjax: true</code></p>\n</li>\n</ul>"},{"title":"git部署博客源码","date":"2024-01-29T16:00:00.000Z","comment":true,"toc":true,"_content":"\n#\n\n <!--more-->\n\n- 在blog/config文件里面确定了hexo s将博客部署到仓库的main分支，但是部署的是渲染后的代码，如何保存源码进行备份。\n\n\n\n在blog下打开gitbash\n\n```\ngit init \n```\n\n去掉blog/.gitignore文件中这三项：\n\n```\ndb.json,\nThumbs.db\nnode-modules/,\n```\n\n运行\n\n```\ngit add *\ngit commit -m \"first commit\"\n```\n\n创建一个source分支，上传源码（注意此处仓库地址，参考blog/config文件里面的部署部分，是带@符号的那个名字，不是简单的博客地址）\n\n```\n![2](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png)git checkout -b source\ngit remote add github 远程仓库地址\ngit push -u github source\n```\n\n建议将source分支设置成默认分支，防止误删\n\n![](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\1.png)\n\n![](img/hexo/config/1.png)\n\n![](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png)\n\n![](img/hexo/config/2.png)","source":"_posts/hexo/sourcecode.md","raw":"---\ntitle: git部署博客源码\n\ndate: 2024-1-30\n\ntags: [博客]\n\ncategories: [博客,git]\n\ncomment: true\n\ntoc: true\n\n\n---\n\n#\n\n <!--more-->\n\n- 在blog/config文件里面确定了hexo s将博客部署到仓库的main分支，但是部署的是渲染后的代码，如何保存源码进行备份。\n\n\n\n在blog下打开gitbash\n\n```\ngit init \n```\n\n去掉blog/.gitignore文件中这三项：\n\n```\ndb.json,\nThumbs.db\nnode-modules/,\n```\n\n运行\n\n```\ngit add *\ngit commit -m \"first commit\"\n```\n\n创建一个source分支，上传源码（注意此处仓库地址，参考blog/config文件里面的部署部分，是带@符号的那个名字，不是简单的博客地址）\n\n```\n![2](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png)git checkout -b source\ngit remote add github 远程仓库地址\ngit push -u github source\n```\n\n建议将source分支设置成默认分支，防止误删\n\n![](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\1.png)\n\n![](img/hexo/config/1.png)\n\n![](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png)\n\n![](img/hexo/config/2.png)","slug":"hexo/sourcecode","published":1,"updated":"2024-01-30T15:49:37.144Z","_id":"cls0ipjhe0009j0vwf11p68iy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1> <span id=\"more\"></span>\n\n<ul>\n<li>在blog&#x2F;config文件里面确定了hexo s将博客部署到仓库的main分支，但是部署的是渲染后的代码，如何保存源码进行备份。</li>\n</ul>\n<p>在blog下打开gitbash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init </span><br></pre></td></tr></table></figure>\n\n<p>去掉blog&#x2F;.gitignore文件中这三项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.json,</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">node-modules/,</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个source分支，上传源码（注意此处仓库地址，参考blog&#x2F;config文件里面的部署部分，是带@符号的那个名字，不是简单的博客地址）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![2](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png)git checkout -b source</span><br><span class=\"line\">git remote add github 远程仓库地址</span><br><span class=\"line\">git push -u github source</span><br></pre></td></tr></table></figure>\n\n<p>建议将source分支设置成默认分支，防止误删</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\1.png\"></p>\n<p><img src=\"/img/hexo/config/1.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png\"></p>\n<p><img src=\"/img/hexo/config/2.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<ul>\n<li>在blog&#x2F;config文件里面确定了hexo s将博客部署到仓库的main分支，但是部署的是渲染后的代码，如何保存源码进行备份。</li>\n</ul>\n<p>在blog下打开gitbash</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init </span><br></pre></td></tr></table></figure>\n\n<p>去掉blog&#x2F;.gitignore文件中这三项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.json,</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">node-modules/,</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个source分支，上传源码（注意此处仓库地址，参考blog&#x2F;config文件里面的部署部分，是带@符号的那个名字，不是简单的博客地址）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![2](D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png)git checkout -b source</span><br><span class=\"line\">git remote add github 远程仓库地址</span><br><span class=\"line\">git push -u github source</span><br></pre></td></tr></table></figure>\n\n<p>建议将source分支设置成默认分支，防止误删</p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\1.png\"></p>\n<p><img src=\"/img/hexo/config/1.png\"></p>\n<p><img src=\"D:\\blog\\themes\\yilia\\source\\img\\hexo\\config\\2.png\"></p>\n<p><img src=\"/img/hexo/config/2.png\"></p>"},{"title":"3. 线性代数","date":"2024-02-01T06:00:00.000Z","comment":true,"toc":true,"_content":"#\n<!--more-->\n# 3. 线性代数\n## 3.1 标量\n\n\n\n```python\nimport torch\n\nx=torch.tensor(3.0)\n```\n\n## 3.2 向量\n\n\n```python\nx=torch.arange(4)\n\n#1 取值\nprint(x[3])\n\n#2 长度\nprint(len(x))\nprint(x.shape)\n```\n\n    tensor(3)\n    4\n    torch.Size([4])\n    \n\n## 3.3 矩阵\n\n\n\n```python\nA=torch.arange(20).reshape(5,4) #矩阵用大写字母\nprint(A)\n\n#1 转置\nprint(A.T)\n```\n\n    tensor([[ 0,  1,  2,  3],\n            [ 4,  5,  6,  7],\n            [ 8,  9, 10, 11],\n            [12, 13, 14, 15],\n            [16, 17, 18, 19]])\n    tensor([[ 0,  4,  8, 12, 16],\n            [ 1,  5,  9, 13, 17],\n            [ 2,  6, 10, 14, 18],\n            [ 3,  7, 11, 15, 19]])\n    \n\n## 3.4 张量\n\n\n```python\nX= torch.arange(24).reshape(2,3,4)\nX\n```\n\n\n\n\n    tensor([[[ 0,  1,  2,  3],\n             [ 4,  5,  6,  7],\n             [ 8,  9, 10, 11]],\n    \n            [[12, 13, 14, 15],\n             [16, 17, 18, 19],\n             [20, 21, 22, 23]]])\n\n\n\n## 3.5 张量算法的基本性质\n\n\n```python\nA=torch.arange(20,dtype=torch.float32).reshape(5,4)\n\n#1 复制\nB=A.clone()\nprint(A==B)\n\n#2 Hadamard积⊙ (对应位置相乘)\nprint(A*B)\n\n#3 张量+标量（所有元素加上标量）\nprint(A+2)\n\n#4 元素个数\nprint(A.numel())\n```\n\n    tensor([[True, True, True, True],\n            [True, True, True, True],\n            [True, True, True, True],\n            [True, True, True, True],\n            [True, True, True, True]])\n    tensor([[  0.,   1.,   4.,   9.],\n            [ 16.,  25.,  36.,  49.],\n            [ 64.,  81., 100., 121.],\n            [144., 169., 196., 225.],\n            [256., 289., 324., 361.]])\n    tensor([[ 2.,  3.,  4.,  5.],\n            [ 6.,  7.,  8.,  9.],\n            [10., 11., 12., 13.],\n            [14., 15., 16., 17.],\n            [18., 19., 20., 21.]])\n    20\n    \n\n## 3.6 降维\n\n\n```python\nX= torch.arange(4,dtype=torch.float32).reshape(2,2)\n\n#1 按轴求和\nprint(X.sum(axis=0)) #压缩掉第0维\n\n#2 按轴求平均\nprint(X.mean(axis=0))\n\n#3 非降维求和\nsum_X=X.sum(axis=0,keepdims=True)\nprint(sum_X) #还是二维，只是第0维的长度为1\n\n#4 沿某个轴计算A元素的累积总和\nprint(A.cumsum(axis=0))\n```\n\n    tensor([2., 4.])\n    tensor([1., 2.])\n    tensor([[2., 4.]])\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  6.,  8., 10.],\n            [12., 15., 18., 21.],\n            [24., 28., 32., 36.],\n            [40., 45., 50., 55.]])\n    \n\n## 3.7 点积\n- $$<x,y>= x^Ty= \\Sigma^{d}_{i=1}x_iy_i$$\n\n\n```python\nx=y=torch.arange(4,dtype=torch.float32)\nprint(x,y,torch.dot(x,y),sep='\\n')\n```\n\n    tensor([0., 1., 2., 3.])\n    tensor([0., 1., 2., 3.])\n    tensor(14.)\n    \n\n## 3.8 矩阵-向量积\n\n\n```python\nprint(A)\nprint(x)\ntorch.mv(A,x) #输出是【5，1】但是1被压缩\n```\n\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  5.,  6.,  7.],\n            [ 8.,  9., 10., 11.],\n            [12., 13., 14., 15.],\n            [16., 17., 18., 19.]])\n    tensor([0., 1., 2., 3.])\n    \n\n\n\n\n    tensor([ 14.,  38.,  62.,  86., 110.])\n\n\n\n## 3.9 矩阵-矩阵乘法\n\n\n\n```python\nprint(A)\nB=torch.ones(4,3)\ntorch.mm(A,B)\n```\n\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  5.,  6.,  7.],\n            [ 8.,  9., 10., 11.],\n            [12., 13., 14., 15.],\n            [16., 17., 18., 19.]])\n    \n\n\n\n\n    tensor([[ 6.,  6.,  6.],\n            [22., 22., 22.],\n            [38., 38., 38.],\n            [54., 54., 54.],\n            [70., 70., 70.]])\n\n\n\n## 3.10 范数\n- 表示一个向量有多大。这里考虑的大小概念不涉及维度，而是分量的大小。\n### 3.10.1 向量范数\n- 将向量x映射到标量的函数$f$。\n- 向量范数必须满足以下性质：\n    - 1）按常数因子α缩放向量的所有元素，其范数也会按相同常数因子的绝对值缩放：\n    $$f(\\alpha x)=|\\alpha|f(x)$$\n    - 2）三角不等式：\n    $$f(x+y)\\leq f(x)+f(y)$$\n    - 3）非负性：\n    $$f(x)\\geq 0$$\n    - 4）范数最小为0，当且仅当向量全由0组成：\n    $$\\forall i,[x]_i=0 \\Leftrightarrow f(x)=0 $$\n\n### 3.10.2 L2范数\n- 平方和的平方根：\n$$||x||=||x||_2 = \\sqrt{\\sum\\limits_{i=1}^{n}x_i^2}$$\n\n\n```python\nu=torch.tensor([3.0,-4.0])\ntorch.norm(u) #范数\n```\n\n\n\n\n    tensor(5.)\n\n\n\n### 3.10.3 L1范数\n- 绝对值之和\n$$||x||_1 = \\sum\\limits_{i=1}^{n}|x_i|$$\n- 与L2范数相比，L1范数受异常值的影响较小\n\n\n```python\ntorch.abs(u).sum() #L1范数\n```\n\n\n\n\n    tensor(7.)\n\n\n\n### 3.10.4 Lp范数\n$$||x||_p = (\\sum\\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}$$\n\n### 3.10.5 Frobenius范数\n- 矩阵L2范数\n$$||X||_F = \\sqrt{\\sum\\limits_{i=1}^{m}\\sum\\limits_{j=1}^{n}x_{ij}^2}$$\n\n\n```python\ntorch.norm(torch.ones((4,9)))\n```\n\n\n\n\n    tensor(6.)\n\n\n\n- 目标，或许是深度学习算法最重要的组成部分（除了数据），通常被表达为范数。\n## 3.11 练习\n\n\n```python\na=torch.tensor([[1,2,3],[4,5,6]])\nb=a.sum(axis=0)\nc=a.sum(axis=1)\nprint(a.shape,b.shape,c.shape)\n\nprint(a+b) #b->(2)->(1,2)->(2,3)\nprint(a+c) #c->(3)->(1,3)->不匹配\n```\n\n    torch.Size([2, 3]) torch.Size([3]) torch.Size([2])\n    tensor([[ 6,  9, 12],\n            [ 9, 12, 15]])\n    \n\n\n    ---------------------------------------------------------------------------\n\n    RuntimeError                              Traceback (most recent call last)\n\n    Cell In[37], line 7\n          4 print(a.shape,b.shape,c.shape)\n          6 print(a+b) #b->(2)->(1,2)->(2,3)\n    ----> 7 print(a+c) #c->(3)->(1,3)->不匹配\n    \n\n    RuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\n\n","source":"_posts/deeplearning/code/pytorch/1_prepare/3_linearalgebra.md","raw":"---\ntitle: 3. 线性代数\ndate: 2024-2-1 14:00:00\ntags: [深度学习,机器学习,pytorch]\ncategories: [深度学习]\ncomment: true\ntoc: true\n---\n#\n<!--more-->\n# 3. 线性代数\n## 3.1 标量\n\n\n\n```python\nimport torch\n\nx=torch.tensor(3.0)\n```\n\n## 3.2 向量\n\n\n```python\nx=torch.arange(4)\n\n#1 取值\nprint(x[3])\n\n#2 长度\nprint(len(x))\nprint(x.shape)\n```\n\n    tensor(3)\n    4\n    torch.Size([4])\n    \n\n## 3.3 矩阵\n\n\n\n```python\nA=torch.arange(20).reshape(5,4) #矩阵用大写字母\nprint(A)\n\n#1 转置\nprint(A.T)\n```\n\n    tensor([[ 0,  1,  2,  3],\n            [ 4,  5,  6,  7],\n            [ 8,  9, 10, 11],\n            [12, 13, 14, 15],\n            [16, 17, 18, 19]])\n    tensor([[ 0,  4,  8, 12, 16],\n            [ 1,  5,  9, 13, 17],\n            [ 2,  6, 10, 14, 18],\n            [ 3,  7, 11, 15, 19]])\n    \n\n## 3.4 张量\n\n\n```python\nX= torch.arange(24).reshape(2,3,4)\nX\n```\n\n\n\n\n    tensor([[[ 0,  1,  2,  3],\n             [ 4,  5,  6,  7],\n             [ 8,  9, 10, 11]],\n    \n            [[12, 13, 14, 15],\n             [16, 17, 18, 19],\n             [20, 21, 22, 23]]])\n\n\n\n## 3.5 张量算法的基本性质\n\n\n```python\nA=torch.arange(20,dtype=torch.float32).reshape(5,4)\n\n#1 复制\nB=A.clone()\nprint(A==B)\n\n#2 Hadamard积⊙ (对应位置相乘)\nprint(A*B)\n\n#3 张量+标量（所有元素加上标量）\nprint(A+2)\n\n#4 元素个数\nprint(A.numel())\n```\n\n    tensor([[True, True, True, True],\n            [True, True, True, True],\n            [True, True, True, True],\n            [True, True, True, True],\n            [True, True, True, True]])\n    tensor([[  0.,   1.,   4.,   9.],\n            [ 16.,  25.,  36.,  49.],\n            [ 64.,  81., 100., 121.],\n            [144., 169., 196., 225.],\n            [256., 289., 324., 361.]])\n    tensor([[ 2.,  3.,  4.,  5.],\n            [ 6.,  7.,  8.,  9.],\n            [10., 11., 12., 13.],\n            [14., 15., 16., 17.],\n            [18., 19., 20., 21.]])\n    20\n    \n\n## 3.6 降维\n\n\n```python\nX= torch.arange(4,dtype=torch.float32).reshape(2,2)\n\n#1 按轴求和\nprint(X.sum(axis=0)) #压缩掉第0维\n\n#2 按轴求平均\nprint(X.mean(axis=0))\n\n#3 非降维求和\nsum_X=X.sum(axis=0,keepdims=True)\nprint(sum_X) #还是二维，只是第0维的长度为1\n\n#4 沿某个轴计算A元素的累积总和\nprint(A.cumsum(axis=0))\n```\n\n    tensor([2., 4.])\n    tensor([1., 2.])\n    tensor([[2., 4.]])\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  6.,  8., 10.],\n            [12., 15., 18., 21.],\n            [24., 28., 32., 36.],\n            [40., 45., 50., 55.]])\n    \n\n## 3.7 点积\n- $$<x,y>= x^Ty= \\Sigma^{d}_{i=1}x_iy_i$$\n\n\n```python\nx=y=torch.arange(4,dtype=torch.float32)\nprint(x,y,torch.dot(x,y),sep='\\n')\n```\n\n    tensor([0., 1., 2., 3.])\n    tensor([0., 1., 2., 3.])\n    tensor(14.)\n    \n\n## 3.8 矩阵-向量积\n\n\n```python\nprint(A)\nprint(x)\ntorch.mv(A,x) #输出是【5，1】但是1被压缩\n```\n\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  5.,  6.,  7.],\n            [ 8.,  9., 10., 11.],\n            [12., 13., 14., 15.],\n            [16., 17., 18., 19.]])\n    tensor([0., 1., 2., 3.])\n    \n\n\n\n\n    tensor([ 14.,  38.,  62.,  86., 110.])\n\n\n\n## 3.9 矩阵-矩阵乘法\n\n\n\n```python\nprint(A)\nB=torch.ones(4,3)\ntorch.mm(A,B)\n```\n\n    tensor([[ 0.,  1.,  2.,  3.],\n            [ 4.,  5.,  6.,  7.],\n            [ 8.,  9., 10., 11.],\n            [12., 13., 14., 15.],\n            [16., 17., 18., 19.]])\n    \n\n\n\n\n    tensor([[ 6.,  6.,  6.],\n            [22., 22., 22.],\n            [38., 38., 38.],\n            [54., 54., 54.],\n            [70., 70., 70.]])\n\n\n\n## 3.10 范数\n- 表示一个向量有多大。这里考虑的大小概念不涉及维度，而是分量的大小。\n### 3.10.1 向量范数\n- 将向量x映射到标量的函数$f$。\n- 向量范数必须满足以下性质：\n    - 1）按常数因子α缩放向量的所有元素，其范数也会按相同常数因子的绝对值缩放：\n    $$f(\\alpha x)=|\\alpha|f(x)$$\n    - 2）三角不等式：\n    $$f(x+y)\\leq f(x)+f(y)$$\n    - 3）非负性：\n    $$f(x)\\geq 0$$\n    - 4）范数最小为0，当且仅当向量全由0组成：\n    $$\\forall i,[x]_i=0 \\Leftrightarrow f(x)=0 $$\n\n### 3.10.2 L2范数\n- 平方和的平方根：\n$$||x||=||x||_2 = \\sqrt{\\sum\\limits_{i=1}^{n}x_i^2}$$\n\n\n```python\nu=torch.tensor([3.0,-4.0])\ntorch.norm(u) #范数\n```\n\n\n\n\n    tensor(5.)\n\n\n\n### 3.10.3 L1范数\n- 绝对值之和\n$$||x||_1 = \\sum\\limits_{i=1}^{n}|x_i|$$\n- 与L2范数相比，L1范数受异常值的影响较小\n\n\n```python\ntorch.abs(u).sum() #L1范数\n```\n\n\n\n\n    tensor(7.)\n\n\n\n### 3.10.4 Lp范数\n$$||x||_p = (\\sum\\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}$$\n\n### 3.10.5 Frobenius范数\n- 矩阵L2范数\n$$||X||_F = \\sqrt{\\sum\\limits_{i=1}^{m}\\sum\\limits_{j=1}^{n}x_{ij}^2}$$\n\n\n```python\ntorch.norm(torch.ones((4,9)))\n```\n\n\n\n\n    tensor(6.)\n\n\n\n- 目标，或许是深度学习算法最重要的组成部分（除了数据），通常被表达为范数。\n## 3.11 练习\n\n\n```python\na=torch.tensor([[1,2,3],[4,5,6]])\nb=a.sum(axis=0)\nc=a.sum(axis=1)\nprint(a.shape,b.shape,c.shape)\n\nprint(a+b) #b->(2)->(1,2)->(2,3)\nprint(a+c) #c->(3)->(1,3)->不匹配\n```\n\n    torch.Size([2, 3]) torch.Size([3]) torch.Size([2])\n    tensor([[ 6,  9, 12],\n            [ 9, 12, 15]])\n    \n\n\n    ---------------------------------------------------------------------------\n\n    RuntimeError                              Traceback (most recent call last)\n\n    Cell In[37], line 7\n          4 print(a.shape,b.shape,c.shape)\n          6 print(a+b) #b->(2)->(1,2)->(2,3)\n    ----> 7 print(a+c) #c->(3)->(1,3)->不匹配\n    \n\n    RuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\n\n","slug":"deeplearning/code/pytorch/1_prepare/3_linearalgebra","published":1,"updated":"2024-02-01T13:02:42.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls3avc330000p0vw6ax4bt9x","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<h1 id=\"3-线性代数\"><a href=\"#3-线性代数\" class=\"headerlink\" title=\"3. 线性代数\"></a>3. 线性代数</h1><h2 id=\"3-1-标量\"><a href=\"#3-1-标量\" class=\"headerlink\" title=\"3.1 标量\"></a>3.1 标量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\">x=torch.tensor(<span class=\"number\">3.0</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-向量\"><a href=\"#3-2-向量\" class=\"headerlink\" title=\"3.2 向量\"></a>3.2 向量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=torch.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 取值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x[<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 长度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(x))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor(3)\n4\ntorch.Size([4])\n</code></pre>\n<h2 id=\"3-3-矩阵\"><a href=\"#3-3-矩阵\" class=\"headerlink\" title=\"3.3 矩阵\"></a>3.3 矩阵</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>) <span class=\"comment\">#矩阵用大写字母</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 转置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A.T)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11],\n        [12, 13, 14, 15],\n        [16, 17, 18, 19]])\ntensor([[ 0,  4,  8, 12, 16],\n        [ 1,  5,  9, 13, 17],\n        [ 2,  6, 10, 14, 18],\n        [ 3,  7, 11, 15, 19]])\n</code></pre>\n<h2 id=\"3-4-张量\"><a href=\"#3-4-张量\" class=\"headerlink\" title=\"3.4 张量\"></a>3.4 张量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X= torch.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">X</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor([[[ 0,  1,  2,  3],\n         [ 4,  5,  6,  7],\n         [ 8,  9, 10, 11]],\n\n        [[12, 13, 14, 15],\n         [16, 17, 18, 19],\n         [20, 21, 22, 23]]])\n</code></pre>\n<h2 id=\"3-5-张量算法的基本性质\"><a href=\"#3-5-张量算法的基本性质\" class=\"headerlink\" title=\"3.5 张量算法的基本性质\"></a>3.5 张量算法的基本性质</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=torch.arange(<span class=\"number\">20</span>,dtype=torch.float32).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 复制</span></span><br><span class=\"line\">B=A.clone()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A==B)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 Hadamard积⊙ (对应位置相乘)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A*B)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 张量+标量（所有元素加上标量）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A+<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4 元素个数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A.numel())</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True]])\ntensor([[  0.,   1.,   4.,   9.],\n        [ 16.,  25.,  36.,  49.],\n        [ 64.,  81., 100., 121.],\n        [144., 169., 196., 225.],\n        [256., 289., 324., 361.]])\ntensor([[ 2.,  3.,  4.,  5.],\n        [ 6.,  7.,  8.,  9.],\n        [10., 11., 12., 13.],\n        [14., 15., 16., 17.],\n        [18., 19., 20., 21.]])\n20\n</code></pre>\n<h2 id=\"3-6-降维\"><a href=\"#3-6-降维\" class=\"headerlink\" title=\"3.6 降维\"></a>3.6 降维</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X= torch.arange(<span class=\"number\">4</span>,dtype=torch.float32).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 按轴求和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(X.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>)) <span class=\"comment\">#压缩掉第0维</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 按轴求平均</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(X.mean(axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 非降维求和</span></span><br><span class=\"line\">sum_X=X.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>,keepdims=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sum_X) <span class=\"comment\">#还是二维，只是第0维的长度为1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4 沿某个轴计算A元素的累积总和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A.cumsum(axis=<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([2., 4.])\ntensor([1., 2.])\ntensor([[2., 4.]])\ntensor([[ 0.,  1.,  2.,  3.],\n        [ 4.,  6.,  8., 10.],\n        [12., 15., 18., 21.],\n        [24., 28., 32., 36.],\n        [40., 45., 50., 55.]])\n</code></pre>\n<h2 id=\"3-7-点积\"><a href=\"#3-7-点积\" class=\"headerlink\" title=\"3.7 点积\"></a>3.7 点积</h2><ul>\n<li>$$&lt;x,y&gt;&#x3D; x^Ty&#x3D; \\Sigma^{d}_{i&#x3D;1}x_iy_i$$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=y=torch.arange(<span class=\"number\">4</span>,dtype=torch.float32)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x,y,torch.dot(x,y),sep=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 1., 2., 3.])\ntensor([0., 1., 2., 3.])\ntensor(14.)\n</code></pre>\n<h2 id=\"3-8-矩阵-向量积\"><a href=\"#3-8-矩阵-向量积\" class=\"headerlink\" title=\"3.8 矩阵-向量积\"></a>3.8 矩阵-向量积</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">torch.mv(A,x) <span class=\"comment\">#输出是【5，1】但是1被压缩</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[ 0.,  1.,  2.,  3.],\n        [ 4.,  5.,  6.,  7.],\n        [ 8.,  9., 10., 11.],\n        [12., 13., 14., 15.],\n        [16., 17., 18., 19.]])\ntensor([0., 1., 2., 3.])\n\n\n\n\n\ntensor([ 14.,  38.,  62.,  86., 110.])\n</code></pre>\n<h2 id=\"3-9-矩阵-矩阵乘法\"><a href=\"#3-9-矩阵-矩阵乘法\" class=\"headerlink\" title=\"3.9 矩阵-矩阵乘法\"></a>3.9 矩阵-矩阵乘法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">B=torch.ones(<span class=\"number\">4</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">torch.mm(A,B)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[ 0.,  1.,  2.,  3.],\n        [ 4.,  5.,  6.,  7.],\n        [ 8.,  9., 10., 11.],\n        [12., 13., 14., 15.],\n        [16., 17., 18., 19.]])\n\n\n\n\n\ntensor([[ 6.,  6.,  6.],\n        [22., 22., 22.],\n        [38., 38., 38.],\n        [54., 54., 54.],\n        [70., 70., 70.]])\n</code></pre>\n<h2 id=\"3-10-范数\"><a href=\"#3-10-范数\" class=\"headerlink\" title=\"3.10 范数\"></a>3.10 范数</h2><ul>\n<li>表示一个向量有多大。这里考虑的大小概念不涉及维度，而是分量的大小。</li>\n</ul>\n<h3 id=\"3-10-1-向量范数\"><a href=\"#3-10-1-向量范数\" class=\"headerlink\" title=\"3.10.1 向量范数\"></a>3.10.1 向量范数</h3><ul>\n<li>将向量x映射到标量的函数$f$。</li>\n<li>向量范数必须满足以下性质：<ul>\n<li>1）按常数因子α缩放向量的所有元素，其范数也会按相同常数因子的绝对值缩放：<br>  $$f(\\alpha x)&#x3D;|\\alpha|f(x)$$</li>\n<li>2）三角不等式：<br>  $$f(x+y)\\leq f(x)+f(y)$$</li>\n<li>3）非负性：<br>  $$f(x)\\geq 0$$</li>\n<li>4）范数最小为0，当且仅当向量全由0组成：<br>  $$\\forall i,[x]_i&#x3D;0 \\Leftrightarrow f(x)&#x3D;0 $$</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-10-2-L2范数\"><a href=\"#3-10-2-L2范数\" class=\"headerlink\" title=\"3.10.2 L2范数\"></a>3.10.2 L2范数</h3><ul>\n<li>平方和的平方根：<br>$$||x||&#x3D;||x||<em>2 &#x3D; \\sqrt{\\sum\\limits</em>{i&#x3D;1}^{n}x_i^2}$$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u=torch.tensor([<span class=\"number\">3.0</span>,-<span class=\"number\">4.0</span>])</span><br><span class=\"line\">torch.norm(u) <span class=\"comment\">#范数</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(5.)\n</code></pre>\n<h3 id=\"3-10-3-L1范数\"><a href=\"#3-10-3-L1范数\" class=\"headerlink\" title=\"3.10.3 L1范数\"></a>3.10.3 L1范数</h3><ul>\n<li>绝对值之和<br>$$||x||<em>1 &#x3D; \\sum\\limits</em>{i&#x3D;1}^{n}|x_i|$$</li>\n<li>与L2范数相比，L1范数受异常值的影响较小</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.<span class=\"built_in\">abs</span>(u).<span class=\"built_in\">sum</span>() <span class=\"comment\">#L1范数</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(7.)\n</code></pre>\n<h3 id=\"3-10-4-Lp范数\"><a href=\"#3-10-4-Lp范数\" class=\"headerlink\" title=\"3.10.4 Lp范数\"></a>3.10.4 Lp范数</h3><p>$$||x||<em>p &#x3D; (\\sum\\limits</em>{i&#x3D;1}^{n}|x_i|^p)^{\\frac{1}{p}}$$</p>\n<h3 id=\"3-10-5-Frobenius范数\"><a href=\"#3-10-5-Frobenius范数\" class=\"headerlink\" title=\"3.10.5 Frobenius范数\"></a>3.10.5 Frobenius范数</h3><ul>\n<li>矩阵L2范数<br>$$||X||<em>F &#x3D; \\sqrt{\\sum\\limits</em>{i&#x3D;1}^{m}\\sum\\limits_{j&#x3D;1}^{n}x_{ij}^2}$$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.norm(torch.ones((<span class=\"number\">4</span>,<span class=\"number\">9</span>)))</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(6.)\n</code></pre>\n<ul>\n<li>目标，或许是深度学习算法最重要的组成部分（除了数据），通常被表达为范数。</li>\n</ul>\n<h2 id=\"3-11-练习\"><a href=\"#3-11-练习\" class=\"headerlink\" title=\"3.11 练习\"></a>3.11 练习</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=torch.tensor([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">b=a.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">c=a.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.shape,b.shape,c.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+b) <span class=\"comment\">#b-&gt;(2)-&gt;(1,2)-&gt;(2,3)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+c) <span class=\"comment\">#c-&gt;(3)-&gt;(1,3)-&gt;不匹配</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>torch.Size([2, 3]) torch.Size([3]) torch.Size([2])\ntensor([[ 6,  9, 12],\n        [ 9, 12, 15]])\n\n\n\n---------------------------------------------------------------------------\n\nRuntimeError                              Traceback (most recent call last)\n\nCell In[37], line 7\n      4 print(a.shape,b.shape,c.shape)\n      6 print(a+b) #b-&gt;(2)-&gt;(1,2)-&gt;(2,3)\n----&gt; 7 print(a+c) #c-&gt;(3)-&gt;(1,3)-&gt;不匹配\n\n\nRuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h1 id=\"3-线性代数\"><a href=\"#3-线性代数\" class=\"headerlink\" title=\"3. 线性代数\"></a>3. 线性代数</h1><h2 id=\"3-1-标量\"><a href=\"#3-1-标量\" class=\"headerlink\" title=\"3.1 标量\"></a>3.1 标量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\">x=torch.tensor(<span class=\"number\">3.0</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-向量\"><a href=\"#3-2-向量\" class=\"headerlink\" title=\"3.2 向量\"></a>3.2 向量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=torch.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 取值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x[<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 长度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(x))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor(3)\n4\ntorch.Size([4])\n</code></pre>\n<h2 id=\"3-3-矩阵\"><a href=\"#3-3-矩阵\" class=\"headerlink\" title=\"3.3 矩阵\"></a>3.3 矩阵</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>) <span class=\"comment\">#矩阵用大写字母</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 转置</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A.T)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11],\n        [12, 13, 14, 15],\n        [16, 17, 18, 19]])\ntensor([[ 0,  4,  8, 12, 16],\n        [ 1,  5,  9, 13, 17],\n        [ 2,  6, 10, 14, 18],\n        [ 3,  7, 11, 15, 19]])\n</code></pre>\n<h2 id=\"3-4-张量\"><a href=\"#3-4-张量\" class=\"headerlink\" title=\"3.4 张量\"></a>3.4 张量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X= torch.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">X</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor([[[ 0,  1,  2,  3],\n         [ 4,  5,  6,  7],\n         [ 8,  9, 10, 11]],\n\n        [[12, 13, 14, 15],\n         [16, 17, 18, 19],\n         [20, 21, 22, 23]]])\n</code></pre>\n<h2 id=\"3-5-张量算法的基本性质\"><a href=\"#3-5-张量算法的基本性质\" class=\"headerlink\" title=\"3.5 张量算法的基本性质\"></a>3.5 张量算法的基本性质</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A=torch.arange(<span class=\"number\">20</span>,dtype=torch.float32).reshape(<span class=\"number\">5</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 复制</span></span><br><span class=\"line\">B=A.clone()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(A==B)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 Hadamard积⊙ (对应位置相乘)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A*B)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 张量+标量（所有元素加上标量）</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A+<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4 元素个数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A.numel())</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True]])\ntensor([[  0.,   1.,   4.,   9.],\n        [ 16.,  25.,  36.,  49.],\n        [ 64.,  81., 100., 121.],\n        [144., 169., 196., 225.],\n        [256., 289., 324., 361.]])\ntensor([[ 2.,  3.,  4.,  5.],\n        [ 6.,  7.,  8.,  9.],\n        [10., 11., 12., 13.],\n        [14., 15., 16., 17.],\n        [18., 19., 20., 21.]])\n20\n</code></pre>\n<h2 id=\"3-6-降维\"><a href=\"#3-6-降维\" class=\"headerlink\" title=\"3.6 降维\"></a>3.6 降维</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X= torch.arange(<span class=\"number\">4</span>,dtype=torch.float32).reshape(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 按轴求和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(X.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>)) <span class=\"comment\">#压缩掉第0维</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 按轴求平均</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(X.mean(axis=<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 非降维求和</span></span><br><span class=\"line\">sum_X=X.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>,keepdims=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sum_X) <span class=\"comment\">#还是二维，只是第0维的长度为1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4 沿某个轴计算A元素的累积总和</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A.cumsum(axis=<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([2., 4.])\ntensor([1., 2.])\ntensor([[2., 4.]])\ntensor([[ 0.,  1.,  2.,  3.],\n        [ 4.,  6.,  8., 10.],\n        [12., 15., 18., 21.],\n        [24., 28., 32., 36.],\n        [40., 45., 50., 55.]])\n</code></pre>\n<h2 id=\"3-7-点积\"><a href=\"#3-7-点积\" class=\"headerlink\" title=\"3.7 点积\"></a>3.7 点积</h2><ul>\n<li>$$&lt;x,y&gt;&#x3D; x^Ty&#x3D; \\Sigma^{d}_{i&#x3D;1}x_iy_i$$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=y=torch.arange(<span class=\"number\">4</span>,dtype=torch.float32)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x,y,torch.dot(x,y),sep=<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 1., 2., 3.])\ntensor([0., 1., 2., 3.])\ntensor(14.)\n</code></pre>\n<h2 id=\"3-8-矩阵-向量积\"><a href=\"#3-8-矩阵-向量积\" class=\"headerlink\" title=\"3.8 矩阵-向量积\"></a>3.8 矩阵-向量积</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">torch.mv(A,x) <span class=\"comment\">#输出是【5，1】但是1被压缩</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[ 0.,  1.,  2.,  3.],\n        [ 4.,  5.,  6.,  7.],\n        [ 8.,  9., 10., 11.],\n        [12., 13., 14., 15.],\n        [16., 17., 18., 19.]])\ntensor([0., 1., 2., 3.])\n\n\n\n\n\ntensor([ 14.,  38.,  62.,  86., 110.])\n</code></pre>\n<h2 id=\"3-9-矩阵-矩阵乘法\"><a href=\"#3-9-矩阵-矩阵乘法\" class=\"headerlink\" title=\"3.9 矩阵-矩阵乘法\"></a>3.9 矩阵-矩阵乘法</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\">B=torch.ones(<span class=\"number\">4</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">torch.mm(A,B)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([[ 0.,  1.,  2.,  3.],\n        [ 4.,  5.,  6.,  7.],\n        [ 8.,  9., 10., 11.],\n        [12., 13., 14., 15.],\n        [16., 17., 18., 19.]])\n\n\n\n\n\ntensor([[ 6.,  6.,  6.],\n        [22., 22., 22.],\n        [38., 38., 38.],\n        [54., 54., 54.],\n        [70., 70., 70.]])\n</code></pre>\n<h2 id=\"3-10-范数\"><a href=\"#3-10-范数\" class=\"headerlink\" title=\"3.10 范数\"></a>3.10 范数</h2><ul>\n<li>表示一个向量有多大。这里考虑的大小概念不涉及维度，而是分量的大小。</li>\n</ul>\n<h3 id=\"3-10-1-向量范数\"><a href=\"#3-10-1-向量范数\" class=\"headerlink\" title=\"3.10.1 向量范数\"></a>3.10.1 向量范数</h3><ul>\n<li>将向量x映射到标量的函数$f$。</li>\n<li>向量范数必须满足以下性质：<ul>\n<li>1）按常数因子α缩放向量的所有元素，其范数也会按相同常数因子的绝对值缩放：<br>  $$f(\\alpha x)&#x3D;|\\alpha|f(x)$$</li>\n<li>2）三角不等式：<br>  $$f(x+y)\\leq f(x)+f(y)$$</li>\n<li>3）非负性：<br>  $$f(x)\\geq 0$$</li>\n<li>4）范数最小为0，当且仅当向量全由0组成：<br>  $$\\forall i,[x]_i&#x3D;0 \\Leftrightarrow f(x)&#x3D;0 $$</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-10-2-L2范数\"><a href=\"#3-10-2-L2范数\" class=\"headerlink\" title=\"3.10.2 L2范数\"></a>3.10.2 L2范数</h3><ul>\n<li>平方和的平方根：<br>$$||x||&#x3D;||x||<em>2 &#x3D; \\sqrt{\\sum\\limits</em>{i&#x3D;1}^{n}x_i^2}$$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u=torch.tensor([<span class=\"number\">3.0</span>,-<span class=\"number\">4.0</span>])</span><br><span class=\"line\">torch.norm(u) <span class=\"comment\">#范数</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(5.)\n</code></pre>\n<h3 id=\"3-10-3-L1范数\"><a href=\"#3-10-3-L1范数\" class=\"headerlink\" title=\"3.10.3 L1范数\"></a>3.10.3 L1范数</h3><ul>\n<li>绝对值之和<br>$$||x||<em>1 &#x3D; \\sum\\limits</em>{i&#x3D;1}^{n}|x_i|$$</li>\n<li>与L2范数相比，L1范数受异常值的影响较小</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.<span class=\"built_in\">abs</span>(u).<span class=\"built_in\">sum</span>() <span class=\"comment\">#L1范数</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(7.)\n</code></pre>\n<h3 id=\"3-10-4-Lp范数\"><a href=\"#3-10-4-Lp范数\" class=\"headerlink\" title=\"3.10.4 Lp范数\"></a>3.10.4 Lp范数</h3><p>$$||x||<em>p &#x3D; (\\sum\\limits</em>{i&#x3D;1}^{n}|x_i|^p)^{\\frac{1}{p}}$$</p>\n<h3 id=\"3-10-5-Frobenius范数\"><a href=\"#3-10-5-Frobenius范数\" class=\"headerlink\" title=\"3.10.5 Frobenius范数\"></a>3.10.5 Frobenius范数</h3><ul>\n<li>矩阵L2范数<br>$$||X||<em>F &#x3D; \\sqrt{\\sum\\limits</em>{i&#x3D;1}^{m}\\sum\\limits_{j&#x3D;1}^{n}x_{ij}^2}$$</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.norm(torch.ones((<span class=\"number\">4</span>,<span class=\"number\">9</span>)))</span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(6.)\n</code></pre>\n<ul>\n<li>目标，或许是深度学习算法最重要的组成部分（除了数据），通常被表达为范数。</li>\n</ul>\n<h2 id=\"3-11-练习\"><a href=\"#3-11-练习\" class=\"headerlink\" title=\"3.11 练习\"></a>3.11 练习</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=torch.tensor([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">b=a.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">c=a.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.shape,b.shape,c.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+b) <span class=\"comment\">#b-&gt;(2)-&gt;(1,2)-&gt;(2,3)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+c) <span class=\"comment\">#c-&gt;(3)-&gt;(1,3)-&gt;不匹配</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>torch.Size([2, 3]) torch.Size([3]) torch.Size([2])\ntensor([[ 6,  9, 12],\n        [ 9, 12, 15]])\n\n\n\n---------------------------------------------------------------------------\n\nRuntimeError                              Traceback (most recent call last)\n\nCell In[37], line 7\n      4 print(a.shape,b.shape,c.shape)\n      6 print(a+b) #b-&gt;(2)-&gt;(1,2)-&gt;(2,3)\n----&gt; 7 print(a+c) #c-&gt;(3)-&gt;(1,3)-&gt;不匹配\n\n\nRuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1\n</code></pre>"},{"title":"4. 微积分","date":"2024-02-01T06:00:00.000Z","comment":true,"toc":true,"_content":"#\n<!--more-->\n# 4. 微积分\n- 拟合模型的任务分解为两个关键问题：\n    - 优化（optimization）：用模型拟合观测数据的过程；\n    - 泛化（generalization）：数学原理和实践者的智慧，能够指导我们生成出有效性超出用于训练的数据集本身的模型。\n## 4.1 导数和微分\n- 通常选择对于模型参数可微的损失函数。简而言之，对于每个参数，如果我们把这个参数增加或减少一个无穷小的量，可以知道损失会以多快的速度增加或减少。\n- 导数：$f'(x)=\\lim\\limits_{h\\rightarrow 0}\\frac{f(x+h)-f(x)}{h}=y^\\prime=\\frac{dy}{dx}=\\frac{df}{dx}=\\frac{d}{dx}f(x)=Df(x)=D_x f(x)$\n    - 1)常数相乘法则：$(Cf)^\\prime=C(f^\\prime)$\n    - 2)加法法则：$(f+g)^\\prime=f^\\prime+g^\\prime$   \n    - 3)乘法法则：$(fg)^\\prime=f^\\prime g+fg^\\prime$\n    - 4)除法法则：$(\\frac{f}{g})^\\prime=\\frac{f^\\prime g-fg^\\prime}{g^2}$ \n- 微分：若$f^\\prime(a)$存在，则称$f$在$a$处可微\n\n\n\n```python\n#将图形嵌入到Notebook中 %matplotlib inline\n\nimport os\nos.environ[\"KMP_DUPLICATE_LIB_OK\"]=\"TRUE\"\nfrom IPython.display import set_matplotlib_formats\nimport numpy as np\nimport matplotlib.pyplot as plt\n#from matplotlib_inline import backend_inline\nfrom d2l import torch as d2l\n\n#1 定义一个函数f\ndef f(x):\n    return 3 * x ** 2 - 4 * x\n\n#2 定义f'\ndef numerical_lim(f, x, h):\n    return (f(x + h) - f(x)) / h\n    \n#一些函数\ndef use_svg_display(): #@save\n    \"\"\"使用svg格式在Jupyter中显示绘图\"\"\"\n    set_matplotlib_formats('svg')\ndef set_figsize(figsize=(3.5, 2.5)): #@save\n    \"\"\"设置matplotlib的图表大小\"\"\"\n    use_svg_display()\n    d2l.plt.rcParams['figure.figsize'] = figsize\n#@save\ndef set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend):\n    \"\"\"设置matplotlib的轴\"\"\"\n    axes.set_xlabel(xlabel)\n    axes.set_ylabel(ylabel)\n    axes.set_xscale(xscale)\n    axes.set_yscale(yscale)\n    axes.set_xlim(xlim)\n    axes.set_ylim(ylim)\n    if legend:\n        axes.legend(legend)\n    axes.grid()\n#@save\ndef plot(X, Y=None, xlabel=None, ylabel=None, legend=None, xlim=None,ylim=None, xscale='linear', yscale='linear',fmts=('-', 'm--', 'g-.', 'r:'), figsize=(3.5, 2.5), axes=None):\n    \"\"\"绘制数据点\"\"\"\n    if legend is None:\n        legend = []\n    set_figsize(figsize)\n    axes = axes if axes else d2l.plt.gca()\n    # 如果X有一个轴，输出True\n\n    def has_one_axis(X):\n        return (hasattr(X, \"ndim\") and X.ndim == 1 or isinstance(X, list) and not hasattr(X[0], \"__len__\"))\n    if has_one_axis(X):\n        X = [X]\n    if Y is None:\n        X, Y = [[]] * len(X), X\n    elif has_one_axis(Y):\n        Y = [Y]\n    if len(X) != len(Y):\n        X = X * len(Y)\n    axes.cla()\n    for x, y, fmt in zip(X, Y, fmts):\n        if len(x):\n            axes.plot(x, y, fmt)\n        else:\n            axes.plot(y, fmt)\n    set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)\n\n#3 绘制切线\nx = np.arange(0, 3, 0.1)\nplot(x, [f(x), 2 * x - 3], 'x', 'f(x)', legend=['f(x)', 'Tangent line (x=1)'])\nplt.show()\n```\n\n    C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2373785819.py:22: DeprecationWarning: `set_matplotlib_formats` is deprecated since IPython 7.23, directly use `matplotlib_inline.backend_inline.set_matplotlib_formats()`\n      set_matplotlib_formats('svg')\n    \n\n\n    \n![svg](4_calculus_files/4_calculus_1_1.svg)\n    \n\n\n## 4.2 偏导数\n- 偏导数：$f(x_1,x_2,...,x_n)$关于$x_i$的偏导数：$\\frac{\\partial f}{\\partial x_i}=\\lim\\limits_{h\\rightarrow 0}\\frac{f(x_1,...,x_i+h,...,x_n)-f(x_1,...,x_i,...,x_n)}{h}$\n\n## 4.3 梯度\n- 梯度：$\\nabla_x f(x)=[\\frac{\\partial f(x)}{\\partial x_1},\\frac{\\partial f(x)}{\\partial x_2},...,\\frac{\\partial f(x)}{\\partial x_n}]^T$\n- 一些性质：\n    - $\\forall A\\in R^{m\\times n},\\nabla_x(Ax)=A^T$\n    - $\\forall A\\in R^{m\\times n},\\nabla_x(x^TA)=A$\n    - $\\forall A\\in R^{m\\times n},\\nabla_x(x^TAx)=(A+A^T)x$\n    - $\\nabla_x||x||_F^2=\\nabla_x(x^Tx)=2x$\n\n## 4.4 链式法则\n- $y=f(u_1,u_2,...,u_m),u_i=g_i(x_1,x_2,...,x_n),则\\frac{\\partial y}{\\partial x_i}=\\sum\\limits_{j=1}^m\\frac{\\partial y}{\\partial u_j}\\frac{\\partial u_j}{\\partial x_i}$\n\n## 练习\n- 绘制函数$y=X^3-\\frac{1}{X}$在x=1处的图像\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(x):\n    return x**3 - 1/x\nx=np.arange(0,3,0.1)\nplt.plot(x,f(x))\nplt.plot(x,3*x**2+1/x**2-4)\nplt.show()\n```\n\n    C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:5: RuntimeWarning: divide by zero encountered in divide\n      return x**3 - 1/x\n    C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:8: RuntimeWarning: divide by zero encountered in divide\n      plt.plot(x,3*x**2+1/x**2-4)\n    \n\n\n    \n![svg](4_calculus_files/4_calculus_3_1.svg)\n    \n\n","source":"_posts/deeplearning/code/pytorch/1_prepare/4_calculus.md","raw":"---\ntitle: 4. 微积分\ndate: 2024-2-1 14:00:00\ntags: [深度学习,机器学习,pytorch]\ncategories: [深度学习]\ncomment: true\ntoc: true\n---\n#\n<!--more-->\n# 4. 微积分\n- 拟合模型的任务分解为两个关键问题：\n    - 优化（optimization）：用模型拟合观测数据的过程；\n    - 泛化（generalization）：数学原理和实践者的智慧，能够指导我们生成出有效性超出用于训练的数据集本身的模型。\n## 4.1 导数和微分\n- 通常选择对于模型参数可微的损失函数。简而言之，对于每个参数，如果我们把这个参数增加或减少一个无穷小的量，可以知道损失会以多快的速度增加或减少。\n- 导数：$f'(x)=\\lim\\limits_{h\\rightarrow 0}\\frac{f(x+h)-f(x)}{h}=y^\\prime=\\frac{dy}{dx}=\\frac{df}{dx}=\\frac{d}{dx}f(x)=Df(x)=D_x f(x)$\n    - 1)常数相乘法则：$(Cf)^\\prime=C(f^\\prime)$\n    - 2)加法法则：$(f+g)^\\prime=f^\\prime+g^\\prime$   \n    - 3)乘法法则：$(fg)^\\prime=f^\\prime g+fg^\\prime$\n    - 4)除法法则：$(\\frac{f}{g})^\\prime=\\frac{f^\\prime g-fg^\\prime}{g^2}$ \n- 微分：若$f^\\prime(a)$存在，则称$f$在$a$处可微\n\n\n\n```python\n#将图形嵌入到Notebook中 %matplotlib inline\n\nimport os\nos.environ[\"KMP_DUPLICATE_LIB_OK\"]=\"TRUE\"\nfrom IPython.display import set_matplotlib_formats\nimport numpy as np\nimport matplotlib.pyplot as plt\n#from matplotlib_inline import backend_inline\nfrom d2l import torch as d2l\n\n#1 定义一个函数f\ndef f(x):\n    return 3 * x ** 2 - 4 * x\n\n#2 定义f'\ndef numerical_lim(f, x, h):\n    return (f(x + h) - f(x)) / h\n    \n#一些函数\ndef use_svg_display(): #@save\n    \"\"\"使用svg格式在Jupyter中显示绘图\"\"\"\n    set_matplotlib_formats('svg')\ndef set_figsize(figsize=(3.5, 2.5)): #@save\n    \"\"\"设置matplotlib的图表大小\"\"\"\n    use_svg_display()\n    d2l.plt.rcParams['figure.figsize'] = figsize\n#@save\ndef set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend):\n    \"\"\"设置matplotlib的轴\"\"\"\n    axes.set_xlabel(xlabel)\n    axes.set_ylabel(ylabel)\n    axes.set_xscale(xscale)\n    axes.set_yscale(yscale)\n    axes.set_xlim(xlim)\n    axes.set_ylim(ylim)\n    if legend:\n        axes.legend(legend)\n    axes.grid()\n#@save\ndef plot(X, Y=None, xlabel=None, ylabel=None, legend=None, xlim=None,ylim=None, xscale='linear', yscale='linear',fmts=('-', 'm--', 'g-.', 'r:'), figsize=(3.5, 2.5), axes=None):\n    \"\"\"绘制数据点\"\"\"\n    if legend is None:\n        legend = []\n    set_figsize(figsize)\n    axes = axes if axes else d2l.plt.gca()\n    # 如果X有一个轴，输出True\n\n    def has_one_axis(X):\n        return (hasattr(X, \"ndim\") and X.ndim == 1 or isinstance(X, list) and not hasattr(X[0], \"__len__\"))\n    if has_one_axis(X):\n        X = [X]\n    if Y is None:\n        X, Y = [[]] * len(X), X\n    elif has_one_axis(Y):\n        Y = [Y]\n    if len(X) != len(Y):\n        X = X * len(Y)\n    axes.cla()\n    for x, y, fmt in zip(X, Y, fmts):\n        if len(x):\n            axes.plot(x, y, fmt)\n        else:\n            axes.plot(y, fmt)\n    set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)\n\n#3 绘制切线\nx = np.arange(0, 3, 0.1)\nplot(x, [f(x), 2 * x - 3], 'x', 'f(x)', legend=['f(x)', 'Tangent line (x=1)'])\nplt.show()\n```\n\n    C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2373785819.py:22: DeprecationWarning: `set_matplotlib_formats` is deprecated since IPython 7.23, directly use `matplotlib_inline.backend_inline.set_matplotlib_formats()`\n      set_matplotlib_formats('svg')\n    \n\n\n    \n![svg](4_calculus_files/4_calculus_1_1.svg)\n    \n\n\n## 4.2 偏导数\n- 偏导数：$f(x_1,x_2,...,x_n)$关于$x_i$的偏导数：$\\frac{\\partial f}{\\partial x_i}=\\lim\\limits_{h\\rightarrow 0}\\frac{f(x_1,...,x_i+h,...,x_n)-f(x_1,...,x_i,...,x_n)}{h}$\n\n## 4.3 梯度\n- 梯度：$\\nabla_x f(x)=[\\frac{\\partial f(x)}{\\partial x_1},\\frac{\\partial f(x)}{\\partial x_2},...,\\frac{\\partial f(x)}{\\partial x_n}]^T$\n- 一些性质：\n    - $\\forall A\\in R^{m\\times n},\\nabla_x(Ax)=A^T$\n    - $\\forall A\\in R^{m\\times n},\\nabla_x(x^TA)=A$\n    - $\\forall A\\in R^{m\\times n},\\nabla_x(x^TAx)=(A+A^T)x$\n    - $\\nabla_x||x||_F^2=\\nabla_x(x^Tx)=2x$\n\n## 4.4 链式法则\n- $y=f(u_1,u_2,...,u_m),u_i=g_i(x_1,x_2,...,x_n),则\\frac{\\partial y}{\\partial x_i}=\\sum\\limits_{j=1}^m\\frac{\\partial y}{\\partial u_j}\\frac{\\partial u_j}{\\partial x_i}$\n\n## 练习\n- 绘制函数$y=X^3-\\frac{1}{X}$在x=1处的图像\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(x):\n    return x**3 - 1/x\nx=np.arange(0,3,0.1)\nplt.plot(x,f(x))\nplt.plot(x,3*x**2+1/x**2-4)\nplt.show()\n```\n\n    C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:5: RuntimeWarning: divide by zero encountered in divide\n      return x**3 - 1/x\n    C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:8: RuntimeWarning: divide by zero encountered in divide\n      plt.plot(x,3*x**2+1/x**2-4)\n    \n\n\n    \n![svg](4_calculus_files/4_calculus_3_1.svg)\n    \n\n","slug":"deeplearning/code/pytorch/1_prepare/4_calculus","published":1,"updated":"2024-02-01T13:02:11.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls3avc350001p0vwh3a74au9","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<h1 id=\"4-微积分\"><a href=\"#4-微积分\" class=\"headerlink\" title=\"4. 微积分\"></a>4. 微积分</h1><ul>\n<li>拟合模型的任务分解为两个关键问题：<ul>\n<li>优化（optimization）：用模型拟合观测数据的过程；</li>\n<li>泛化（generalization）：数学原理和实践者的智慧，能够指导我们生成出有效性超出用于训练的数据集本身的模型。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-1-导数和微分\"><a href=\"#4-1-导数和微分\" class=\"headerlink\" title=\"4.1 导数和微分\"></a>4.1 导数和微分</h2><ul>\n<li>通常选择对于模型参数可微的损失函数。简而言之，对于每个参数，如果我们把这个参数增加或减少一个无穷小的量，可以知道损失会以多快的速度增加或减少。</li>\n<li>导数：$f’(x)&#x3D;\\lim\\limits_{h\\rightarrow 0}\\frac{f(x+h)-f(x)}{h}&#x3D;y^\\prime&#x3D;\\frac{dy}{dx}&#x3D;\\frac{df}{dx}&#x3D;\\frac{d}{dx}f(x)&#x3D;Df(x)&#x3D;D_x f(x)$<ul>\n<li>1)常数相乘法则：$(Cf)^\\prime&#x3D;C(f^\\prime)$</li>\n<li>2)加法法则：$(f+g)^\\prime&#x3D;f^\\prime+g^\\prime$   </li>\n<li>3)乘法法则：$(fg)^\\prime&#x3D;f^\\prime g+fg^\\prime$</li>\n<li>4)除法法则：$(\\frac{f}{g})^\\prime&#x3D;\\frac{f^\\prime g-fg^\\prime}{g^2}$</li>\n</ul>\n</li>\n<li>微分：若$f^\\prime(a)$存在，则称$f$在$a$处可微</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将图形嵌入到Notebook中 %matplotlib inline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>]=<span class=\"string\">&quot;TRUE&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> set_matplotlib_formats</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"comment\">#from matplotlib_inline import backend_inline</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 定义一个函数f</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span> * x ** <span class=\"number\">2</span> - <span class=\"number\">4</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 定义f&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">numerical_lim</span>(<span class=\"params\">f, x, h</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f(x + h) - f(x)) / h</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#一些函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">use_svg_display</span>(): <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;使用svg格式在Jupyter中显示绘图&quot;&quot;&quot;</span></span><br><span class=\"line\">    set_matplotlib_formats(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_figsize</span>(<span class=\"params\">figsize=(<span class=\"params\"><span class=\"number\">3.5</span>, <span class=\"number\">2.5</span></span>)</span>): <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;设置matplotlib的图表大小&quot;&quot;&quot;</span></span><br><span class=\"line\">    use_svg_display()</span><br><span class=\"line\">    d2l.plt.rcParams[<span class=\"string\">&#x27;figure.figsize&#x27;</span>] = figsize</span><br><span class=\"line\"><span class=\"comment\">#@save</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_axes</span>(<span class=\"params\">axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;设置matplotlib的轴&quot;&quot;&quot;</span></span><br><span class=\"line\">    axes.set_xlabel(xlabel)</span><br><span class=\"line\">    axes.set_ylabel(ylabel)</span><br><span class=\"line\">    axes.set_xscale(xscale)</span><br><span class=\"line\">    axes.set_yscale(yscale)</span><br><span class=\"line\">    axes.set_xlim(xlim)</span><br><span class=\"line\">    axes.set_ylim(ylim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> legend:</span><br><span class=\"line\">        axes.legend(legend)</span><br><span class=\"line\">    axes.grid()</span><br><span class=\"line\"><span class=\"comment\">#@save</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot</span>(<span class=\"params\">X, Y=<span class=\"literal\">None</span>, xlabel=<span class=\"literal\">None</span>, ylabel=<span class=\"literal\">None</span>, legend=<span class=\"literal\">None</span>, xlim=<span class=\"literal\">None</span>,ylim=<span class=\"literal\">None</span>, xscale=<span class=\"string\">&#x27;linear&#x27;</span>, yscale=<span class=\"string\">&#x27;linear&#x27;</span>,fmts=(<span class=\"params\"><span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;m--&#x27;</span>, <span class=\"string\">&#x27;g-.&#x27;</span>, <span class=\"string\">&#x27;r:&#x27;</span></span>), figsize=(<span class=\"params\"><span class=\"number\">3.5</span>, <span class=\"number\">2.5</span></span>), axes=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;绘制数据点&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> legend <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        legend = []</span><br><span class=\"line\">    set_figsize(figsize)</span><br><span class=\"line\">    axes = axes <span class=\"keyword\">if</span> axes <span class=\"keyword\">else</span> d2l.plt.gca()</span><br><span class=\"line\">    <span class=\"comment\"># 如果X有一个轴，输出True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">has_one_axis</span>(<span class=\"params\">X</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">hasattr</span>(X, <span class=\"string\">&quot;ndim&quot;</span>) <span class=\"keyword\">and</span> X.ndim == <span class=\"number\">1</span> <span class=\"keyword\">or</span> <span class=\"built_in\">isinstance</span>(X, <span class=\"built_in\">list</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(X[<span class=\"number\">0</span>], <span class=\"string\">&quot;__len__&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> has_one_axis(X):</span><br><span class=\"line\">        X = [X]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> Y <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        X, Y = [[]] * <span class=\"built_in\">len</span>(X), X</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> has_one_axis(Y):</span><br><span class=\"line\">        Y = [Y]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(X) != <span class=\"built_in\">len</span>(Y):</span><br><span class=\"line\">        X = X * <span class=\"built_in\">len</span>(Y)</span><br><span class=\"line\">    axes.cla()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x, y, fmt <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(X, Y, fmts):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(x):</span><br><span class=\"line\">            axes.plot(x, y, fmt)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            axes.plot(y, fmt)</span><br><span class=\"line\">    set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 绘制切线</span></span><br><span class=\"line\">x = np.arange(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0.1</span>)</span><br><span class=\"line\">plot(x, [f(x), <span class=\"number\">2</span> * x - <span class=\"number\">3</span>], <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;f(x)&#x27;</span>, legend=[<span class=\"string\">&#x27;f(x)&#x27;</span>, <span class=\"string\">&#x27;Tangent line (x=1)&#x27;</span>])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2373785819.py:22: DeprecationWarning: `set_matplotlib_formats` is deprecated since IPython 7.23, directly use `matplotlib_inline.backend_inline.set_matplotlib_formats()`\n  set_matplotlib_formats(&#39;svg&#39;)\n</code></pre>\n<p><img src=\"/4_calculus_files/4_calculus_1_1.svg\" alt=\"svg\"></p>\n<h2 id=\"4-2-偏导数\"><a href=\"#4-2-偏导数\" class=\"headerlink\" title=\"4.2 偏导数\"></a>4.2 偏导数</h2><ul>\n<li>偏导数：$f(x_1,x_2,…,x_n)$关于$x_i$的偏导数：$\\frac{\\partial f}{\\partial x_i}&#x3D;\\lim\\limits_{h\\rightarrow 0}\\frac{f(x_1,…,x_i+h,…,x_n)-f(x_1,…,x_i,…,x_n)}{h}$</li>\n</ul>\n<h2 id=\"4-3-梯度\"><a href=\"#4-3-梯度\" class=\"headerlink\" title=\"4.3 梯度\"></a>4.3 梯度</h2><ul>\n<li>梯度：$\\nabla_x f(x)&#x3D;[\\frac{\\partial f(x)}{\\partial x_1},\\frac{\\partial f(x)}{\\partial x_2},…,\\frac{\\partial f(x)}{\\partial x_n}]^T$</li>\n<li>一些性质：<ul>\n<li>$\\forall A\\in R^{m\\times n},\\nabla_x(Ax)&#x3D;A^T$</li>\n<li>$\\forall A\\in R^{m\\times n},\\nabla_x(x^TA)&#x3D;A$</li>\n<li>$\\forall A\\in R^{m\\times n},\\nabla_x(x^TAx)&#x3D;(A+A^T)x$</li>\n<li>$\\nabla_x||x||_F^2&#x3D;\\nabla_x(x^Tx)&#x3D;2x$</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-4-链式法则\"><a href=\"#4-4-链式法则\" class=\"headerlink\" title=\"4.4 链式法则\"></a>4.4 链式法则</h2><ul>\n<li>$y&#x3D;f(u_1,u_2,…,u_m),u_i&#x3D;g_i(x_1,x_2,…,x_n),则\\frac{\\partial y}{\\partial x_i}&#x3D;\\sum\\limits_{j&#x3D;1}^m\\frac{\\partial y}{\\partial u_j}\\frac{\\partial u_j}{\\partial x_i}$</li>\n</ul>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><ul>\n<li>绘制函数$y&#x3D;X^3-\\frac{1}{X}$在x&#x3D;1处的图像</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x**<span class=\"number\">3</span> - <span class=\"number\">1</span>/x</span><br><span class=\"line\">x=np.arange(<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">0.1</span>)</span><br><span class=\"line\">plt.plot(x,f(x))</span><br><span class=\"line\">plt.plot(x,<span class=\"number\">3</span>*x**<span class=\"number\">2</span>+<span class=\"number\">1</span>/x**<span class=\"number\">2</span>-<span class=\"number\">4</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:5: RuntimeWarning: divide by zero encountered in divide\n  return x**3 - 1/x\nC:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:8: RuntimeWarning: divide by zero encountered in divide\n  plt.plot(x,3*x**2+1/x**2-4)\n</code></pre>\n<p><img src=\"/4_calculus_files/4_calculus_3_1.svg\" alt=\"svg\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h1 id=\"4-微积分\"><a href=\"#4-微积分\" class=\"headerlink\" title=\"4. 微积分\"></a>4. 微积分</h1><ul>\n<li>拟合模型的任务分解为两个关键问题：<ul>\n<li>优化（optimization）：用模型拟合观测数据的过程；</li>\n<li>泛化（generalization）：数学原理和实践者的智慧，能够指导我们生成出有效性超出用于训练的数据集本身的模型。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-1-导数和微分\"><a href=\"#4-1-导数和微分\" class=\"headerlink\" title=\"4.1 导数和微分\"></a>4.1 导数和微分</h2><ul>\n<li>通常选择对于模型参数可微的损失函数。简而言之，对于每个参数，如果我们把这个参数增加或减少一个无穷小的量，可以知道损失会以多快的速度增加或减少。</li>\n<li>导数：$f’(x)&#x3D;\\lim\\limits_{h\\rightarrow 0}\\frac{f(x+h)-f(x)}{h}&#x3D;y^\\prime&#x3D;\\frac{dy}{dx}&#x3D;\\frac{df}{dx}&#x3D;\\frac{d}{dx}f(x)&#x3D;Df(x)&#x3D;D_x f(x)$<ul>\n<li>1)常数相乘法则：$(Cf)^\\prime&#x3D;C(f^\\prime)$</li>\n<li>2)加法法则：$(f+g)^\\prime&#x3D;f^\\prime+g^\\prime$   </li>\n<li>3)乘法法则：$(fg)^\\prime&#x3D;f^\\prime g+fg^\\prime$</li>\n<li>4)除法法则：$(\\frac{f}{g})^\\prime&#x3D;\\frac{f^\\prime g-fg^\\prime}{g^2}$</li>\n</ul>\n</li>\n<li>微分：若$f^\\prime(a)$存在，则称$f$在$a$处可微</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将图形嵌入到Notebook中 %matplotlib inline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>]=<span class=\"string\">&quot;TRUE&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> set_matplotlib_formats</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"comment\">#from matplotlib_inline import backend_inline</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1 定义一个函数f</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span> * x ** <span class=\"number\">2</span> - <span class=\"number\">4</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 定义f&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">numerical_lim</span>(<span class=\"params\">f, x, h</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (f(x + h) - f(x)) / h</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#一些函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">use_svg_display</span>(): <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;使用svg格式在Jupyter中显示绘图&quot;&quot;&quot;</span></span><br><span class=\"line\">    set_matplotlib_formats(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_figsize</span>(<span class=\"params\">figsize=(<span class=\"params\"><span class=\"number\">3.5</span>, <span class=\"number\">2.5</span></span>)</span>): <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;设置matplotlib的图表大小&quot;&quot;&quot;</span></span><br><span class=\"line\">    use_svg_display()</span><br><span class=\"line\">    d2l.plt.rcParams[<span class=\"string\">&#x27;figure.figsize&#x27;</span>] = figsize</span><br><span class=\"line\"><span class=\"comment\">#@save</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_axes</span>(<span class=\"params\">axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;设置matplotlib的轴&quot;&quot;&quot;</span></span><br><span class=\"line\">    axes.set_xlabel(xlabel)</span><br><span class=\"line\">    axes.set_ylabel(ylabel)</span><br><span class=\"line\">    axes.set_xscale(xscale)</span><br><span class=\"line\">    axes.set_yscale(yscale)</span><br><span class=\"line\">    axes.set_xlim(xlim)</span><br><span class=\"line\">    axes.set_ylim(ylim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> legend:</span><br><span class=\"line\">        axes.legend(legend)</span><br><span class=\"line\">    axes.grid()</span><br><span class=\"line\"><span class=\"comment\">#@save</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot</span>(<span class=\"params\">X, Y=<span class=\"literal\">None</span>, xlabel=<span class=\"literal\">None</span>, ylabel=<span class=\"literal\">None</span>, legend=<span class=\"literal\">None</span>, xlim=<span class=\"literal\">None</span>,ylim=<span class=\"literal\">None</span>, xscale=<span class=\"string\">&#x27;linear&#x27;</span>, yscale=<span class=\"string\">&#x27;linear&#x27;</span>,fmts=(<span class=\"params\"><span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;m--&#x27;</span>, <span class=\"string\">&#x27;g-.&#x27;</span>, <span class=\"string\">&#x27;r:&#x27;</span></span>), figsize=(<span class=\"params\"><span class=\"number\">3.5</span>, <span class=\"number\">2.5</span></span>), axes=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;绘制数据点&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> legend <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        legend = []</span><br><span class=\"line\">    set_figsize(figsize)</span><br><span class=\"line\">    axes = axes <span class=\"keyword\">if</span> axes <span class=\"keyword\">else</span> d2l.plt.gca()</span><br><span class=\"line\">    <span class=\"comment\"># 如果X有一个轴，输出True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">has_one_axis</span>(<span class=\"params\">X</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">hasattr</span>(X, <span class=\"string\">&quot;ndim&quot;</span>) <span class=\"keyword\">and</span> X.ndim == <span class=\"number\">1</span> <span class=\"keyword\">or</span> <span class=\"built_in\">isinstance</span>(X, <span class=\"built_in\">list</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(X[<span class=\"number\">0</span>], <span class=\"string\">&quot;__len__&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> has_one_axis(X):</span><br><span class=\"line\">        X = [X]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> Y <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        X, Y = [[]] * <span class=\"built_in\">len</span>(X), X</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> has_one_axis(Y):</span><br><span class=\"line\">        Y = [Y]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(X) != <span class=\"built_in\">len</span>(Y):</span><br><span class=\"line\">        X = X * <span class=\"built_in\">len</span>(Y)</span><br><span class=\"line\">    axes.cla()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x, y, fmt <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(X, Y, fmts):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(x):</span><br><span class=\"line\">            axes.plot(x, y, fmt)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            axes.plot(y, fmt)</span><br><span class=\"line\">    set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 绘制切线</span></span><br><span class=\"line\">x = np.arange(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0.1</span>)</span><br><span class=\"line\">plot(x, [f(x), <span class=\"number\">2</span> * x - <span class=\"number\">3</span>], <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;f(x)&#x27;</span>, legend=[<span class=\"string\">&#x27;f(x)&#x27;</span>, <span class=\"string\">&#x27;Tangent line (x=1)&#x27;</span>])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2373785819.py:22: DeprecationWarning: `set_matplotlib_formats` is deprecated since IPython 7.23, directly use `matplotlib_inline.backend_inline.set_matplotlib_formats()`\n  set_matplotlib_formats(&#39;svg&#39;)\n</code></pre>\n<p><img src=\"/4_calculus_files/4_calculus_1_1.svg\" alt=\"svg\"></p>\n<h2 id=\"4-2-偏导数\"><a href=\"#4-2-偏导数\" class=\"headerlink\" title=\"4.2 偏导数\"></a>4.2 偏导数</h2><ul>\n<li>偏导数：$f(x_1,x_2,…,x_n)$关于$x_i$的偏导数：$\\frac{\\partial f}{\\partial x_i}&#x3D;\\lim\\limits_{h\\rightarrow 0}\\frac{f(x_1,…,x_i+h,…,x_n)-f(x_1,…,x_i,…,x_n)}{h}$</li>\n</ul>\n<h2 id=\"4-3-梯度\"><a href=\"#4-3-梯度\" class=\"headerlink\" title=\"4.3 梯度\"></a>4.3 梯度</h2><ul>\n<li>梯度：$\\nabla_x f(x)&#x3D;[\\frac{\\partial f(x)}{\\partial x_1},\\frac{\\partial f(x)}{\\partial x_2},…,\\frac{\\partial f(x)}{\\partial x_n}]^T$</li>\n<li>一些性质：<ul>\n<li>$\\forall A\\in R^{m\\times n},\\nabla_x(Ax)&#x3D;A^T$</li>\n<li>$\\forall A\\in R^{m\\times n},\\nabla_x(x^TA)&#x3D;A$</li>\n<li>$\\forall A\\in R^{m\\times n},\\nabla_x(x^TAx)&#x3D;(A+A^T)x$</li>\n<li>$\\nabla_x||x||_F^2&#x3D;\\nabla_x(x^Tx)&#x3D;2x$</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-4-链式法则\"><a href=\"#4-4-链式法则\" class=\"headerlink\" title=\"4.4 链式法则\"></a>4.4 链式法则</h2><ul>\n<li>$y&#x3D;f(u_1,u_2,…,u_m),u_i&#x3D;g_i(x_1,x_2,…,x_n),则\\frac{\\partial y}{\\partial x_i}&#x3D;\\sum\\limits_{j&#x3D;1}^m\\frac{\\partial y}{\\partial u_j}\\frac{\\partial u_j}{\\partial x_i}$</li>\n</ul>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><ul>\n<li>绘制函数$y&#x3D;X^3-\\frac{1}{X}$在x&#x3D;1处的图像</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x**<span class=\"number\">3</span> - <span class=\"number\">1</span>/x</span><br><span class=\"line\">x=np.arange(<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">0.1</span>)</span><br><span class=\"line\">plt.plot(x,f(x))</span><br><span class=\"line\">plt.plot(x,<span class=\"number\">3</span>*x**<span class=\"number\">2</span>+<span class=\"number\">1</span>/x**<span class=\"number\">2</span>-<span class=\"number\">4</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<pre><code>C:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:5: RuntimeWarning: divide by zero encountered in divide\n  return x**3 - 1/x\nC:\\Users\\123\\AppData\\Local\\Temp\\ipykernel_13552\\2157169762.py:8: RuntimeWarning: divide by zero encountered in divide\n  plt.plot(x,3*x**2+1/x**2-4)\n</code></pre>\n<p><img src=\"/4_calculus_files/4_calculus_3_1.svg\" alt=\"svg\"></p>"},{"title":"5. 自动微分","date":"2024-02-01T06:00:00.000Z","comment":true,"toc":true,"_content":"#\n<!--more-->\n# 5. 自动微分\n- 深度学习框架通过自动计算导数，即自动微分（automatic differentiation）来加快求导。根据设计好的模型，系统会构建一个计算图（computational graph），来跟踪计算是哪些数据通过哪些操作组合起来产生输出。自动微分使系统能够随后反向传播梯度。这里，反向传播（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。\n## 5.1 \n- 对函数$y=2\\mathbf{x}^{\\top}\\mathbf{x}$关于列向量$\\mathbf{x}$求导\n\n\n```python\nimport torch\n#1 创建变量x\nx=torch.arange(4.0)\ny=2*torch.dot(x,x)\nprint(x)\n\n#2 存储梯度 （一个标量函数关于向量x的梯度是向量，并且与x具有相同的形状。）\nx.requires_grad_(True) #等价于x=torch.arange(4.0,requires_grad=True)\nprint(x)\n\n#3 计算y\ny=2*torch.dot(x,x) #点积\nprint(y)\n\n#4 反向传播计算梯度\nprint(x.grad) #默认为None\ny.backward() #反向传播\nprint(x.grad) #梯度为4x\n\n#5 阻止跟踪\ny=x.sum() #y=6\ny.backward()\nprint(x.grad) #x的梯度会累加\nx.grad.zero_() #清除梯度后就不会累加了\ny.backward()\nprint(x.grad)\n```\n\n    tensor([0., 1., 2., 3.])\n    tensor([0., 1., 2., 3.], requires_grad=True)\n    tensor(28., grad_fn=<MulBackward0>)\n    None\n    tensor([ 0.,  4.,  8., 12.])\n    tensor([ 1.,  5.,  9., 13.])\n    tensor([1., 1., 1., 1.])\n    \n\n## 5.2 非标量变量的反向传播\n\n\n\n```python\n# 对非标量调用backward需要传入一个gradient参数，该参数指定微分函数关于self的梯度。\n# 本例只想求偏导数的和，所以传递一个1的梯度是合适的\nx.grad.zero_()\ny=x*x #这里y是向量\ny.sum().backward() #这里y.sum()是标量,所以可以调用backward，相当于y.backward(torch.ones(len(x)))\nprint(x.grad)\n\n```\n\n    tensor([0., 2., 4., 6.])\n    \n\n## 5.3 分离计算\n- 将某些计算移动到记录的计算图之外。（作为常数处理）\n    - 假设$y=f(x), z=g(x,y)$。我们想计算z关于x的梯度，但由于某种原因，希望将y视为一个常数，并且只考虑到x在y被计算后发挥的作用。\n\n\n```python\nx.grad.zero_()\ny=x*x\nu=y.detach() #分u相当于一个常数，不需要求梯度\nz=u*x\nz.sum().backward()\nprint(x.grad) #u\n\nx.grad.zero_()\nz=y*x\nz.sum().backward()\nprint(x.grad) #3x^2\n```\n\n    tensor([0., 1., 4., 9.])\n    tensor([ 0.,  3., 12., 27.])\n    \n\n## 5.4 python控制流的梯度计算\n\n\n```python\ndef f(a):\n    b=a*2\n    while b.norm()<1000: #经过while后b=ka\n        b=b*2\n    if b.sum()>0:\n        c=b #c=kb=ka\n    else:\n        c=100*b #c=100kb=100ka\n    return c #ka\na=torch.randn(size=(),requires_grad=True)\nD=f(a) #\nD.backward()\na.grad==D/a #梯度就是k=D/a\n```\n\n\n\n\n    tensor(True)\n\n\n","source":"_posts/deeplearning/code/pytorch/1_prepare/5_autodifferential.md","raw":"---\ntitle: 5. 自动微分\ndate: 2024-2-1 14:00:00\ntags: [深度学习,机器学习,pytorch]\ncategories: [深度学习]\ncomment: true\ntoc: true\n---\n#\n<!--more-->\n# 5. 自动微分\n- 深度学习框架通过自动计算导数，即自动微分（automatic differentiation）来加快求导。根据设计好的模型，系统会构建一个计算图（computational graph），来跟踪计算是哪些数据通过哪些操作组合起来产生输出。自动微分使系统能够随后反向传播梯度。这里，反向传播（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。\n## 5.1 \n- 对函数$y=2\\mathbf{x}^{\\top}\\mathbf{x}$关于列向量$\\mathbf{x}$求导\n\n\n```python\nimport torch\n#1 创建变量x\nx=torch.arange(4.0)\ny=2*torch.dot(x,x)\nprint(x)\n\n#2 存储梯度 （一个标量函数关于向量x的梯度是向量，并且与x具有相同的形状。）\nx.requires_grad_(True) #等价于x=torch.arange(4.0,requires_grad=True)\nprint(x)\n\n#3 计算y\ny=2*torch.dot(x,x) #点积\nprint(y)\n\n#4 反向传播计算梯度\nprint(x.grad) #默认为None\ny.backward() #反向传播\nprint(x.grad) #梯度为4x\n\n#5 阻止跟踪\ny=x.sum() #y=6\ny.backward()\nprint(x.grad) #x的梯度会累加\nx.grad.zero_() #清除梯度后就不会累加了\ny.backward()\nprint(x.grad)\n```\n\n    tensor([0., 1., 2., 3.])\n    tensor([0., 1., 2., 3.], requires_grad=True)\n    tensor(28., grad_fn=<MulBackward0>)\n    None\n    tensor([ 0.,  4.,  8., 12.])\n    tensor([ 1.,  5.,  9., 13.])\n    tensor([1., 1., 1., 1.])\n    \n\n## 5.2 非标量变量的反向传播\n\n\n\n```python\n# 对非标量调用backward需要传入一个gradient参数，该参数指定微分函数关于self的梯度。\n# 本例只想求偏导数的和，所以传递一个1的梯度是合适的\nx.grad.zero_()\ny=x*x #这里y是向量\ny.sum().backward() #这里y.sum()是标量,所以可以调用backward，相当于y.backward(torch.ones(len(x)))\nprint(x.grad)\n\n```\n\n    tensor([0., 2., 4., 6.])\n    \n\n## 5.3 分离计算\n- 将某些计算移动到记录的计算图之外。（作为常数处理）\n    - 假设$y=f(x), z=g(x,y)$。我们想计算z关于x的梯度，但由于某种原因，希望将y视为一个常数，并且只考虑到x在y被计算后发挥的作用。\n\n\n```python\nx.grad.zero_()\ny=x*x\nu=y.detach() #分u相当于一个常数，不需要求梯度\nz=u*x\nz.sum().backward()\nprint(x.grad) #u\n\nx.grad.zero_()\nz=y*x\nz.sum().backward()\nprint(x.grad) #3x^2\n```\n\n    tensor([0., 1., 4., 9.])\n    tensor([ 0.,  3., 12., 27.])\n    \n\n## 5.4 python控制流的梯度计算\n\n\n```python\ndef f(a):\n    b=a*2\n    while b.norm()<1000: #经过while后b=ka\n        b=b*2\n    if b.sum()>0:\n        c=b #c=kb=ka\n    else:\n        c=100*b #c=100kb=100ka\n    return c #ka\na=torch.randn(size=(),requires_grad=True)\nD=f(a) #\nD.backward()\na.grad==D/a #梯度就是k=D/a\n```\n\n\n\n\n    tensor(True)\n\n\n","slug":"deeplearning/code/pytorch/1_prepare/5_autodifferential","published":1,"updated":"2024-02-01T14:15:26.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cls3avc380004p0vw5s3f547v","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><span id=\"more\"></span>\n<h1 id=\"5-自动微分\"><a href=\"#5-自动微分\" class=\"headerlink\" title=\"5. 自动微分\"></a>5. 自动微分</h1><ul>\n<li>深度学习框架通过自动计算导数，即自动微分（automatic differentiation）来加快求导。根据设计好的模型，系统会构建一个计算图（computational graph），来跟踪计算是哪些数据通过哪些操作组合起来产生输出。自动微分使系统能够随后反向传播梯度。这里，反向传播（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。</li>\n</ul>\n<h2 id=\"5-1\"><a href=\"#5-1\" class=\"headerlink\" title=\"5.1\"></a>5.1</h2><ul>\n<li>对函数$y&#x3D;2\\mathbf{x}^{\\top}\\mathbf{x}$关于列向量$\\mathbf{x}$求导</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"comment\">#1 创建变量x</span></span><br><span class=\"line\">x=torch.arange(<span class=\"number\">4.0</span>)</span><br><span class=\"line\">y=<span class=\"number\">2</span>*torch.dot(x,x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 存储梯度 （一个标量函数关于向量x的梯度是向量，并且与x具有相同的形状。）</span></span><br><span class=\"line\">x.requires_grad_(<span class=\"literal\">True</span>) <span class=\"comment\">#等价于x=torch.arange(4.0,requires_grad=True)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 计算y</span></span><br><span class=\"line\">y=<span class=\"number\">2</span>*torch.dot(x,x) <span class=\"comment\">#点积</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4 反向传播计算梯度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#默认为None</span></span><br><span class=\"line\">y.backward() <span class=\"comment\">#反向传播</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#梯度为4x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5 阻止跟踪</span></span><br><span class=\"line\">y=x.<span class=\"built_in\">sum</span>() <span class=\"comment\">#y=6</span></span><br><span class=\"line\">y.backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#x的梯度会累加</span></span><br><span class=\"line\">x.grad.zero_() <span class=\"comment\">#清除梯度后就不会累加了</span></span><br><span class=\"line\">y.backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 1., 2., 3.])\ntensor([0., 1., 2., 3.], requires_grad=True)\ntensor(28., grad_fn=&lt;MulBackward0&gt;)\nNone\ntensor([ 0.,  4.,  8., 12.])\ntensor([ 1.,  5.,  9., 13.])\ntensor([1., 1., 1., 1.])\n</code></pre>\n<h2 id=\"5-2-非标量变量的反向传播\"><a href=\"#5-2-非标量变量的反向传播\" class=\"headerlink\" title=\"5.2 非标量变量的反向传播\"></a>5.2 非标量变量的反向传播</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对非标量调用backward需要传入一个gradient参数，该参数指定微分函数关于self的梯度。</span></span><br><span class=\"line\"><span class=\"comment\"># 本例只想求偏导数的和，所以传递一个1的梯度是合适的</span></span><br><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">y=x*x <span class=\"comment\">#这里y是向量</span></span><br><span class=\"line\">y.<span class=\"built_in\">sum</span>().backward() <span class=\"comment\">#这里y.sum()是标量,所以可以调用backward，相当于y.backward(torch.ones(len(x)))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 2., 4., 6.])\n</code></pre>\n<h2 id=\"5-3-分离计算\"><a href=\"#5-3-分离计算\" class=\"headerlink\" title=\"5.3 分离计算\"></a>5.3 分离计算</h2><ul>\n<li>将某些计算移动到记录的计算图之外。（作为常数处理）<ul>\n<li>假设$y&#x3D;f(x), z&#x3D;g(x,y)$。我们想计算z关于x的梯度，但由于某种原因，希望将y视为一个常数，并且只考虑到x在y被计算后发挥的作用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">y=x*x</span><br><span class=\"line\">u=y.detach() <span class=\"comment\">#分u相当于一个常数，不需要求梯度</span></span><br><span class=\"line\">z=u*x</span><br><span class=\"line\">z.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#u</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">z=y*x</span><br><span class=\"line\">z.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#3x^2</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 1., 4., 9.])\ntensor([ 0.,  3., 12., 27.])\n</code></pre>\n<h2 id=\"5-4-python控制流的梯度计算\"><a href=\"#5-4-python控制流的梯度计算\" class=\"headerlink\" title=\"5.4 python控制流的梯度计算\"></a>5.4 python控制流的梯度计算</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    b=a*<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b.norm()&lt;<span class=\"number\">1000</span>: <span class=\"comment\">#经过while后b=ka</span></span><br><span class=\"line\">        b=b*<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> b.<span class=\"built_in\">sum</span>()&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        c=b <span class=\"comment\">#c=kb=ka</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        c=<span class=\"number\">100</span>*b <span class=\"comment\">#c=100kb=100ka</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c <span class=\"comment\">#ka</span></span><br><span class=\"line\">a=torch.randn(size=(),requires_grad=<span class=\"literal\">True</span>)</span><br><span class=\"line\">D=f(a) <span class=\"comment\">#</span></span><br><span class=\"line\">D.backward()</span><br><span class=\"line\">a.grad==D/a <span class=\"comment\">#梯度就是k=D/a</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(True)\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","more":"<h1 id=\"5-自动微分\"><a href=\"#5-自动微分\" class=\"headerlink\" title=\"5. 自动微分\"></a>5. 自动微分</h1><ul>\n<li>深度学习框架通过自动计算导数，即自动微分（automatic differentiation）来加快求导。根据设计好的模型，系统会构建一个计算图（computational graph），来跟踪计算是哪些数据通过哪些操作组合起来产生输出。自动微分使系统能够随后反向传播梯度。这里，反向传播（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。</li>\n</ul>\n<h2 id=\"5-1\"><a href=\"#5-1\" class=\"headerlink\" title=\"5.1\"></a>5.1</h2><ul>\n<li>对函数$y&#x3D;2\\mathbf{x}^{\\top}\\mathbf{x}$关于列向量$\\mathbf{x}$求导</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"comment\">#1 创建变量x</span></span><br><span class=\"line\">x=torch.arange(<span class=\"number\">4.0</span>)</span><br><span class=\"line\">y=<span class=\"number\">2</span>*torch.dot(x,x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2 存储梯度 （一个标量函数关于向量x的梯度是向量，并且与x具有相同的形状。）</span></span><br><span class=\"line\">x.requires_grad_(<span class=\"literal\">True</span>) <span class=\"comment\">#等价于x=torch.arange(4.0,requires_grad=True)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3 计算y</span></span><br><span class=\"line\">y=<span class=\"number\">2</span>*torch.dot(x,x) <span class=\"comment\">#点积</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4 反向传播计算梯度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#默认为None</span></span><br><span class=\"line\">y.backward() <span class=\"comment\">#反向传播</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#梯度为4x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5 阻止跟踪</span></span><br><span class=\"line\">y=x.<span class=\"built_in\">sum</span>() <span class=\"comment\">#y=6</span></span><br><span class=\"line\">y.backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#x的梯度会累加</span></span><br><span class=\"line\">x.grad.zero_() <span class=\"comment\">#清除梯度后就不会累加了</span></span><br><span class=\"line\">y.backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad)</span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 1., 2., 3.])\ntensor([0., 1., 2., 3.], requires_grad=True)\ntensor(28., grad_fn=&lt;MulBackward0&gt;)\nNone\ntensor([ 0.,  4.,  8., 12.])\ntensor([ 1.,  5.,  9., 13.])\ntensor([1., 1., 1., 1.])\n</code></pre>\n<h2 id=\"5-2-非标量变量的反向传播\"><a href=\"#5-2-非标量变量的反向传播\" class=\"headerlink\" title=\"5.2 非标量变量的反向传播\"></a>5.2 非标量变量的反向传播</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对非标量调用backward需要传入一个gradient参数，该参数指定微分函数关于self的梯度。</span></span><br><span class=\"line\"><span class=\"comment\"># 本例只想求偏导数的和，所以传递一个1的梯度是合适的</span></span><br><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">y=x*x <span class=\"comment\">#这里y是向量</span></span><br><span class=\"line\">y.<span class=\"built_in\">sum</span>().backward() <span class=\"comment\">#这里y.sum()是标量,所以可以调用backward，相当于y.backward(torch.ones(len(x)))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 2., 4., 6.])\n</code></pre>\n<h2 id=\"5-3-分离计算\"><a href=\"#5-3-分离计算\" class=\"headerlink\" title=\"5.3 分离计算\"></a>5.3 分离计算</h2><ul>\n<li>将某些计算移动到记录的计算图之外。（作为常数处理）<ul>\n<li>假设$y&#x3D;f(x), z&#x3D;g(x,y)$。我们想计算z关于x的梯度，但由于某种原因，希望将y视为一个常数，并且只考虑到x在y被计算后发挥的作用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">y=x*x</span><br><span class=\"line\">u=y.detach() <span class=\"comment\">#分u相当于一个常数，不需要求梯度</span></span><br><span class=\"line\">z=u*x</span><br><span class=\"line\">z.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#u</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">z=y*x</span><br><span class=\"line\">z.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x.grad) <span class=\"comment\">#3x^2</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>tensor([0., 1., 4., 9.])\ntensor([ 0.,  3., 12., 27.])\n</code></pre>\n<h2 id=\"5-4-python控制流的梯度计算\"><a href=\"#5-4-python控制流的梯度计算\" class=\"headerlink\" title=\"5.4 python控制流的梯度计算\"></a>5.4 python控制流的梯度计算</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    b=a*<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b.norm()&lt;<span class=\"number\">1000</span>: <span class=\"comment\">#经过while后b=ka</span></span><br><span class=\"line\">        b=b*<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> b.<span class=\"built_in\">sum</span>()&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        c=b <span class=\"comment\">#c=kb=ka</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        c=<span class=\"number\">100</span>*b <span class=\"comment\">#c=100kb=100ka</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c <span class=\"comment\">#ka</span></span><br><span class=\"line\">a=torch.randn(size=(),requires_grad=<span class=\"literal\">True</span>)</span><br><span class=\"line\">D=f(a) <span class=\"comment\">#</span></span><br><span class=\"line\">D.backward()</span><br><span class=\"line\">a.grad==D/a <span class=\"comment\">#梯度就是k=D/a</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<pre><code>tensor(True)\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cls0iclqk0001wovw5iv5e6hh","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0iclqv000dwovw4nvr1mg8"},{"post_id":"cls0iclqs0007wovw7euf2g9q","category_id":"cls0iclqu000awovw4pwr1d3i","_id":"cls0iclqz000lwovwfbto74ud"},{"post_id":"cls0iclqt0008wovw9l6mhco8","category_id":"cls0iclqu000awovw4pwr1d3i","_id":"cls0iclr1000swovwgs0ffauo"},{"post_id":"cls0iclqu000bwovw0ogt51pc","category_id":"cls0iclqu000awovw4pwr1d3i","_id":"cls0iclr2000ywovw67hi894a"},{"post_id":"cls0iclqv000cwovwels30r1i","category_id":"cls0iclr1000rwovwe92ea8gn","_id":"cls0iclr40015wovw06hpc4ni"},{"post_id":"cls0iclqw000fwovwcpx04w2j","category_id":"cls0iclr1000rwovwe92ea8gn","_id":"cls0iclr5001awovwe3a598u4"},{"post_id":"cls0iclqx000hwovw8j9b0lgj","category_id":"cls0iclr30014wovw55xo9bfc","_id":"cls0iclr6001fwovw3l010r5i"},{"post_id":"cls0iclr5001cwovwefk24cbg","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclr7001kwovw2i6m4upb"},{"post_id":"cls0iclqy000jwovwgqqfgwom","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclr8001pwovw3h491fd8"},{"post_id":"cls0iclr6001dwovw2nushy1i","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclr9001rwovw3rhb7hno"},{"post_id":"cls0iclr7001hwovwapzffpyh","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclra001vwovwgqw74n2v"},{"post_id":"cls0iclr0000nwovwhuas25q0","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrb001ywovw3umlcbr3"},{"post_id":"cls0iclr7001jwovwd5is6vqi","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrb0023wovw9g8wafvk"},{"post_id":"cls0iclr8001owovw6ai2b1cs","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrc0026wovw6469fs9k"},{"post_id":"cls0iclr0000qwovwcqci5bzy","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrd002awovw1jyu9vk3"},{"post_id":"cls0iclr9001qwovw3m5a1rka","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclre002dwovw0srlglf3"},{"post_id":"cls0iclr9001uwovw6tay19y9","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclre002hwovw4rzdh35v"},{"post_id":"cls0iclr1000uwovw8qjwg88j","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrf002jwovw3mi9df1h"},{"post_id":"cls0iclra001xwovweoes2c3j","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrf002mwovw2qmx2l4a"},{"post_id":"cls0iclrb0022wovw0cfd95oy","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrg002qwovw7psl471i"},{"post_id":"cls0iclr2000xwovw2s77cdjp","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrg002swovw8zmd4gds"},{"post_id":"cls0iclrc0025wovw88jr4uwy","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrh002uwovw108z3s0j"},{"post_id":"cls0iclrc0029wovwgsm4g76i","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrh002xwovw9bi45yyf"},{"post_id":"cls0iclr30011wovw2w7z7nud","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrh0030wovw436x9wln"},{"post_id":"cls0iclrd002cwovw1mtqenya","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclrh0032wovwgrrsb2g6"},{"post_id":"cls0iclre002gwovw97dsde2g","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclri0035wovw85rx9o9n"},{"post_id":"cls0iclr30013wovwa94o2lky","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclri0036wovw9lis54nn"},{"post_id":"cls0iclrf002iwovw060mf83w","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclri0038wovwgc6getz7"},{"post_id":"cls0iclr40017wovw4j9uh2vp","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclri003awovwesby2xwq"},{"post_id":"cls0iclr40018wovw7k8m8k6c","category_id":"cls0iclr5001bwovw0erx93zn","_id":"cls0iclri003dwovwa3ct924x"},{"post_id":"cls0iclrf002lwovw4m8c45m4","category_id":"cls0iclrh002wwovwemr3ckr7","_id":"cls0iclri003fwovwd38fgeq5"},{"post_id":"cls0iclrg002pwovw4kdnc091","category_id":"cls0iclrh0033wovw147qf0nt","_id":"cls0iclrj003hwovw0udk9ajy"},{"post_id":"cls0iclrv005ywovwh7ny064u","category_id":"cls0iclrh0033wovw147qf0nt","_id":"cls0iclrx0065wovwem6o0q0h"},{"post_id":"cls0iclrw0061wovweso002xm","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0iclrx0068wovwec9ig774"},{"post_id":"cls0iclrw0064wovw1acffkkk","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0iclry006cwovw6uhd1x8v"},{"post_id":"cls0iclrx0066wovwdebd49kr","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0iclrz006ewovwb5ps43ci"},{"post_id":"cls0iclrv005zwovw34lu81v7","category_id":"cls0iclrw0062wovw38094st8","_id":"cls0iclrz006hwovwc08dhs8n"},{"post_id":"cls0iclrx0067wovw7jha40al","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0icls0006iwovw5ne22fm6"},{"post_id":"cls0iclry006bwovw8y267nmr","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0icls0006kwovwa4akf3qs"},{"post_id":"cls0iclry006dwovwakvx9744","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0icls0006mwovwb1rsht19"},{"post_id":"cls0iclrz006gwovwgj69h2nz","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls0icls1006pwovwfd221vtk"},{"post_id":"cls0ijcj00001j0vw5ljq05py","category_id":"cls0iclr1000rwovwe92ea8gn","_id":"cls0ila1v0006j0vw05079ncr"},{"post_id":"cls0ijcj00001j0vw5ljq05py","category_id":"cls0ila1u0005j0vw1fhqakth","_id":"cls0ila1w0007j0vw5yikhtm5"},{"post_id":"cls0ipjhe0009j0vwf11p68iy","category_id":"cls0iclr1000rwovwe92ea8gn","_id":"cls0iq31m000bj0vw7sia8diw"},{"post_id":"cls0ipjhe0009j0vwf11p68iy","category_id":"cls0iqo8h000dj0vwdzht4cwr","_id":"cls0iqo8h000ej0vw5dd44w5b"},{"post_id":"cls3avc330000p0vw6ax4bt9x","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls3avc380005p0vwbl3m9kbw"},{"post_id":"cls3avc350001p0vwh3a74au9","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls3avc390007p0vw1stl918i"},{"post_id":"cls3avc380004p0vw5s3f547v","category_id":"cls0iclqq0004wovwb0tdb0a0","_id":"cls3avc39000ap0vw5kuaav9n"}],"PostTag":[{"post_id":"cls0iclqk0001wovw5iv5e6hh","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0iclqz000mwovw81pt2rsw"},{"post_id":"cls0iclqk0001wovw5iv5e6hh","tag_id":"cls0iclqt0009wovw9cqz0c3u","_id":"cls0iclr0000owovwgyg19rs5"},{"post_id":"cls0iclqk0001wovw5iv5e6hh","tag_id":"cls0iclqv000ewovwaoz67ly9","_id":"cls0iclr1000twovwg4zec845"},{"post_id":"cls0iclqs0007wovw7euf2g9q","tag_id":"cls0iclqy000iwovw02743ppm","_id":"cls0iclr1000vwovwhneq0ql1"},{"post_id":"cls0iclqt0008wovw9l6mhco8","tag_id":"cls0iclqy000iwovw02743ppm","_id":"cls0iclr20010wovw2sy76v69"},{"post_id":"cls0iclqu000bwovw0ogt51pc","tag_id":"cls0iclqy000iwovw02743ppm","_id":"cls0iclr40016wovw22g8cwep"},{"post_id":"cls0iclqv000cwovwels30r1i","tag_id":"cls0iclr30012wovw4lt8ctu6","_id":"cls0iclr7001iwovw52k23b9v"},{"post_id":"cls0iclqv000cwovwels30r1i","tag_id":"cls0iclr50019wovw2do63nde","_id":"cls0iclr8001lwovw2kpq40as"},{"post_id":"cls0iclqw000fwovwcpx04w2j","tag_id":"cls0iclr30012wovw4lt8ctu6","_id":"cls0iclra001wwovw3ty42x41"},{"post_id":"cls0iclqw000fwovwcpx04w2j","tag_id":"cls0iclr50019wovw2do63nde","_id":"cls0iclrb001zwovw2wy439n5"},{"post_id":"cls0iclqx000hwovw8j9b0lgj","tag_id":"cls0iclr9001swovwdxhp3ea3","_id":"cls0iclrc0024wovw04m34zqg"},{"post_id":"cls0iclqy000jwovwgqqfgwom","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrd002bwovweqrea17x"},{"post_id":"cls0iclrf002iwovw060mf83w","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrg002owovwdzl3f0sw"},{"post_id":"cls0iclr0000nwovwhuas25q0","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrh002vwovw6vf76gyv"},{"post_id":"cls0iclr0000nwovwhuas25q0","tag_id":"cls0iclre002fwovw1b5rcdc0","_id":"cls0iclrh002ywovw2xvoby9y"},{"post_id":"cls0iclr0000nwovwhuas25q0","tag_id":"cls0iclrg002nwovw3p9c59b9","_id":"cls0iclrh0031wovw2d7x5t83"},{"post_id":"cls0iclr0000qwovwcqci5bzy","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclri0039wovwghnm0mpm"},{"post_id":"cls0iclr0000qwovwcqci5bzy","tag_id":"cls0iclre002fwovw1b5rcdc0","_id":"cls0iclri003bwovw4xr8f8nr"},{"post_id":"cls0iclr0000qwovwcqci5bzy","tag_id":"cls0iclri0034wovwf68pcizr","_id":"cls0iclri003ewovw8do4hteu"},{"post_id":"cls0iclr1000uwovw8qjwg88j","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrj003iwovwf59x9u6a"},{"post_id":"cls0iclr1000uwovw8qjwg88j","tag_id":"cls0iclre002fwovw1b5rcdc0","_id":"cls0iclrj003jwovw6f33gsoa"},{"post_id":"cls0iclr2000xwovw2s77cdjp","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrj003mwovwajm9ffzr"},{"post_id":"cls0iclr2000xwovw2s77cdjp","tag_id":"cls0iclrj003kwovw8s7lg4nk","_id":"cls0iclrj003nwovw868l9iv2"},{"post_id":"cls0iclr30011wovw2w7z7nud","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrk003qwovwbzjg0nwb"},{"post_id":"cls0iclr30011wovw2w7z7nud","tag_id":"cls0iclrj003owovw9tg55egz","_id":"cls0iclrk003rwovwbf83gume"},{"post_id":"cls0iclr30013wovwa94o2lky","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrk003vwovw4jtscvlw"},{"post_id":"cls0iclr30013wovwa94o2lky","tag_id":"cls0iclrj003kwovw8s7lg4nk","_id":"cls0iclrl003wwovwg14deygk"},{"post_id":"cls0iclr30013wovwa94o2lky","tag_id":"cls0iclrj003owovw9tg55egz","_id":"cls0iclrl003ywovw09c7bf1z"},{"post_id":"cls0iclr40017wovw4j9uh2vp","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrl003zwovw1aomfdzm"},{"post_id":"cls0iclr40018wovw7k8m8k6c","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrl0042wovwezbb0fgq"},{"post_id":"cls0iclr40018wovw7k8m8k6c","tag_id":"cls0iclrl0040wovw7v518xin","_id":"cls0iclrl0043wovw53cvcjn8"},{"post_id":"cls0iclr5001cwovwefk24cbg","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrm0046wovwfwi37pum"},{"post_id":"cls0iclr5001cwovwefk24cbg","tag_id":"cls0iclrl0044wovw9all2i5k","_id":"cls0iclrm0047wovw9e2t0vul"},{"post_id":"cls0iclr6001dwovw2nushy1i","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrm004bwovw3jobdsoy"},{"post_id":"cls0iclr6001dwovw2nushy1i","tag_id":"cls0iclrl0040wovw7v518xin","_id":"cls0iclrm004cwovw39yl7ume"},{"post_id":"cls0iclr6001dwovw2nushy1i","tag_id":"cls0iclrm0049wovwav0m2b0h","_id":"cls0iclrn004ewovw15m76lck"},{"post_id":"cls0iclr7001hwovwapzffpyh","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrn004gwovwfeghcqe2"},{"post_id":"cls0iclr7001hwovwapzffpyh","tag_id":"cls0iclrm004dwovw8n44aqs3","_id":"cls0iclrn004hwovw8r5111bh"},{"post_id":"cls0iclr7001jwovwd5is6vqi","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrn004kwovw6fb4cbku"},{"post_id":"cls0iclr7001jwovwd5is6vqi","tag_id":"cls0iclrl0040wovw7v518xin","_id":"cls0iclrn004lwovwebvl8d3e"},{"post_id":"cls0iclr8001owovw6ai2b1cs","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclro004pwovw709s1mjr"},{"post_id":"cls0iclr8001owovw6ai2b1cs","tag_id":"cls0iclrl0040wovw7v518xin","_id":"cls0iclro004qwovwcxg98w0k"},{"post_id":"cls0iclr8001owovw6ai2b1cs","tag_id":"cls0iclro004nwovwbunh8c1t","_id":"cls0iclro004swovw76fy1q0u"},{"post_id":"cls0iclr9001qwovw3m5a1rka","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrp004uwovwgz76b0ld"},{"post_id":"cls0iclr9001qwovw3m5a1rka","tag_id":"cls0iclro004rwovwdwblfmpq","_id":"cls0iclrp004vwovw1b1i7n7p"},{"post_id":"cls0iclr9001uwovw6tay19y9","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrp004zwovwgwk923hz"},{"post_id":"cls0iclr9001uwovw6tay19y9","tag_id":"cls0iclrm004dwovw8n44aqs3","_id":"cls0iclrp0050wovwfqzy1isy"},{"post_id":"cls0iclr9001uwovw6tay19y9","tag_id":"cls0iclrp004xwovw6fc9hsce","_id":"cls0iclrp0052wovw5uqdguhk"},{"post_id":"cls0iclra001xwovweoes2c3j","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrq0054wovw6ouufj7d"},{"post_id":"cls0iclra001xwovweoes2c3j","tag_id":"cls0iclrm004dwovw8n44aqs3","_id":"cls0iclrq0055wovwg4h45wkd"},{"post_id":"cls0iclrb0022wovw0cfd95oy","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrq0058wovw6gaub9e0"},{"post_id":"cls0iclrb0022wovw0cfd95oy","tag_id":"cls0iclrm004dwovw8n44aqs3","_id":"cls0iclrq0059wovw835ac3nc"},{"post_id":"cls0iclrb0022wovw0cfd95oy","tag_id":"cls0iclrq0056wovweoopbgcu","_id":"cls0iclrq005bwovw0z91dhgq"},{"post_id":"cls0iclrc0025wovw88jr4uwy","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrq005dwovwh2j24ltm"},{"post_id":"cls0iclrc0025wovw88jr4uwy","tag_id":"cls0iclrq0057wovw13xs3d9q","_id":"cls0iclrr005ewovw8ub8es5d"},{"post_id":"cls0iclrc0025wovw88jr4uwy","tag_id":"cls0iclrq005awovwfrfybr55","_id":"cls0iclrr005gwovwbh5ghuy3"},{"post_id":"cls0iclrc0029wovwgsm4g76i","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrr005iwovwdgv71phf"},{"post_id":"cls0iclrc0029wovwgsm4g76i","tag_id":"cls0iclrq0057wovw13xs3d9q","_id":"cls0iclrr005jwovw7kr05dp7"},{"post_id":"cls0iclrc0029wovwgsm4g76i","tag_id":"cls0iclrr005fwovwdzvgguis","_id":"cls0iclrr005lwovwd5vthbo0"},{"post_id":"cls0iclrd002cwovw1mtqenya","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrr005mwovw9i8a3fie"},{"post_id":"cls0iclrd002cwovw1mtqenya","tag_id":"cls0iclrq0057wovw13xs3d9q","_id":"cls0iclrr005owovw8dqd7070"},{"post_id":"cls0iclre002gwovw97dsde2g","tag_id":"cls0iclrb0020wovw0ag81ub7","_id":"cls0iclrs005qwovw1qo1bcif"},{"post_id":"cls0iclre002gwovw97dsde2g","tag_id":"cls0iclrq0057wovw13xs3d9q","_id":"cls0iclrs005rwovwhv3n2z65"},{"post_id":"cls0iclre002gwovw97dsde2g","tag_id":"cls0iclrr005nwovw2zys4k1s","_id":"cls0iclrs005twovw6led30kz"},{"post_id":"cls0iclrf002lwovw4m8c45m4","tag_id":"cls0iclrr005pwovwhh9od1ab","_id":"cls0iclrs005uwovwh2862t8a"},{"post_id":"cls0iclrg002pwovw4kdnc091","tag_id":"cls0iclrs005swovwdns9g05e","_id":"cls0iclrs005wwovw862w6lq7"},{"post_id":"cls0iclrg002pwovw4kdnc091","tag_id":"cls0iclrs005vwovw85i0fzjo","_id":"cls0iclrs005xwovw8xix2d5a"},{"post_id":"cls0iclrv005ywovwh7ny064u","tag_id":"cls0iclrs005swovwdns9g05e","_id":"cls0iclrw0060wovw32sv0miw"},{"post_id":"cls0iclrv005zwovw34lu81v7","tag_id":"cls0iclrw0063wovwh9is73r9","_id":"cls0iclry006awovwdeu0hij9"},{"post_id":"cls0iclrw0061wovweso002xm","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls0006lwovwgfe43o42"},{"post_id":"cls0iclrw0061wovweso002xm","tag_id":"cls0iclry0069wovw39lfafj1","_id":"cls0icls0006nwovw39bn9pw0"},{"post_id":"cls0iclrw0061wovweso002xm","tag_id":"cls0iclrz006fwovwge1g40wt","_id":"cls0icls1006qwovw7pkd3pg4"},{"post_id":"cls0iclrw0064wovw1acffkkk","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls1006swovwee342nuh"},{"post_id":"cls0iclrw0064wovw1acffkkk","tag_id":"cls0iclry0069wovw39lfafj1","_id":"cls0icls1006twovw00xxhb63"},{"post_id":"cls0iclrw0064wovw1acffkkk","tag_id":"cls0iclrz006fwovwge1g40wt","_id":"cls0icls2006vwovwa0ph5brb"},{"post_id":"cls0iclrx0066wovwdebd49kr","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls2006xwovw841oghv5"},{"post_id":"cls0iclrx0066wovwdebd49kr","tag_id":"cls0iclry0069wovw39lfafj1","_id":"cls0icls2006ywovw5gbu2gud"},{"post_id":"cls0iclrx0066wovwdebd49kr","tag_id":"cls0iclrz006fwovwge1g40wt","_id":"cls0icls20070wovw31gs8bvn"},{"post_id":"cls0iclrx0067wovw7jha40al","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls30072wovw40cdctt7"},{"post_id":"cls0iclrx0067wovw7jha40al","tag_id":"cls0iclry0069wovw39lfafj1","_id":"cls0icls30073wovwa88meax7"},{"post_id":"cls0iclrx0067wovw7jha40al","tag_id":"cls0iclrz006fwovwge1g40wt","_id":"cls0icls30075wovwe7vj7wxh"},{"post_id":"cls0iclry006bwovw8y267nmr","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls30076wovw22j87k0k"},{"post_id":"cls0iclry006bwovw8y267nmr","tag_id":"cls0iclry0069wovw39lfafj1","_id":"cls0icls30078wovwe0vjgeb3"},{"post_id":"cls0iclry006bwovw8y267nmr","tag_id":"cls0iclrz006fwovwge1g40wt","_id":"cls0icls40079wovw4ssj25ep"},{"post_id":"cls0iclry006dwovwakvx9744","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls4007bwovw1x0e9wjb"},{"post_id":"cls0iclry006dwovwakvx9744","tag_id":"cls0icls30074wovwcihi2bm3","_id":"cls0icls4007cwovw76cp8aeh"},{"post_id":"cls0iclry006dwovwakvx9744","tag_id":"cls0icls30077wovweol8hacm","_id":"cls0icls4007ewovwfa7v189s"},{"post_id":"cls0iclrz006gwovwgj69h2nz","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls0icls4007gwovwe5q7fw2p"},{"post_id":"cls0iclrz006gwovwgj69h2nz","tag_id":"cls0icls30074wovwcihi2bm3","_id":"cls0icls5007hwovwfboeennp"},{"post_id":"cls0iclrz006gwovwgj69h2nz","tag_id":"cls0icls30077wovweol8hacm","_id":"cls0icls5007iwovw35ur8svw"},{"post_id":"cls0iclrz006gwovwgj69h2nz","tag_id":"cls0icls4007fwovw1thc6ys5","_id":"cls0icls5007jwovw4b7x6pd1"},{"post_id":"cls0ijcj00001j0vw5ljq05py","tag_id":"cls0iclr30012wovw4lt8ctu6","_id":"cls0ila1u0004j0vwa4v419hf"},{"post_id":"cls0ipjhe0009j0vwf11p68iy","tag_id":"cls0iclr30012wovw4lt8ctu6","_id":"cls0iq31m000aj0vwg5k6h5g8"},{"post_id":"cls3avc330000p0vw6ax4bt9x","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls3avc360002p0vw7hyxfshs"},{"post_id":"cls3avc330000p0vw6ax4bt9x","tag_id":"cls0icls30074wovwcihi2bm3","_id":"cls3avc370003p0vw9jgddw7x"},{"post_id":"cls3avc330000p0vw6ax4bt9x","tag_id":"cls0icls30077wovweol8hacm","_id":"cls3avc380006p0vw64uk0l09"},{"post_id":"cls3avc350001p0vwh3a74au9","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls3avc390008p0vwgh8pd3lb"},{"post_id":"cls3avc350001p0vwh3a74au9","tag_id":"cls0icls30074wovwcihi2bm3","_id":"cls3avc390009p0vwa4lvdxn2"},{"post_id":"cls3avc350001p0vwh3a74au9","tag_id":"cls0icls30077wovweol8hacm","_id":"cls3avc39000bp0vwhd1tc7je"},{"post_id":"cls3avc380004p0vw5s3f547v","tag_id":"cls0iclqr0005wovwbwf0drwj","_id":"cls3avc39000cp0vw1ipu0mud"},{"post_id":"cls3avc380004p0vw5s3f547v","tag_id":"cls0icls30074wovwcihi2bm3","_id":"cls3avc39000dp0vw3jfhbs80"},{"post_id":"cls3avc380004p0vw5s3f547v","tag_id":"cls0icls30077wovweol8hacm","_id":"cls3avc39000ep0vw7nlve5i3"}],"Tag":[{"name":"深度学习","_id":"cls0iclqr0005wovwbwf0drwj"},{"name":"DDPM","_id":"cls0iclqt0009wovw9cqz0c3u"},{"name":"生成模型","_id":"cls0iclqv000ewovwaoz67ly9"},{"name":"Linux","_id":"cls0iclqy000iwovw02743ppm"},{"name":"博客","_id":"cls0iclr30012wovw4lt8ctu6"},{"name":"hexo","_id":"cls0iclr50019wovw2do63nde"},{"name":"微信小程序","_id":"cls0iclr9001swovwdxhp3ea3"},{"name":"数据结构","_id":"cls0iclrb0020wovw0ag81ub7"},{"name":"线性表","_id":"cls0iclre002fwovw1b5rcdc0"},{"name":"单链表","_id":"cls0iclrg002nwovw3p9c59b9"},{"name":"双链表","_id":"cls0iclri0034wovwf68pcizr"},{"name":"栈","_id":"cls0iclrj003kwovw8s7lg4nk"},{"name":"队列","_id":"cls0iclrj003owovw9tg55egz"},{"name":"树","_id":"cls0iclrl0040wovw7v518xin"},{"name":"串","_id":"cls0iclrl0044wovw9all2i5k"},{"name":"二叉树","_id":"cls0iclrm0049wovwav0m2b0h"},{"name":"图","_id":"cls0iclrm004dwovw8n44aqs3"},{"name":"哈夫曼树","_id":"cls0iclro004nwovwbunh8c1t"},{"name":"并查集","_id":"cls0iclro004rwovwdwblfmpq"},{"name":"最小生成树","_id":"cls0iclrp004xwovw6fc9hsce"},{"name":"最短路径","_id":"cls0iclrq0056wovweoopbgcu"},{"name":"查找","_id":"cls0iclrq0057wovw13xs3d9q"},{"name":"二叉排序树","_id":"cls0iclrq005awovwfrfybr55"},{"name":"平衡二叉树","_id":"cls0iclrr005fwovwdzvgguis"},{"name":"B树","_id":"cls0iclrr005nwovw2zys4k1s"},{"name":"算法，排序","_id":"cls0iclrr005pwovwhh9od1ab"},{"name":"其他","_id":"cls0iclrs005swovwdns9g05e"},{"name":"pycharm","_id":"cls0iclrs005vwovw85i0fzjo"},{"name":"vscode","_id":"cls0iclrw0063wovwh9is73r9"},{"name":"论文","_id":"cls0iclry0069wovw39lfafj1"},{"name":"超分","_id":"cls0iclrz006fwovwge1g40wt"},{"name":"机器学习","_id":"cls0icls30074wovwcihi2bm3"},{"name":"pytorch","_id":"cls0icls30077wovweol8hacm"},{"name":"数据预处理","_id":"cls0icls4007fwovw1thc6ys5"}]}}